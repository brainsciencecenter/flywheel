#!/usr/bin/env python3

import argparse
import dictdiffer
import flywheel
import fwgearutils
import json
import os
import pyjq
import re
import sys

from os.path import expanduser

'''
csvjson /tmp/upload.csv > /tmp/json; 
fwProjectInfoCrud  -u -p .ProjectFunding.businessAdministrator.name -j 'foe' holder/Test1
fwProjectInfoCrud -p ProjectFunding -g | jq 'del(.[]|nulls)|select(. != {})' 		# returns all projectfunding group/projects with info
fwProjectInfoCrud -p ProjectFunding -g | jq 'select(.[] == null) | keys | .[]' 		# returns all projectfunding group/projects without project funding 

pull json from group/project info

Push updated csv file back to flywheel:

(head -n 1 /tmp/2021-03-28-1247-ProjectFunding\ \(1\)\ mgr.csv; grep -i '^"x"' /tmp/2021-03-11-ProjectFunding-mgr.csv ) > /tmp/upload.csv
updateFlywheelProjectFunding   /tmp/upload.csv 

Update the PIs for fw-support/TestProject
  fwProjectInfoCrud -v -p '.ProjectFunding.PIs' -u -P '.ProjectFunding.PIs |= ' -j '["support@flywheel.io"]' fw-support/TestProject

'''

if __name__ == '__main__':
    import argparse
    import tempfile

    CmdName = os.path.basename(sys.argv[0])

    ap = argparse.ArgumentParser()

    ap.add_argument('-d', '--debug', action='store_true', dest='debug', help='print additional debugging info')
    ap.add_argument('-n', '--noop', action='store_true', help='do not actually do anything.')
    ap.add_argument('-j', '--json', action='store', help='json or json file to update project info with')
    ap.add_argument('-P', '--update-path', default='. |=', action='store', help='"jq" path to update project info')
    ap.add_argument('-p', '--path', default='.', action='store', help='Use "jq" path to filter project info')
    ap.add_argument('-u', '--update', action='store_true', help='update project info metadata')
    ap.add_argument('-v', '--verbose', action='store_true', help='show what is being done')
    ap.add_argument('project', nargs="*", default=[], help='group/project or project uuid')
    args = ap.parse_args()

    JsonPath = args.path
    Json = None
    Projects = []

    fw = fwgearutils.getFW(args)
    if (not fw):
        print("%s : unable to initialize flywheel object" % (CmdName), file=sys.stderr)
        sys.exit(1)

    if (args.json):
        if (os.path.isfile(args.json)):
            with open(args.json) as f:
                Json = json.load(f)
        else:
            Json = json.loads(args.json)

    if (len(args.project) > 0):
        Projects = args.project
    else:
        if (args.json):
            Projects = pyjq.all('.[]|keys[0]', Json)
        if (len(Projects) == 0 or (not re.search("/", Projects[0]))):
            Projects = list(map(lambda p: p.id, fw.get_all_projects(exhaustive=True)))
        
    ProjectInfos = []
    i = 0
    for pid in Projects:

        try:
            project = fw.get(pid)
        except flywheel.rest.ApiException as e:
            try:
                project = fw.lookup(pid)
                # lookup doesn't get the info portion of the container.  
                project = fw.get(project.id)

            except flywheel.rest.ApiException as e:
                print("%s : Cannot find project by '%s' : %s" % (CmdName, pid, e.reason), file=sys.stderr)
                sys.exit(e.status)

        ProjectInfoDict = fwgearutils.decodeKeys(project.info)
#        print("ProjectInfoDict: ", json.dumps(ProjectInfoDict, indent=2), file=sys.stderr)
#        print("args.path: ", json.dumps(pyjq.all(args.path, ProjectInfoDict)[0], indent=2), file=sys.stderr)

        if (args.update and args.json):
            if (len(args.project) > 0):
                JqString = "{} {}".format(args.update_path,json.dumps(Json, indent=2))
            else:
                JqString = "{} {}".format(args.update_path + '(',json.dumps(Json[i], indent=2) + ')[]')
                i += 1

#            print("JqString = '{}'".format(JqString), file=sys.stderr)
            # pyjq.all() returns a list, not the object??

            UpdatedProjectInfoDict = pyjq.all(JqString, ProjectInfoDict)[0]
#            print("args.updatepath: ", json.dumps(pyjq.all(args.path, UpdatedProjectInfoDict)[0], indent=2), file=sys.stderr)

            if (args.noop or args.verbose):
                Diff = list(dictdiffer.diff(pyjq.all(args.path,ProjectInfoDict)[0],pyjq.all(args.path,UpdatedProjectInfoDict)[0]))
                if (len(Diff) > 0):
                    print("{}/{}:".format(project.group,project.label))
                    print("===================")
                    print(json.dumps(Diff,indent=2))
                    print("")

            if (not args.noop):
                project.update_info(UpdatedProjectInfoDict)

            project = project.reload()
            ProjectInfoDict = fwgearutils.decodeKeys(project.info)

        if (args.verbose or (not (args.update))):
            GroupId = fw.get(project.group).id
            JqStr = '{"' + GroupId + '/' + project.label + '": ' + args.path + '}'

            ProjectInfos.append(pyjq.all(JqStr,ProjectInfoDict)[0])

    if (len(ProjectInfos) > 0):
        print(json.dumps(ProjectInfos, indent=2))

