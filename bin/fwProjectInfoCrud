#!/usr/bin/env python3

import sys
import re
import os
import flywheel
import json
import argparse
import fwgearutils
import pyjq

from os.path import expanduser

'''
fwProjectInfoCrud  -u -p .ProjectFunding.businessAdministrator.name -j 'foe' holder/Test1
fwProjectInfoCrud -p ProjectFunding -g | jq 'del(.[]|nulls)|select(. != {})' 		# returns all projectfunding group/projects with info
fwProjectInfoCrud -p ProjectFunding -g | jq 'select(.[] == null) | keys | .[]' 		# returns all projectfunding group/projects without project funding 

pull json from gropu/project info
'''

if __name__ == '__main__':
    import argparse
    import tempfile

    CmdName = os.path.basename(sys.argv[0])

    ap = argparse.ArgumentParser()

    ap.add_argument('-d', '--debug', action='store_true', dest='debug', help='print additional debugging info')
    ap.add_argument('-n', '--noop', action='store_true', help='do not actually do anything.')
    ap.add_argument('-j', '--json', action='store', help='json or json file to update project info with')
    ap.add_argument('-P', '--update-path', default='. |=', action='store', help='"jq" path to update project info')
    ap.add_argument('-p', '--path', default='.', action='store', help='Use "jq" path to filter project info')
    ap.add_argument('-u', '--update', action='store_true', help='update project info metadata')
    ap.add_argument('-v', '--verbose', action='store_true', help='show what is being done')
    ap.add_argument('project', nargs="*", help='group/project or project uuid')
    args = ap.parse_args()

    JsonPath = args.path
    Json = None

    fw = fwgearutils.getFW(args)
    if (not fw):
        print("%s : unable to initialize flywheel object" % (CmdName), file=sys.stderr)
        sys.exit(1)

    if (args.update and args.json):
        if (os.path.isfile(args.json)):
            with open(args.json) as f:
                Json = json.load(f)
        else:
            Json = json.loads(args.json)

    if (len(args.project) > 0):
        Projects = args.project
    else:
        Projects = list(map(lambda p: p.id, fw.get_all_projects()))
        
    for pid in Projects:

        try:
            project = fw.get(pid)
        except flywheel.rest.ApiException as e:
            try:
                project = fw.lookup(pid)
            except flywheel.rest.ApiException as e:
                print("%s : Cannot find project by '%s' : %s" % (CmdName, pid, e.reason), file=sys.stderr)
                sys.exit(e.status)

        ProjectInfoDict = fwgearutils.decodeKeys(project.info)

        if (args.update and args.json):
            JqString = "{} {}".format(args.update_path,json.dumps(Json, indent=2))

            # pyjq.all() returns a list, not the object??
            UpdatedProjectInfoDict = pyjq.all(JqString, ProjectInfoDict)[0]

            if (args.noop or args.verbose):
                print("Updated Project Info", json.dumps(UpdatedProjectInfoDict, indent=2), file=sys.stderr)

            if (not args.noop):
                project.update_info(UpdatedProjectInfoDict)

            project = project.reload()
            ProjectInfoDict = fwgearutils.decodeKeys(project.info)

        GroupId = fw.get(project.group).id
        JqStr = '{"' + GroupId + '/' + project.label + '": ' + args.path + '}'
        print(json.dumps(pyjq.all(JqStr,ProjectInfoDict)[0], indent=2))



