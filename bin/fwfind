#!/usr/bin/env python3

#
# Flywheel says subject.label doesn't really exist -- only put out in the output for consistency.  Use subjects.find('code="12345"')
# Numeric strings must be _Double_Quoted_ to be correctly interpeted as strings -- otherwise comparing strings vs numbers.
# 

import argparse
import fwgearutils
import flywheel
import json
import pyjq
import os
import re
import sys

def rr(r):
    for a in dict(r).keys():
        try:
            print(json.dumps(a, indent=2))
        except (TypeError) as e:
            print("dumping {} failed".format(a), file=sys.stderr)
            

if __name__ == '__main__':

    import argparse

    CmdName = os.path.basename(sys.argv[0])

    ap = argparse.ArgumentParser()
    ap.add_argument('-d', '--debug',  action='store_true', help='print debug info')
    ap.add_argument('-D', '--devices',  action='store_true', help='find device info')
    ap.add_argument('-l', '--localtime',  action='store_true', default=False, help='print times in local timezone instead of UTC')
    ap.add_argument('-g', '--get',  action='store_true', help='do fw.get on each session')
    ap.add_argument('-G', '--do-get',  action='store_true', help='do fw.get instead of iter_find')
    ap.add_argument('-r', '--recurse',  action='store_true', help='recurse through data structure')
    ap.add_argument('-v', '--verbose',  action='store_true', help='print progress info')
    ap.add_argument('-z', '--zip-info',  action='store_true', help='include zip file information')
    
    # Projects, Subjects, Sessions, Acquisitions and Analyses are containers
    # but Analyses are only containers within the other containers and not from the flywheel object
    cap = ap.add_mutually_exclusive_group()
    cap.add_argument('-a', '--acquisitions',  action='store_true', help='find acquisition information')
#    cap.add_argument('-A', '--analyses',  action='store_true', help='find analyses information')
    cap.add_argument('-j', '--jobs',  action='store_true', help='find job information')
    cap.add_argument('-p', '--projects',  action='store_true', help='find project information')
    cap.add_argument('-s', '--subjects',  action='store_true', help='find subject information')
    cap.add_argument('-S', '--sessions',  action='store_true', help='find session information')

 
    ap.add_argument('findargs', nargs='+', type=str, default=None, help='find args')

    args = ap.parse_args()

    fw = fwgearutils.getFW(args,Root=True)
    if (not fw):
        print("%s : unable to initialize flywheel object" % (CmdName), file=sys.stderr)
        sys.exit(1)

    res = None

    if (args.acquisitions):
        res = fw.acquisitions.iter_find(*args.findargs)
#    if (args.analyses):
#        print(fw.__dir__())
#        res = fw.analyses.find(*args.findargs)
    if (args.jobs):
        # Need -gr to do job detail and profile
        res = fw.jobs.iter_find(*args.findargs)
    if (args.projects):
        res = fw.projects.iter_find(*args.findargs)
    if (args.subjects):
        if (args.verbose):
            print("%s : fw.subjects.iter_find(%s)" % (CmdName, ''.join(*args.findargs)), file=sys.stderr)
        res = fw.subjects.iter_find(*args.findargs)
    if (args.sessions):
        if (args.verbose):
            print("%s : fw.sessions.iter_find(%s)" % (CmdName, ''.join(*args.findargs)), file=sys.stderr)
        res = fw.sessions.iter_find(*args.findargs)

    if (args.devices):
        res = fw.get_all_devices()
        Outputs = fwgearutils.sloppyCopy(res, recurse=True, UTC=(not args.localtime))
        RealScanners = pyjq.all('.[] | select(.name) | select(.name | match("SC3T|SC7T|HUP6"))', Outputs)
        RealScanners = pyjq.all('.[] | select(.name)', Outputs)
        print(json.dumps(RealScanners, indent=2))
        sys.exit(0)

    if (args.do_get):
        res = [ fw.get(args.findargs[0]) ]

    #
    # Want to add analyses
    #
    Outputs = []
    for r in res:
        if (args.verbose):
            print("%s : r._id = '%s'" % (CmdName, r._id), file=sys.stderr)

        if (args.recurse):
            Output = fwgearutils.recurse(fw, r, CmdName=CmdName, Get=args.get, UTC=(not args.localtime), Debug=args.debug, Verbose=args.verbose, GetAcquisitions=args.acquisitions, ZipInfo=args.zip_info)
        else:
            Output = fwgearutils.sloppyCopy(r, recurse=False, UTC=(not args.localtime))

        Outputs.append(Output)

    print(json.dumps(Outputs,indent=2))

