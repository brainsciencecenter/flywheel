#!/usr/bin/env python3

#
# Flywheel says subject.label doesn't really exist -- only put out in the output for consistency.  Use subjects.find('code="12345"')
# Numeric strings must be _Double_Quoted_ to be correctly interpeted as strings -- otherwise comparing strings vs numbers.
# 
# fwfind -j 'gear_info.name=dcm2niix,state=failed,created>2021-04-24,created<2021-04-30' for all failed jobs
# fwfind -1 -r -j  'parents.acquisition=65b2ad5ecaec881b39f9a7b7' | jq -r .gear_info.name will print the names of all gears

#   which used 65b2ad5ecaec881b39f9a7b7 for the acquisition input. Don't know what happens if the gear uses two acquisistions
# *** collection iter_find needs to purge the group= and project= find args before passing the rest of the list
# into iter_find
# *** Collection lookups should handle both group=Collections project=6630f58dccf3d2ee82ef6f59 and project=ABCD2_WashU_20240430
#

import argparse
import fwgearutils
import flywheel
import json
import pyjq
import os
import re
import sys

def rr(r):
    for a in dict(r).keys():
        try:
            print(json.dumps(a, indent=2))
        except (TypeError) as e:
            print("dumping {} failed".format(a), file=sys.stderr)
            

if __name__ == '__main__':

    import argparse

    CmdName = os.path.basename(sys.argv[0])

    ap = argparse.ArgumentParser()
    ap.add_argument('-1', '--one-by-one',  action='store_true', help='print each output one at a time instead of batching everything')
    ap.add_argument('-d', '--debug',  action='store_true', help='print debug info')
    ap.add_argument('-D', '--devices',  action='store_true', help='find device info')
    ap.add_argument('-e', '--exhaustive',  action='store_true', help='set exhaustive flag')
    ap.add_argument('-L', '--limit',  action='store', default=250, help='Maximum number of results to return at a time.  Defaults to 250')
    ap.add_argument('-l', '--localtime',  action='store_true', default=False, help='print times in local timezone instead of UTC')
    ap.add_argument('-g', '--get',  action='store_true', help='do fw.get on each session')
    ap.add_argument('-G', '--do-get',  action='store_true', help='do fw.get instead of iter_find')
    ap.add_argument('-R', '--recurse-acquisitions',  action='store_true', help='recurse through data structure')
    ap.add_argument('-r', '--recurse',  action='store_true', help='recurse through data structure')
    ap.add_argument('-v', '--verbose',  action='store_true', help='print progress info')
    ap.add_argument('-z', '--zip-info',  action='store_true', help='include zip file information')
    
    # Projects, Subjects, Sessions, Acquisitions and Analyses are containers
    # but Analyses are only containers within the other containers and not from the flywheel object
    cap = ap.add_mutually_exclusive_group()
    cap.add_argument('-a', '--acquisitions',  action='store_true', help='find acquisition information')
#    cap.add_argument('-A', '--analyses',  action='store_true', help='find analyses information')
    ap.add_argument('--gears',  action='store_true', help='find gear information')
    cap.add_argument('-j', '--jobs',  action='store_true', help='find job information')
    cap.add_argument('-p', '--projects',  action='store_true', help='find project information')
    cap.add_argument('-s', '--subjects',  action='store_true', help='find subject information')
    cap.add_argument('-S', '--sessions',  action='store_true', help='find session information')

 
    ap.add_argument('findargs', nargs='*', type=str, default=None, help='find args')

    args = ap.parse_args()

    if (args.debug):
        print("args.findargs = '{}'".format(','.join(args.findargs)), file=sys.stderr)

    fw = fwgearutils.getFW({})
    if (not fw):
        print("%s : unable to initialize flywheel object" % (CmdName), file=sys.stderr)
        sys.exit(1)

    ExhaustiveFlag = False
    if (args.exhaustive):
        ExhaustiveFlag = True
        
#    ExhaustiveFlag = fw.get_current_user().root


    res = None

    if (args.acquisitions):
        if (args.verbose):
            print("%s : fw.acquisitions.iter_find(%s,exhaustive=%s,limit=%s)" % (CmdName, ','.join(args.findargs), ExhaustiveFlag,args.limit), file=sys.stderr)

        try:
            i = (args.findargs.index("group=Collections"))

            ProjectArg = list(filter(lambda arg: re.search("^project=", arg), args.findargs))

            Acquisitions = []
            m = re.search('^project=(?P<ProjectId>.*)$',ProjectArg[0])
            if (m):
                # *** Need to cope with collection label
                Collection = fw.get_collection(m.group("ProjectId"))
                res = Collection.acquisitions.iter_find()
            
        except (ValueError) as e:
#            print("type(fw.acquisitions) == '{}'".format(type(fw.acquisitions)), file=sys.stderr)
            res = fw.acquisitions.iter_find(*args.findargs,exhaustive=ExhaustiveFlag,limit=args.limit)

#    if (args.analyses):
#        print(fw.__dir__())
#        res = fw.analyses.find(*args.findargs)

    if (args.jobs):
        if (args.verbose):
            print("%s : fw.jobs.iter_find(%s,exhaustive=%s,limit=%s)" % (CmdName, ','.join(args.findargs), ExhaustiveFlag,args.limit), file=sys.stderr)
        res = fw.jobs.iter_find(*args.findargs,limit=args.limit)
        # Need -gr to do job detail and profile

    if (args.gears):
        if (args.verbose):
            print("%s : fw.gears.iter_find(%s,exhaustive=%s,limit=%s)" % (CmdName, ','.join(args.findargs), ExhaustiveFlag,args.limit), file=sys.stderr)
        res = fw.gears.iter_find(*args.findargs,limit=args.limit)

    if (args.projects):
        if (args.verbose):
            print("%s : fw.projects.iter_find(%s,exhaustive=%s,limit=%s)" % (CmdName, ','.join(args.findargs), ExhaustiveFlag,args.limit), file=sys.stderr)
        res = fw.projects.iter_find(*args.findargs,exhaustive=ExhaustiveFlag,limit=args.limit)

    if (args.subjects):
        if (args.verbose):
            print("%s : fw.subjects.iter_find(%s,exhaustive=%s,limit=%s)" % (CmdName, ','.join(args.findargs),ExhaustiveFlag,args.limit), file=sys.stderr)
        res = fw.subjects.iter_find(*args.findargs,exhaustive=ExhaustiveFlag,limit=args.limit)

    if (args.sessions):
        if (args.verbose):
            print("%s : fw.sessions.find(%s,exhaustive=%s,limit=%s)" % (CmdName, ','.join(args.findargs), ExhaustiveFlag,args.limit), file=sys.stderr)

        try:
            try:
                i = (args.findargs.index("group=Collections"))
                ProjectArg = list(filter(lambda arg: re.search("^project=", arg), args.findargs))

                m = re.search('^project=(?P<ProjectId>.*)$',ProjectArg[0])
                if (m):
                    Collection = fw.get_collection(m.group("ProjectId"))
                    res = iter(Collection.sessions.iter_find())

            except (ValueError) as e:
                # group=Collections not in args.findargs
                res = fw.sessions.iter_find(*args.findargs,exhaustive=ExhaustiveFlag,limit=args.limit)
        except (flywheel.rest.ApiException) as e:
            print("fw.sessions.find failed",file=sys.stderr)
            res = [ fw.lookup(*args.findargs) ]

    if (args.devices):
        if (args.verbose):
            print("%{} : fw.get_all_devices()".format(CmdName), file=sys.stderr)
        res = fw.get_all_devices()
        Outputs = fwgearutils.sloppyCopy(res, recurse=True, UTC=(not args.localtime))
        RealScanners = pyjq.all('.[] | select(.name) | select(.name | match("SC3T|SC7T|HUP6"))', Outputs)
        RealScanners = pyjq.all('.[] | select(.name)', Outputs)
        print(json.dumps(RealScanners, indent=2))
        sys.exit(0)

    if (args.do_get):
        res = [ fw.get(args.findargs[0]) ]

# *** don't count the res or your use up the generator
#    if (args.verbose):
#        print("{} : len(res) = '{}'".format(CmdName, (sum(1 for dummy in res))), file=sys.stderr)

    #
    # Want to add analyses
    #
    Outputs = []

    for r in res:

        if (args.verbose):
            print("%s : r._id = '%s'" % (CmdName, r._id), file=sys.stderr)

        if (args.recurse):
            Output = fwgearutils.recurse(fw, r, CmdName=CmdName, Get=args.get, UTC=(not args.localtime), Debug=args.debug, Verbose=args.verbose, GetAcquisitions=args.recurse_acquisitions, ZipInfo=args.zip_info)
        else:
#            print("type(r) = '{}'".format(type(r)), file=sys.stderr)

            if (type(r) == flywheel.models.job_list_output.JobListOutput):
                r = fw.get_job(r.id)
            else:
                r = fw.get(r.id)
#            print("type(r) after get = '{}'".format(type(r)), file=sys.stderr)
#            sys.exit(0)

            Output = fwgearutils.sloppyCopy(r, recurse=False, UTC=(not args.localtime))

        if (args.one_by_one):
            print(json.dumps(Output, indent=2))
        else:
            Outputs.append(Output)

    if (not args.one_by_one):
        print(json.dumps(Outputs,indent=2))

