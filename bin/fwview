#!/usr/bin/env python3

#
# fwView [-c containertype][-F csv|json][-f filter][-l limit][-p ProjectId] {field1 [[field2]...]}
#
# fwview -v -c acquisition -f 'acquisition.created>"2025-02-23"' -p 67bccb178aeaa4c653bc9050 acquisition.file.origin.id  acquisition.created subject.code session.label session.id file.info.{DeidentificationMethod,ImageComments,ManufacturerModelName,PerformedProcedureStepDescription,StudyComments,StudyDescription}

import argparse
import csv
import datetime
import flywheel
import fwgearutils
import json
import os
import re
import sys
import pyjq
import pprint

from datetime import datetime
from tzlocal import get_localzone


CmdName = os.path.basename(sys.argv[0])

ap = argparse.ArgumentParser()

ap.add_argument('-c', '--container-type', default='acquisition',  action='store', help='Container type: group, project, subject, acquisition')
ap.add_argument('-F', '--format', default='csv',  action='store', help='format to return output in. either csv or json')
ap.add_argument('-f', '--filter', default=None,  action='store', help='comma separated list of filters to use')
    
ap.add_argument('-l', '--limit', default=None,  action='store', help='Maximum number of items to return')
ap.add_argument('-p', '--project-id', default=None,  action='store', required=True, help='comma separated list of project ids')
ap.add_argument('-v', '--verbose', default=None,  action='store_true', help='verbose')

ap.add_argument('fields', nargs='+', type=str, default=None, help='fields')

args = ap.parse_args()

fw = fwgearutils.getFW(args, Root=True)
if (not fw):
    print("{} : unable to initialize flywheel object".format(CmdName), file=sys.stderr)
    sys.exit(1)

if (args.verbose):
    print("fw.View(columns={}, container={}, sort=False, include_ids=False, include_labels=False)".format(
        args.fields,
        args.container_type), file=sys.stderr)
    
if (args.filter):
    if (args.verbose):
        print("Filter:", args.filter, file=sys.stderr)

    ViewId = fw.View(columns=args.fields, container=args.container_type, filter=args.filter, sort=False, include_ids=False, include_labels=False)
else:
    ViewId = fw.View(columns=args.fields, container=args.container_type, sort=False, include_ids=False, include_labels=False)

ProjectIds = args.project_id.split(',')
ProjectIdCount = len(ProjectIds)
N = 0
for ProjectId in ProjectIds:
    try:
        fw.get(ProjectId)
    except(flywheel.rest.ApiException) as e:
        try:
            ProjectContainer = fw.lookup(args.project_id)
            ProjectId = ProjectContainer.id
        except(flywheel.rest.ApiException) as e:
            print("{} : could not find container for '{}'".format(CmdName, args.project_id), file=sys.stderr)
            sys.exit(2)

    with fw.read_view_data(ViewId, ProjectId, format=args.format) as resp:
        N = N + 1
        if (args.verbose):
            print("{}: {}/{}".format(CmdName,N,ProjectIdCount), file=sys.stderr)

        while True:
            chunk = resp.readline().strip()
            if not chunk:
                break
            print(chunk)

        


            
