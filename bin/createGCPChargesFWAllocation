#!/usr/bin/python3
#Reaped Sessions

import argparse
import csv
import flywheel
import fwgearutils
import json
import os
import pyjq
import re
import sys
import yaml
from pprint import pprint

from collections import OrderedDict

CmdName = os.path.basename(sys.argv[0])

parser = argparse.ArgumentParser()
parser.add_argument('-j', '--flywheel-jobs-report', action='store', help='getJobs files in csv format')
parser.add_argument('-f', '--flywheel-usage-report', action='store', help='Flywheel Usage Report in csv format')
parser.add_argument('-m', '--ilabmap', action='store', help='iLab Service Request Map in yaml')
parser.add_argument('-v', '--verbose', action='store_true', help='verbose')
parser.add_argument('gcp_cost_table', nargs=1, help='GCP Cost Table Report in csv format')
args = parser.parse_args()

fw = fwgearutils.getFW(args)

FlywheelUsageComputeHours = 0.0
FlywheelUsageStorageBytes = 0.0
FlywheelGearCPUHours = 0.0

FlywheelProjectEntries = {}

def initFlywheelProjectEntry(compute_hours=None, storage_bytes=None):
    return({ 
        'compute': {
            'used': compute_hours,
            'percent': 0.0,
        },
        'storage': {
            'used': storage_bytes,
            'percent': 0.0,
        }
    })
        

def initGCPEntry(
        BillingAccountName=None,
        BillingAccountID=None,
        Group=None,
        ProjectName=None,
        ProjectID=None,
        ServiceDescription=None,
        ServiceID=None,
        SKUDescription=None,
        SKUID=None,
        CostType=None,
        UsageStartDate=None,
        UsageEndDate=None,
        UsageAmount=None,
        UsageUnit=None,
        Cost=None,
        GearVersion=None,
        GearCategory=None,
        JobOriginID=None,
        JobOriginType=None,
        JobState=None,
        JobCpus=None,
        GCPCpus=None,
        InitialAnalysis=None,
        ComputePercent=None,
        StoragePercent=None
):
    Entry = OrderedDict([
        ('Billing account name', BillingAccountName),
        ('Billing account ID', BillingAccountID),
        ( 'Group', group ),
        ( 'Project name', ProjectName ),
        ( 'Project ID', ProjectID),
        ( 'Service description', ServiceDescription),
        ( 'Service ID', ServiceID),
        ( 'SKU description', SKUDescription),
        ( 'SKU ID',  SKUID),
        ( 'Cost type', CostType),
        ( 'Usage start date', UsageStartDate),
        ( 'Usage end date', UsageEndDate),
        ( 'Usage amount', UsageAmount),
        ( 'Usage unit', UsageUnit),
        ( 'Cost ($)', Cost),
        ( 'Gear version', GearVersion),
        ( 'Gear category', GearCategory),
        ( 'Job origin ID', JobOriginID),
        ( 'Job origin type', JobOriginType), 
        ( 'Job state', JobState),
        ( 'Job cpus', JobCpus),
        ( 'GCP cpus', GCPCpus),
        ( 'Initial analysis', InitialAnalysis),
        ( 'Compute percent', ComputePercent),
        ( 'Storage percent', StoragePercent)        
    ])

    return(Entry)

def betterFloat(s):
    if (s == ''):
        return(0.0)

    return(float(re.sub(',','', s)))

def isCpu(row):
    return( re.search('Compute Engine', row['Service description'])
        and re.search('Instance Core', row['SKU description']))

def isStandardStorage(row):
    return( re.search('Cloud Storage', row['Service description'])
        and re.search('Standard Storage', row['SKU description']))

def isCostClassifier(CostType,Type):
    return(re.search(Type, CostType))

def isFlywheel(row):
    return(re.search('upenn-flywheel',row['Project ID']))

def getProjectGroup(iLabMap,alias):
    try:
        # way too many backslashes
        # may need to do lots of re.escapes()
        SafeAlias = re.sub('([\(\)])', r'\\\\\1', alias)

        res = pyjq.all('.["RequestIDs"][][]|select((.aliases[])|match("^{}$")) | .group'.format(SafeAlias), iLabMap)
    except:
        print("{}: No alias for '{}' '{}' in iLabMap".format(CmdName, alias, SafeAlias), file=sys.stderr)
        res = []

    if (len(res)):
        return(res[0])
    else:
        return(None)

def ms2Hours(ms):
    return(float(ms)/1000.0/3600.0)

# read flywheel usage report
with open(args.flywheel_usage_report, newline='') as csvfile:
    reader = csv.DictReader(csvfile, delimiter=',', quotechar='"')

    for row in reader:
        if (not (row['project_label'])):
            # Just skip rows with group summary info
            continue

        group = row['group']
        project = row['project_label']

        # From meier  6/11/2020
        # You want to divide the values in the total_storage_byte_day by days (per row). 
        # If you take the sum of these values and divide by 1e+12 you get 105.38TB for May 
        # which seems close to what we'd expect?

        # Convert to GibiBytes to be consistent with Google units
        storage_bytes = float(row['total_storage_byte_day'])/float(row['days'])/1024.0/1024.0/1024.0
        FlywheelUsageStorageBytes += storage_bytes

        compute_ms = float(row['total_compute_ms'])
        FlywheelUsageComputeHours += ms2Hours(compute_ms)

        FlywheelProjectKey = '{},{}'.format(group,project)
        if (FlywheelProjectKey in FlywheelProjectEntries.keys()):
            FlywheelProjectEntries[FlywheelProjectKey]['compute']['used'] += ms2Hours(compute_ms)
            FlywheelProjectEntries[FlywheelProjectKey]['storage']['used'] += storage_bytes
        else:
            FlywheelProjectEntries[FlywheelProjectKey] = initFlywheelProjectEntry(
                compute_hours=ms2Hours(compute_ms),
                storage_bytes=storage_bytes)


with open(args.ilabmap) as ilabmapfile:
    iLabMap = yaml.load(ilabmapfile, Loader=yaml.FullLoader)

FlywheelUsageComputePercents = 0.0
FlywheelUsageStoragePercents = 0.0

for e in FlywheelProjectEntries.values():
    if (FlywheelUsageComputeHours > 0.0 and e['compute']['used'] and e['compute']['used'] > 0.0):
        e['compute']['percent'] = e['compute']['used']/FlywheelUsageComputeHours
        FlywheelUsageComputePercents += e['compute']['used']/FlywheelUsageComputeHours
    else:
        e['compute']['percent'] = 0.0

    if (FlywheelUsageStorageBytes > 0 and e['storage']['used'] and e['storage']['used'] > 0.0):
        e['storage']['percent'] = e['storage']['used']/FlywheelUsageStorageBytes
        FlywheelUsageStoragePercents += e['storage']['used']/FlywheelUsageStorageBytes
    else:
        e['storage']['percent'] = 0.0

if (args.verbose):
    print("FlywheelUsageComputeHours = {}".format(FlywheelUsageComputeHours), file=sys.stderr)
    print("FlywheelUsageStorageBytes = {}".format(FlywheelUsageStorageBytes), file=sys.stderr)

print("FlywheelUsageComputePercents = {}".format(FlywheelUsageComputePercents), file=sys.stderr)
print("FlywheelUsageStoragePercents = {}".format(FlywheelUsageStoragePercents), file=sys.stderr)

print("FlywheelProjectEntries[#] = {}".format(len(FlywheelProjectEntries.values())), file=sys.stderr)


SummedFlywheelStorage = 0.0
SummedFlywheelGoogleStorage = 0.0

TotalGCPCoreHours = 0.0
TotalGCPCoreCost = 0.0
TotalGCPFlywheelStandardStorageGB = 0.0
TotalGCPFlywheelStandardStorageCost = 0.0
TotalFlywheelCharges = 0.0

CostTableEntries = []
FlywheelCostTableEntries = []

with open(args.gcp_cost_table[0], newline='') as csvfile:
    reader = csv.DictReader(csvfile, delimiter=',', quotechar='"')

    for row in reader:
        Entry = {}

        # Skip summary lines at the end of the Cost Table report which have empty Project ID
        # ,,,,Rounding error,,,,,,
        # ,,,,Total,,,,,0.00,
        if (isCpu(row)):
            TotalGCPCoreHours += betterFloat(row['Usage amount'])
            TotalGCPCoreCost += betterFloat(row['Cost ($)'])

        if (isFlywheel(row)):
            TotalFlywheelCharges += betterFloat(row['Cost ($)'])
            if (isStandardStorage(row)):
                TotalGCPFlywheelStandardStorageGB += betterFloat(row['Usage amount'])
                TotalGCPFlywheelStandardStorageCost += betterFloat(row['Cost ($)'])
            
        else:
                res = getProjectGroup(iLabMap,row['Project ID'])

                if (res == None):
                    print("Can not find group for {}".format(row['Project ID']), file=sys.stderr)
                    group = 'BogusGroup'
                else:
                    group = res

        if (row['Project ID']):
            Entry = initGCPEntry(
                BillingAccountName=row['Billing account name'],
                BillingAccountID=row['Billing account ID'],
                Group=group,
                ProjectName=row['Project ID'],  # promoting project id to project name as it is most unique
                ProjectID=row['Project ID'],
                ServiceDescription=row['Service description'],
                ServiceID=row['Service ID'],
                SKUDescription=row['SKU description'],
                SKUID=row['SKU ID'],
                CostType=row['Cost type'],
                UsageStartDate=row['Usage start date'],
                UsageEndDate=row['Usage end date'],
                UsageAmount=betterFloat(row['Usage amount']),
                UsageUnit=row['Usage unit'],
                Cost=betterFloat(row['Cost ($)'])
            )

            if (isFlywheel(row)):
                FlywheelCostTableEntries.append(Entry)
            else:
                CostTableEntries.append(Entry)


print("TotalFlywheelCharges = {}".format(TotalFlywheelCharges), file=sys.stderr)
print("TotalGCPCoreHours = ",TotalGCPCoreHours, file=sys.stderr)
print("TotalGCPCoreCost = ",TotalGCPCoreCost, file=sys.stderr)
print("TotalGCPFlywheelStandarStorageGB = ", TotalGCPFlywheelStandardStorageGB, file=sys.stderr)
print("TotalGCPFlywheelStandarStorageCost = ", TotalGCPFlywheelStandardStorageCost, file=sys.stderr)

try:
    AverageGCPCostPerCoreHour = TotalGCPCoreCost / TotalGCPCoreHours
except (ZeroDivisionError) as e:
    AverageGCPCostPerCoreHour = 0.0

print("AverageGCPCostPerCoreHour = ", AverageGCPCostPerCoreHour, file=sys.stderr)
CalculatedFlywheelCharges = 0.0
CalculatedFlywheelStorage = 0.0

for fe in FlywheelCostTableEntries:

    # Fix group
    for k, e in FlywheelProjectEntries.items():
        if (args.verbose):
            print("k = '{}', split = {}".format(k, k.split(',')), file=sys.stderr)

        (group, project) = k.split(',')

        if (isCpu(fe)):
            cost = fe['Cost ($)'] * e['compute']['percent']
            usage = fe['Usage amount'] * e['compute']['percent']

        if (isStandardStorage(fe)):
            cost = fe['Cost ($)'] * e['storage']['percent']
            usage = fe['Usage amount'] * e['storage']['percent']

    # expand charges
        Entry = initGCPEntry(
            BillingAccountName=fe['Billing account name'],
            BillingAccountID=fe['Billing account ID'],
            Group=group,
            ProjectName=project,
            ProjectID=fe['Project ID'],
            ServiceDescription=fe['Service description'],
            ServiceID=fe['Service ID'],
            SKUDescription=fe['SKU description'],
            SKUID=fe['SKU ID'],
            CostType=fe['Cost type'],
            UsageStartDate=fe['Usage start date'],
            UsageEndDate=fe['Usage end date'],
            UsageAmount=usage,
            UsageUnit=fe['Usage unit'],
            Cost=cost
        )

        CostTableEntries.append(Entry)
    
TotalFlywheelGearCost = 0.0
if (args.flywheel_jobs_report):
    with open(args.flywheel_jobs_report, newline='') as csvfile:
        reader = csv.DictReader(csvfile, delimiter=',', quotechar='"')

        for row in reader:
            group = row['group']
            project = row['project']

            try:
                ms=float(row['job_elapsed_time_ms'])
            except (ValueError) as e:
                ms = 0.0

            try:
                cpus = float(row['gcp_cpus'])
            except (ValueError) as e:
                cpus = 0.0

            compute_ms = ms * cpus
            FlywheelGearCpuHours = ms2Hours(compute_ms)
            FlywheelGearCost = AverageGCPCostPerCoreHour * FlywheelGearCpuHours

            TotalFlywheelGearCost += FlywheelGearCost 

            FlywheelProjectKey = '{},{}'.format(group,project)

            Entry = initGCPEntry(
                Group=group,
                ProjectName=project,
                ServiceDescription='Flywheel Gear',
                SKUDescription=row['gear_name'],
                UsageStartDate=row['job_date'],
                UsageAmount=FlywheelGearCpuHours,
                UsageUnit='hours',
                Cost=FlywheelGearCost,
                GearVersion=row['gear_version'],
                GearCategory=row['gear_category'],
                JobOriginID=row['job_origin_id'],
                JobOriginType=row['job_origin_type'],
                JobState=row['job_state'],
                JobCpus=row['job_cpus'],
                GCPCpus=row['gcp_cpus'],
                InitialAnalysis=row['initial_analysis']
            )

            CostTableEntries.append(Entry)

print("TotalFlywheelGearCost = ", TotalFlywheelGearCost, file=sys.stderr)
writer = csv.DictWriter(sys.stdout, CostTableEntries[0].keys())
writer.writeheader()
for row in CostTableEntries:
    writer.writerow(row)

