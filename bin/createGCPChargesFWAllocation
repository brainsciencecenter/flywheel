#!/usr/bin/python3
#Reaped Sessions

import argparse
import csv
import flywheel
import fwgearutils
import json
import os
import pyjq
import re
import sys
import yaml
from pprint import pprint

from collections import OrderedDict

CmdName = os.path.basename(sys.argv[0])

parser = argparse.ArgumentParser()
parser.add_argument('-c', '--flywheel-cpu-usage-report', action='store', help='Flywheel CPU Usage Report in csv format')
parser.add_argument('-f', '--flywheel-usage-report', action='store', help='Flywheel Usage Report in csv format')
parser.add_argument('-m', '--ilabmap', action='store', help='iLab Service Request Map in yaml')
parser.add_argument('-v', '--verbose', action='store_true', help='verbose')
parser.add_argument('gcp_cost_table', nargs=1, help='GCP Cost Table Report in csv format')
args = parser.parse_args()

fw = fwgearutils.getFW(args)

FlywheelComputeHours = 0.0
FlywheelStorageBytes = 0.0
FlywheelProjectEntries = {}

def initFlywheelProjectEntry(compute_hours=None, storage_bytes=None):
    return({ 
        'compute': {
            'used': compute_hours,
            'percent': 0.0,
        },
        'storage': {
            'used': storage_bytes,
            'percent': 0.0,
        }
    })
        

def initGCPEntry(
        BillingAccountName=None,
        BillingAccountID=None,
        Group=None,
        ProjectName=None,
        ProjectID=None,
        ServiceDescription=None,
        ServiceID=None,
        SKUDescription=None,
        SKUID=None,
        CostType=None,
        UsageStartDate=None,
        UsageEndDate=None,
        UsageAmount=None,
        UsageUnit=None,
        Cost=None,
        ComputePercent=None,
        StoragePercent=None,
):
    Entry = OrderedDict([
        ('Billing account name', BillingAccountName),
        ('Billing account ID', BillingAccountID),
        ( 'Group', group ),
        ( 'Project name', ProjectName ),
        ( 'Project ID', ProjectID),
        ( 'Service description', ServiceDescription),
        ( 'Service ID', ServiceID),
        ( 'SKU description', SKUDescription),
        ( 'SKU ID',  SKUID),
        ( 'Cost type', CostType),
        ( 'Usage start date', UsageStartDate),
        ( 'Usage end date', UsageEndDate),
        ( 'Usage amount', UsageAmount),
        ( 'Usage unit', UsageUnit),
        ( 'Cost ($)', Cost),
        ( 'Compute Percent', ComputePercent),
        ( 'Storage Percent', StoragePercent),
    ])

    return(Entry)

def isCostClassifier(CostType,Type):
    return(re.search(Type, CostType))
    
def getProjectGroup(iLabMap,alias):
    try:
        # way too many backslashes
        # may need to do lots of re.escapes()
        SafeAlias = re.sub('([\(\)])', r'\\\\\1', alias)

        res = pyjq.all('.["RequestIDs"][][]|select((.aliases[])|match("^{}$")) | .group'.format(SafeAlias), iLabMap)
    except:
        print("{}: No alias for '{}' '{}' in iLabMap".format(CmdName, alias, SafeAlias), file=sys.stderr)
        res = []

    if (len(res)):
        return(res[0])
    else:
        return(None)

FlywheelComputeHours = 0.0

with open(args.flywheel_usage_report, newline='') as csvfile:
    reader = csv.DictReader(csvfile, delimiter=',', quotechar='"')

    for row in reader:
        if (not (row['project_label'])):
            # Just skip rows with group summary info
            continue

        group = row['group']
        project = row['project_label']

        # From meier  6/11/2020
        # You want to divide the values in the total_storage_byte_day by days (per row). 
        # If you take the sum of these values and divide by 1e+12 you get 105.38TB for May 
        # which seems close to what we'd expect?

        # Convert to GibiBytes to be consistent with Google units
        storage_bytes = float(row['total_storage_byte_day'])/float(row['days'])/1024.0/1024.0/1024.0
        FlywheelStorageBytes += storage_bytes

        compute_ms = float(row['total_compute_ms'])
        FlywheelComputeHours += (compute_ms / 1000.0 / 3600.0)

        FlywheelProjectKey = '{},{}'.format(group,project)
        if (FlywheelProjectKey in FlywheelProjectEntries.keys()):
            FlywheelProjectEntries[FlywheelProjectKey]['compute']['used'] += (compute_ms/1000.0/3600.0)
            FlywheelProjectEntries[FlywheelProjectKey]['storage']['used'] += storage_bytes
        else:
            FlywheelProjectEntries[FlywheelProjectKey] = initFlywheelProjectEntry(
                compute_hours=(compute_ms/1000.0/3600.0),
                storage_bytes=storage_bytes)

if (args.flywheel_cpu_usage_report):
    FlywheelComputeHours = 0.0

    for k,v in FlywheelProjectEntries.items():
        v['compute']['used'] = 0.0

    with open(args.flywheel_cpu_usage_report, newline='') as csvfile:
        reader = csv.DictReader(csvfile, delimiter=',', quotechar='"')

        for row in reader:
            if (not (row['project'])):
                # Just skip rows with group summary info
                continue

            group = row['group']
            project = row['project']

            try:
                ms=float(row['job_elapsed_time_ms'])
            except (ValueError) as e:
                ms = 0.0

            try:
                cpus = float(row['gcp_cpus'])
            except (ValueError) as e:
                cpus = 0.0

            compute_ms = ms * cpus
            FlywheelComputeHours += (compute_ms / 1000.0 / 3600.0)

            FlywheelProjectKey = '{},{}'.format(group,project)
            if (FlywheelProjectKey in FlywheelProjectEntries.keys()):
                FlywheelProjectEntries[FlywheelProjectKey]['compute']['used'] += (compute_ms/1000.0/3600.0)
            else:
                print("Missing Group/Project {},{}".format(group,project), file=sys.stderr)
                FlywheelProjectEntries[FlywheelProjectKey] = initFlywheelProjectEntry(
                    compute_hours=(compute_ms/100.0/3600.0)
                )

with open(args.ilabmap) as ilabmapfile:
    iLabMap = yaml.load(ilabmapfile, Loader=yaml.FullLoader)

FlywheelComputePercents = 0.0
FlywheelStoragePercents = 0.0

for e in FlywheelProjectEntries.values():
    if (FlywheelComputeHours > 0 and e['compute']['used'] and e['compute']['used'] > 0):
        e['compute']['percent'] = e['compute']['used']/FlywheelComputeHours
        FlywheelComputePercents += e['compute']['used']/FlywheelComputeHours
    else:
        e['compute']['percent'] = 0.0

    if (FlywheelStorageBytes > 0 and e['storage']['used'] and e['storage']['used'] > 0):
        e['storage']['percent'] = e['storage']['used']/FlywheelStorageBytes
        FlywheelStoragePercents += e['storage']['used']/FlywheelStorageBytes
    else:
        e['storage']['percent'] = 0.0

if (args.verbose):
    print("FlywheelComputeHours = {}".format(FlywheelComputeHours), file=sys.stderr)
    print("FlywheelStorageBytes = {}".format(FlywheelStorageBytes), file=sys.stderr)

print("FlywheelComputePercents = {}".format(FlywheelComputePercents), file=sys.stderr)
print("FlywheelStoragePercents = {}".format(FlywheelStoragePercents), file=sys.stderr)

Entries = []

FlywheelCharges = 0.0
SummedFlywheelStorage = 0.0
SummedFlywheelGoogleStorage = 0.0

with open(args.gcp_cost_table[0], newline='') as csvfile:
    reader = csv.DictReader(csvfile, delimiter=',', quotechar='"')

    for row in reader:
        Entry = {}

        # Skip summary lines at the end of the Cost Table report:
        # ,,,,Rounding error,,,,,,
        # ,,,,Total,,,,,0.00,
        if (row['Project name'] == ""):
            continue

        if (row['Project name'] == 'upenn-flywheel'):
            if (float(row['Cost ($)']) > 0.0):
                FlywheelCharges += float(row['Cost ($)'])

            if (    (re.search('upenn-flywheel', row['Project ID']))
                and (re.search('Cloud Storage', row['Service description']))
                and (re.search('Standard Storage', row['SKU description']))
            ):
                SummedFlywheelGoogleStorage += float(re.sub(',','', row['Usage amount']))

            for k, e in FlywheelProjectEntries.items():
                if (args.verbose):
                    print("k = '{}', split = {}".format(k, k.split(',')), file=sys.stderr)

                (group, project) = k.split(',')

                if (args.verbose):
                    print("'{}', '{}', '{}'".format(row['Service description'], row['SKU description'],row['Usage amount']), file=sys.stderr)

                try:
                    UsageAmount = float(re.sub(',', '',row['Usage amount']))
                except (ValueError):
                    UsageAmount = 0

                try:
                    Cost = float(re.sub(',', '',row['Cost ($)']))
                except (ValueError):
                    Cost = 0
                    
                if (isCostClassifier(row['Service description'],'Compute Engine')):
                    cost = Cost * e['compute']['percent']
                    if (isCostClassifier(row['SKU description'],'.*Instance Core.*')):
                        usage = e['compute']['used']
                    else:
                        usage = UsageAmount * e['compute']['percent']

                elif (isCostClassifier(row['Service description'],'Cloud Storage')):
                    cost = Cost * e['storage']['percent']
                    if (isCostClassifier(row['SKU description'],'Standard Storage')):
                        usage = e['storage']['used']
                        if (usage):
                            SummedFlywheelStorage += usage
                    else:
                        usage = UsageAmount * e['storage']['percent']

                else:
                    cost = Cost * e['compute']['percent']
                    usage = UsageAmount * e['compute']['percent']

                Entry = initGCPEntry(
                    BillingAccountName=row['Billing account name'],
                    BillingAccountID=row['Billing account ID'],
                    Group=group,
                    ProjectName=project,
                    ProjectID=row['Project ID'],
                    ServiceDescription=row['Service description'],
                    ServiceID=row['Service ID'],
                    SKUDescription=row['SKU description'],
                    SKUID=row['SKU ID'],
                    CostType=row['Cost type'],
                    UsageStartDate=row['Usage start date'],
                    UsageEndDate=row['Usage end date'],
                    UsageAmount=usage,
                    UsageUnit=row['Usage unit'],
                    Cost=cost,
                    ComputePercent=e['compute']['percent'],
                    StoragePercent=e['storage']['percent'],
                )

                Entries.append(Entry)
        else:
            res = getProjectGroup(iLabMap,row['Project ID'])

            if (res == None):
                print("Can not find group for {}".format(row['Project ID']), file=sys.stderr)
                group = 'BogusGroup'
            else:
                group = res

            Entry = initGCPEntry(
                BillingAccountName=row['Billing account name'],
                BillingAccountID=row['Billing account ID'],
                Group=group,
                ProjectName=row['Project ID'],  # promoting project id to project name as it is most unique
                ProjectID=row['Project ID'],
                ServiceDescription=row['Service description'],
                ServiceID=row['Service ID'],
                SKUDescription=row['SKU description'],
                SKUID=row['SKU ID'],
                CostType=row['Cost type'],
                UsageStartDate=row['Usage start date'],
                UsageEndDate=row['Usage end date'],
                UsageAmount=row['Usage amount'],
                UsageUnit=row['Usage unit'],
                Cost=row['Cost ($)'],
            )

            Entries.append(Entry)

if (args.verbose):
    print("Entries is {} long".format(len(Entries)), file=sys.stderr)
    print("Entries[0] = {}".format(type(Entries[0])), file=sys.stderr)

print("FlywheelCharges = {}".format(FlywheelCharges), file=sys.stderr)

writer = csv.DictWriter(sys.stdout, Entries[0].keys())
writer.writeheader()

CalculatedFlywheelCharges = 0.0
CalculatedFlywheelStorage = 0.0
for row in Entries:
    if (re.search('upenn-flywheel', row['Project ID']) and (row['Cost ($)'] > 0.0)):
        CalculatedFlywheelCharges += row['Cost ($)']

    if (    (re.search('upenn-flywheel', row['Project ID']))
        and (re.search('Cloud Storage', row['Service description']))
        and (re.search('Standard Storage', row['SKU description']))
        and (row['Usage amount'])
    ):
        CalculatedFlywheelStorage += row['Usage amount']

    writer.writerow(row)

# Flywheel costs should be 33595.61 for May 2020
print("FlywheelComputeHours = {}".format(FlywheelComputeHours), file=sys.stderr)
print("CalculatedFlywheelCharges = $ {}".format(CalculatedFlywheelCharges), file=sys.stderr)
print("CalculatedFlywheelStorage = {} B".format(CalculatedFlywheelStorage), file=sys.stderr)
print("SummedFlywheelGoogleStorage = {} TB".format(SummedFlywheelGoogleStorage/1024.0), file=sys.stderr)
print("SummedFlywheelStorage = {} TB".format(SummedFlywheelStorage/1024.0), file=sys.stderr)
