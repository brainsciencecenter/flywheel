#!/usr/bin/python3

import argparse
import csv
import json
import os
import pyjq
import re
import sys
import yaml

from openpyxl.utils.cell import get_column_letter, column_index_from_string

from collections import OrderedDict

#
# ToDo
#   toggle formulas on or off
#   Try/except for reading in ilabmap and other files
#

# *** Flywheel cost allocation report only deals with storage and compute
#     But there are also promotions, discounts, invalid and misc costs to allocate

# Input: a google cost table report csv
# Output:
#   Summary of charges for the center and by group
#   CSV suitable to upload to iLab to allocate GCP charges
#
# Default mapfile is:
#
# Run through the cost table csv file to create the charge entries and generate a total for the center
# On the way through, look up the service id and service request id for each charge
# Go back through and print the center total, then each group and sub charges
# createiLabGCPChargesCSV [-b][-f flywheelCSVFile][-i][-m mapfile] GCPCostTableCSVFile
#
# Do we want to ignore promotions, and discounts?
#
# Total bytes billed = total_storage_byte_day / days
#
GibiByte = 1024 * 1024 * 1024
TerraByte = 1024 * 1024 * 1024 * 1042

CmdName = os.path.basename(sys.argv[0])

SessionConversionCharge = 25
iLabServiceRequestIDMapFile = "/home/holder/Work/CfN/flywheel/bin/iLabServiceRequestIDMap"
NonRegisteredGroupName = 'NonRegistered'

ap = argparse.ArgumentParser()

ap.add_argument('-b', '--billable', action='store_true', help='Show only group/projects with billable service request ids')
ap.add_argument('-f', '--flywheel', action='store', help='Flywheel cost allocation csv file')
ap.add_argument('-i', '--iLab', action='store_true', help='produce ilab charges (may want -b)')
ap.add_argument('-m', '--mapfile', action='store', help='iLab service id and service request id yaml file') 
ap.add_argument('-g', '--group-summary-only', action='store_true', help='summarize by group.  leave out individual charges')
ap.add_argument('gcpcharges', nargs='+', type=str, default=None, help='GCP Cost Table Report CSV')

args = ap.parse_args()

ChargeTypes = [
    'compute',
    'discounts',
    'invalid',
    'misc',
    'promotions',
    'storage',
    'unknown',
]

def initTotalCosts():
    TotalCosts = {}

    for c in ChargeTypes:
        TotalCosts[c] = 0.0

    return(TotalCosts)

def initCharge(center=None,
               group=None,
               project=None, 
               service_id=None,
               service_request_id=None,
               service_description=None,
               gcp_service_id=None,
               sku_description=None,
               sku_id=None,
               cost_type=None,
               usage_amount=None,
               usage_unit=None,
               cost=0.0,
               compute=None,
               discounts=None,
               invalid=None,
               misc=None,
               promotions=None,
               storage=None,
               unknown=None,
               group_compute=None,
               group_discounts=None,
               group_invalid=None,
               group_misc=None,
               group_promotions=None,
               group_storage=None,
               group_unknown=None,
               group_total=None,
):

    return(
        OrderedDict([
            ( 'center', center), 
            ( 'group', group ),
            ( 'project', project ),
            ( 'service_id', service_id),
            ( 'service_request_id', service_request_id),
            ( 'service_description', service_description),
            ( 'gcp_service_id', gcp_service_id),
            ( 'sku_description', sku_description),
            ( 'sku_id', sku_id),
            ( 'cost_type', cost_type),
            ( 'usage_amount', usage_amount),
            ( 'usage_unit', usage_unit),
            ( 'cost', cost),
            ( 'promotions', promotions),
            ( 'discounts', discounts),
            ( 'invalid', invalid),
            ( 'unknown', unknown),
            ( 'misc', misc),
            ( 'storage', storage),
            ( 'compute', compute),
            ( 'group_promotions', group_promotions),
            ( 'group_discounts', group_discounts),
            ( 'group_invalid', group_invalid),
            ( 'group_unknown', group_unknown),
            ( 'group_misc', group_misc),
            ( 'group_storage', group_storage),
            ( 'group_compute', group_compute),
            ( 'group_total', group_total),
        ]))

Groups = {}

def initGroup(name=None):
     Group = {
         'name': name,
         'TotalCosts': initTotalCosts(),
         'Charges': [],
     }

     return(Group)

def getProjectGroup(iLabServiceRequestIDMap,alias):
    try:
        # way too many backslashes
        # may need to do lots of re.escapes()
        SafeAlias = re.sub('([\(\)])', r'\\\\\1', alias)

        res = pyjq.all('.["RequestIDs"][][]|select((.aliases[])|match("^{}$")) | .group'.format(SafeAlias), iLabServiceRequestIDMap)
    except:
        print("{}: No alias for '{}' '{}' in iLabServiceRequestMap".format(CmdName, alias, SafeAlias), file=sys.stderr)
        res = []

    if (len(res)):
        return(res[0])
    else:
        return(None)

def getServiceId(iLabServiceRequestIDMap,alias):
    res = pyjq.all('.["ServiceIDs"][]|select(.aliases[]|match("^{}$")) | .service_id'.format(alias), iLabServiceRequestIDMap)
    if (len(res)):
          return(res[0])
    else:
          return(None)

def sumCostType(Group, costtype, cat=None):
    total = 0.0
    for c in Group['Charges']:
        if (c[costtype]):
            if (cat):
                if (cat == costClassifier(c, primary=True)):
                    total += c[costtype]
            else:
                total += c[costtype]

    return(total)

def getServiceRequestId(iLabServiceRequestIDMap,alias):
     res = pyjq.all('.["RequestIDs"][][]|select((.aliases[])|match("^{}$")) | .service_request_id'.format(alias), iLabServiceRequestIDMap)
     if (len(res)):
          return(res[0])
     else:
          return(None)

def costClassifier(charge, primary=False):
    if (charge == "all"):
        return(ChargeTypes)


    if (not primary):
        if (re.search("Egress", charge["sku_description"])):
            return("invalid")


        if (re.search("Promotions", charge["sku_description"])):
            return("promotions")

        if (re.search("Discounts", charge["sku_description"], flags=re.IGNORECASE)):
            return("discounts")

        if (re.search("IP Charge", charge["sku_description"], flags=re.IGNORECASE)):
            return("misc")


    
    if (re.search("Compute", charge["service_description"]) and re.search("Instance Core", charge["sku_description"])):
          return("compute")

    # Only flywheel related charges are in the Flywheel Charges list
    if (re.search("Compute", charge["service_description"]) and (float(charge["cost"]))):
         return("compute")

    if (re.search("Compute", charge["service_description"]) and re.search("Sustained", charge["sku_description"])):
         return("compute")

    if (re.search("Compute", charge["service_description"]) and re.search("Promotions", charge["sku_description"])):
         return("compute")


    if (re.search("Storage", charge["service_description"])):
         return("storage")

    return('unknown')

iLabServiceRequestIDMap = None

with open(iLabServiceRequestIDMapFile) as file:
    d = yaml.load(file, Loader=yaml.FullLoader)
    iLabServiceRequestIDMap = json.loads(json.dumps(d))

# 1. Billing account name,
# 2. Billing account ID,
# 3. Project name,
# 4. Project ID,
# 5. Service description,
# 6. Service ID, - GCP service id -- not ilab service id
# 7. SKU description,
# 8. SKU ID,
# 9. Cost type,
# 10. Usage start date,
# 11. Usage end date,
# 12. Usage amount,
# 13. Usage unit,
# 14. Cost ($),

# Usage Unit
# None
# count
# hour - compute time
# gibibytes - storage bytes
# gibibytes hours - storage bytes * hours
# gibibytes month - storage bytes * month

GCPChargeTotals = {}
Charges = []

def formatGroupChargesCSV(Groups):
    global Charges
    global args

    FirstLine = 3

    ChargeTemplate = initCharge('ChargeTemplate')

    PromotionsColumn = get_column_letter(list(ChargeTemplate.keys()).index('promotions') + 1)
    DiscountsColumn = get_column_letter(list(ChargeTemplate.keys()).index('discounts') + 1)
    InvalidColumn = get_column_letter(list(ChargeTemplate.keys()).index('invalid') + 1)
    UnknownColumn = get_column_letter(list(ChargeTemplate.keys()).index('unknown') + 1)
    MiscColumn = get_column_letter(list(ChargeTemplate.keys()).index('misc') + 1)
    StorageColumn = get_column_letter(list(ChargeTemplate.keys()).index('storage') + 1)
    ComputeColumn = get_column_letter(list(ChargeTemplate.keys()).index('compute') + 1)

    group_column_indexes = {}
    column_indexes = {}

    for gk in list(filter(lambda k: re.search('^group_', k), ChargeTemplate.keys())):
        if (gk == 'group_total'):
            continue

        k = re.sub('group_', '', gk)
        group_column_indexes[gk] = get_column_letter(list(ChargeTemplate.keys()).index(gk) + 1)
        column_indexes[k] = get_column_letter(list(ChargeTemplate.keys()).index(k) + 1)

    print(json.dumps(group_column_indexes), file=sys.stderr)

    GroupPromotionsColumn = get_column_letter(list(ChargeTemplate.keys()).index('group_promotions') + 1)
    GroupDiscountsColumn = get_column_letter(list(ChargeTemplate.keys()).index('group_discounts') + 1)
    GroupInvalidColumn = get_column_letter(list(ChargeTemplate.keys()).index('group_invalid') + 1)
    GroupUnknownColumn = get_column_letter(list(ChargeTemplate.keys()).index('group_unknown') + 1)
    GroupMiscColumn = get_column_letter(list(ChargeTemplate.keys()).index('group_misc') + 1)
    GroupStorageColumn = get_column_letter(list(ChargeTemplate.keys()).index('group_storage') + 1)
    GroupComputeColumn = get_column_letter(list(ChargeTemplate.keys()).index('group_compute') + 1)

    if (args.group_summary_only):
        LastLine = FirstLine + len(Groups.keys())
    else:
        TotalNumberOfCharges = 0
        for n, g in Groups.items():
            TotalNumberOfCharges += len(g['Charges'])
            
        LastLine = FirstLine + TotalNumberOfCharges + len(Groups.keys()) - 1

    lineno = 2

    charge = initCharge(
        center='Brain Science Center',
        group_promotions="=sum({}{}:{}{})".format(GroupPromotionsColumn, FirstLine, GroupPromotionsColumn, LastLine),
        group_discounts="=sum({}{}:{}{})".format(GroupDiscountsColumn, FirstLine, GroupDiscountsColumn, LastLine),
        group_invalid="=sum({}{}:{}{})".format(GroupInvalidColumn, FirstLine, GroupInvalidColumn, LastLine),
        group_unknown="=sum({}{}:{}{})".format(GroupUnknownColumn, FirstLine, GroupUnknownColumn, LastLine),
        group_misc="=sum({}{}:{}{})".format(GroupMiscColumn, FirstLine, GroupMiscColumn, LastLine),
        group_storage="=sum({}{}:{}{})".format(GroupStorageColumn, FirstLine, GroupStorageColumn, LastLine),
        group_compute="=sum({}{}:{}{})".format(GroupComputeColumn, FirstLine, GroupComputeColumn, LastLine),
        group_total="=sum({}{}:{}{})".format(GroupPromotionsColumn, lineno, GroupComputeColumn, lineno),
    )

    writer = csv.DictWriter(sys.stdout, charge.keys())
    writer.writeheader()
    writer.writerow(charge)

    for groupname, group in Groups.items():
        lineno += 1
        FirstLine = lineno + 1
        if (args.group_summary_only):
            charge = initCharge(
                group=groupname,
                group_promotions=sumCostType(group, 'promotions'),
                group_discounts=sumCostType(group, 'discounts'),
                group_invalid=sumCostType(group, 'invalid'),
                group_unknown=sumCostType(group, 'unknown'),
                group_misc=sumCostType(group, 'misc'),
                group_storage=sumCostType(group, 'storage'),
                group_compute=sumCostType(group, 'compute'),
                group_total="=sum({}{}:{}{})".format(PromotionsColumn, lineno, ComputeColumn, lineno),
            )

        else:
            LastLine = lineno + len(group['Charges'])

            charge = initCharge(
                group=groupname,
                group_promotions="=sum({}{}:{}{})".format(PromotionsColumn, FirstLine, PromotionsColumn, LastLine),
                group_discounts="=sum({}{}:{}{})".format(DiscountsColumn, FirstLine, DiscountsColumn, LastLine),
                group_invalid="=sum({}{}:{}{})".format(InvalidColumn, FirstLine, InvalidColumn, LastLine),
                group_unknown="=sum({}{}:{}{})".format(UnknownColumn, FirstLine, UnknownColumn, LastLine),
                group_misc="=sum({}{}:{}{})".format(MiscColumn, FirstLine, MiscColumn, LastLine),
                group_storage="=sum({}{}:{}{})".format(StorageColumn, FirstLine, StorageColumn, LastLine),
                group_compute="=sum({}{}:{}{})".format(ComputeColumn, FirstLine, ComputeColumn, LastLine),
                group_total="=sum({}{}:{}{})".format(GroupPromotionsColumn, lineno, GroupComputeColumn, lineno),
            )

        writer.writerow(charge)

        if (not args.group_summary_only):
            for c in group['Charges']:
                writer.writerow(c)
                lineno += 1
        
    
with open(args.gcpcharges[0], newline='') as csvfile:
    reader = csv.DictReader(csvfile, delimiter=',', quotechar='"')

    for row in reader:
        if (not row['Project ID']):
            continue

        chargegroup = getProjectGroup(iLabServiceRequestIDMap, row['Project ID'])
        if (not chargegroup):
            if (row['Project ID'] == 'upenn-flywheel'):
                chargegroup = 'flywheel'

            else:
                print("{}: No group for Project ID {}. {}".format(CmdName, row['Project ID'], row), file=sys.stderr)
                chargegroup = NonRegisteredGroupName

        Charge = initCharge(
            group=chargegroup,
            project=row['Project ID'], 
            service_description=row['Service description'],
            gcp_service_id=row['Service ID'],
            sku_description=row['SKU description'],
            sku_id=row['SKU ID'],
            cost_type=row['Cost type'],
            usage_amount=row['Usage amount'],
            usage_unit=row['Usage unit'],
            cost=(float(row['Cost ($)'])+0.0)
        )
        if (Charge['sku_id'] in GCPChargeTotals.keys()):
            GCPChargeTotals[Charge['sku_id']]['cost'] += Charge['cost']
        else:
            GCPChargeTotals[Charge['sku_id']] = Charge.copy()
        
        Charges.append(Charge)

SortedCharges = sorted(Charges, key=lambda c: c['group'])


#print("Number of recorded charges = ",len(SortedCharges))

for c in SortedCharges:
    if (not (c['group'] in Groups.keys())):
        Groups[c['group']] = initGroup(c['group'])
        
    group = Groups[c['group']]

    costtype = costClassifier(c)

    c[costtype] = c['cost']
    c['service_id'] = getServiceId(iLabServiceRequestIDMap,'{}'.format(costtype))

    c['service_request_id'] = getServiceRequestId(iLabServiceRequestIDMap,
                                                  '{}'.format(c['project']))


    group['Charges'].append(c)

if (args.flywheel):

    FlywheelComputeCost = sumCostType(Groups['flywheel'], 'compute')
    FlywheelComputeDiscounts = sumCostType(Groups['flywheel'], 'discounts', cat='compute')
    FlywheelStorageDiscounts = sumCostType(Groups['flywheel'], 'discounts', cat='storage')
    FlywheelComputePromotions = sumCostType(Groups['flywheel'], 'promotions', cat='compute')
    FlywheelStoragePromotions = sumCostType(Groups['flywheel'], 'promotions', cat='storage')
    FlywheelStorageCost = sumCostType(Groups['flywheel'], 'storage')

    FlywheelInvalidCost = sumCostType(Groups['flywheel'], 'invalid')
    FlywheelMiscCost = sumCostType(Groups['flywheel'], 'misc')
    FlywheelUnknownCost = sumCostType(Groups['flywheel'], 'unknown')

    print("{} {} {} {} {} {} {}".format(
        FlywheelComputePromotions + FlywheelStoragePromotions,
        FlywheelComputeDiscounts + FlywheelStorageDiscounts,
        FlywheelInvalidCost,
        FlywheelUnknownCost,
        FlywheelMiscCost,
        FlywheelStorageCost,
        FlywheelComputeCost), file=sys.stderr)

    group = Groups['bsc-admin']
    c = initCharge(
        group=group['name'],
        project='pennbrain-center',
        sku_description='flywheel invalid cost allocation',
        cost_type=FlywheelInvalidCost,
        invalid=FlywheelInvalidCost,
    )

    group['Charges'].append(c)

    c = initCharge(
        group=group['name'],
        project='pennbrain-center',
        sku_description='flywheel misc cost allocation',
        cost_type='misc',
        misc=FlywheelMiscCost,
    )

    group['Charges'].append(c)

    c = initCharge(
        group=group['name'],
        project='pennbrain-center',
        sku_description='flywheel unknown cost allocation',
        cost_type='unknown',
        misc=FlywheelUnknownCost,
    )

    group['Charges'].append(c)
    
    
    del(Groups['flywheel'])

    FlywheelComputeMS = 0.0
    FlywheelStorageBytes = 0.0

    FlywheelUsageEntries = []

    with open(args.flywheel, newline='') as csvfile:
        reader = csv.DictReader(csvfile, delimiter=',', quotechar='"')

        for row in reader:
            if (not (row['project_label'])):
                continue

            group = row['group']
            project = row['project_label']

            storage_bytes = float(row['total_storage_byte_day'])/float(row['days'])
            FlywheelStorageBytes += storage_bytes

            compute_ms = float(row['total_compute_ms'])
            FlywheelComputeMS += compute_ms

            ProjectGroup = getProjectGroup(iLabServiceRequestIDMap,"{}/{}".format(group,project))
            if (ProjectGroup):
                Project = project
            else:
                ProjectGroup = NonRegisteredGroupName
                Project = '{}/{}'.format(group,project)

            FlywheelUsageEntries.append({ 
                'group': ProjectGroup,
                'project': Project,
                'compute_ms': compute_ms,
                'storage_bytes': storage_bytes,
            })

        for entry in FlywheelUsageEntries:
            ProRatedComputeCost = FlywheelComputeCost * (entry['compute_ms'] / FlywheelComputeMS)
            ProRatedComputePromotions = FlywheelComputePromotions * (entry['compute_ms'] / FlywheelComputeMS)
            ProRatedComputeDiscounts = FlywheelComputeDiscounts * (entry['compute_ms'] / FlywheelComputeMS)

            ProRatedStorageCost = FlywheelStorageCost * (entry['storage_bytes'] / FlywheelStorageBytes)
            ProRatedStorageDiscounts = FlywheelStorageDiscounts * (entry['storage_bytes'] / FlywheelStorageBytes)
            ProRatedStoragePromotions = FlywheelStoragePromotions * (entry['storage_bytes'] / FlywheelStorageBytes)

            if (not (entry['group'] in Groups.keys())):
                Groups[entry['group']] = initGroup(entry['group'])

            group = Groups[entry['group']]

            # flywheel groups compute_ms, compute storage, compute ram, etc into the compute costs
            # so there isn't a consitent unit/usage to add to the charge
            if (abs(ProRatedComputeCost) >= 0.01):
                c = initCharge(
                    group=entry['group'],
                    project=entry['project'],
                    sku_description='flywheel compute cost allocation',
                    cost_type='compute',
                    compute=ProRatedComputeCost,
                )
                group['Charges'].append(c)

            if (abs(ProRatedComputeDiscounts) >= 0.01):
                c = initCharge(
                    group=entry['group'],
                    project=entry['project'],
                    sku_description='flywheel compute discounts allocation',
                    cost_type='discounts',
                    discounts=ProRatedComputeDiscounts,
                )
                group['Charges'].append(c)

            if (abs(ProRatedComputePromotions) >= 0.01):
                c = initCharge(
                    group=entry['group'],
                    project=entry['project'],
                    sku_description='flywheel compute promotions allocation',
                    cost_type='promotions',
                    promotions=ProRatedComputePromotions,
                )
                group['Charges'].append(c)

            if (abs(ProRatedStorageCost) >= 0.01):
                c = initCharge(
                    group=entry['group'],
                    project=entry['project'],
                    sku_description='flywheel storage cost allocation',
                    cost_type='storage',
                    usage_amount=entry['storage_bytes'] / GibiByte,
                    usage_unit='gibibyte',
                    storage=ProRatedStorageCost,
                )
                group['Charges'].append(c)

            if (abs(ProRatedStorageDiscounts) >= 0.01):
                c = initCharge(
                    group=entry['group'],
                    project=entry['project'],
                    sku_description='flywheel storage discounts allocation',
                    cost_type='discounts',
                    discounts=ProRatedStorageDiscounts,
                )
                group['Charges'].append(c)

            if (abs(ProRatedStoragePromotions) >= 0.01):
                c = initCharge(
                    group=entry['group'],
                    project=entry['project'],
                    sku_description='flywheel storage promotions allocation',
                    cost_type='promotions',
                    promotions=ProRatedStoragePromotions,
                )
                group['Charges'].append(c)

            """
            print("{}, {}, {}, {}, {}, {}, {}".format(
                entry['group'],
                entry['project'],
                entry['storage_bytes'], 
                entry['compute_ms'], 
                ProRatedStorageCost,
                ProRatedComputeCost,
                Total,
                ))
            """
CenterGroup = initGroup("BSC")

if (args.iLab):
    formatGroupChargesiLab(Groups)

formatGroupChargesCSV(Groups)

#print(json.dumps(CenerGroup, indent=2))


