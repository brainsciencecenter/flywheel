#!/usr/bin/python3

import argparse
import csv
import json
import os
import pyjq
import re
import sys
import yaml
import xlswriter

from collections import OrderedDict

#
# Input: a google cost table report csv
# Output:
#   Summary of charges for the center and by group
#   CSV suitable to upload to iLab to allocate GCP charges
#
# Default mapfile is:
#
# Run through the cost table csv file to create the charge entries and generate a total for the center
# On the way through, look up the service id and service request id for each charge
# Go back through and print the center total, then each group and sub charges
# createiLabGCPChargesCSV [-b][-f flywheelCSVFile][-i][-m mapfile] GCPCostTableCSVFile
#
# Do we want to ignore promotions, and discounts?
#
# Total bytes billed = total_storage_byte_day / days
#
TerraByte = 1024 * 1024 * 1024 * 1024

CmdName = os.path.basename(sys.argv[0])

SessionConversionCharge = 25
iLabServiceRequestIDMapFile = "/home/holder/Work/CfN/flywheel/bin/iLabServiceRequestIDMap"

ap = argparse.ArgumentParser()

ap.add_argument('-b', '--billable', action='store_true', help='Show only group/projects with billable service request ids')
ap.add_argument('-f', '--flywheel', action='store', help='Flywheel cost allocation csv file')
ap.add_argument('-i', '--iLab', action='store_true', help='produce ilab charges (may want -b)')
ap.add_argument('-m', '--mapfile', action='store', help='iLab service id and service request id yaml file') 
ap.add_argument('gcpcharges', nargs='+', type=str, default=None, help='GCP Cost Table Report CSV')

args = ap.parse_args()

ChargeTypes = [
    'compute',
    'discounts',
    'invalid',
    'misc',
    'promotions',
    'storage',
    'unknown',
]

def initTotalCosts():
    TotalCosts = {}

    for c in ChargeTypes:
        TotalCosts[c] = 0.0

    return(TotalCosts)

def initCharge(center=None,
               group=None,
               project=None, 
               service_id=None,
               service_request_id=None,
               service_description=None,
               gcp_service_id=None,
               sku_description=None,
               sku_id=None,
               cost_type=None,
               usage_amount=None,
               usage_unit=None,
               cost=0.0,
               compute=None,
               discounts=None,
               invalid=None,
               misc=None,
               promotions=None,
               storage=None,
               unknown=None,
               group_compute=None,
               group_discounts=None,
               group_invalid=None,
               group_misc=None,
               group_promotions=None,
               group_storage=None,
               group_unknown=None,
               group_total=None,
):

    return(
        OrderedDict([
            ( 'center', center), 
            ( 'group', group ),
            ( 'project', project ),
            ( 'service_id', service_id),
            ( 'service_request_id', service_request_id),
            ( 'service_description', service_description),
            ( 'gcp_service_id', gcp_service_id),
            ( 'sku_description', sku_description),
            ( 'sku_id', sku_id),
            ( 'cost_type', cost_type),
            ( 'usage_amount', usage_amount),
            ( 'usage_unit', usage_unit),
            ( 'cost', cost),
            ( 'promotions', promotions),
            ( 'discounts', discounts),
            ( 'invalid', invalid),
            ( 'unknown', unknown),
            ( 'misc', misc),
            ( 'storage', storage),
            ( 'compute', compute),
            ( 'group_promotions', group_promotions),
            ( 'group_discounts', group_discounts),
            ( 'group_invalid', group_invalid),
            ( 'group_unknown', group_unknown),
            ( 'group_misc', group_misc),
            ( 'group_storage', group_storage),
            ( 'group_compute', group_compute),
            ( 'group_total', group_total),
        ]))

Groups = {}

def initGroup(name=None):
     Group = {
         'name': name,
         'TotalCosts': initTotalCosts(),
         'Charges': [],
     }

     return(Group)

def getProjectGroup(iLabServiceRequestIDMap,alias):
     res = pyjq.all('.["RequestIDs"][][]|select((.aliases[])|match("^{}$")) | .group'.format(alias), iLabServiceRequestIDMap)
     if (len(res)):
          return(res[0])
     else:
          return(None)

def getServiceId(iLabServiceRequestIDMap,alias):
     res = pyjq.all('.["ServiceIDs"][]|select(.aliases[]|match("^{}$")) | .service_id'.format(alias), iLabServiceRequestIDMap)
     if (len(res)):
          return(res[0])
     else:
          return(None)

def getServiceRequestId(iLabServiceRequestIDMap,alias):
     res = pyjq.all('.["RequestIDs"][][]|select((.aliases[])|match("^{}$")) | .service_request_id'.format(alias), iLabServiceRequestIDMap)
     if (len(res)):
          return(res[0])
     else:
          return(None)

def costClassifier(charge):
    if (charge == "all"):
        return(ChargeTypes)


    if (re.search("Egress", charge["sku_description"])):
        return("invalid")


    if (re.search("Promotions", charge["sku_description"])):
        return("promotions")

    if (re.search("Discounts", charge["sku_description"])):
        return("discounts")

    if (re.search("IP Charge", charge["sku_description"], flags=re.IGNORECASE)):
        return("misc")


    
    if (re.search("Compute", charge["service_description"]) and re.search("Instance Core", charge["sku_description"])):
          return("compute")

    # Only flywheel related charges are in the Flywheel Charges list
    if (re.search("Compute", charge["service_description"]) and (float(charge["cost"]) > 0.0)):
         return("compute")

    if (re.search("Compute", charge["service_description"]) and re.search("Sustained", charge["sku_description"])):
         return("compute")

    if (re.search("Compute", charge["service_description"]) and re.search("Promotions", charge["sku_description"])):
         return("compute")


    if (re.search("Storage", charge["service_description"])):
         return("storage")

    return('unknown')

iLabServiceRequestIDMap = None

with open(iLabServiceRequestIDMapFile) as file:
    d = yaml.load(file, Loader=yaml.FullLoader)
    iLabServiceRequestIDMap = json.loads(json.dumps(d))


# 1. Billing account name,
# 2. Billing account ID,
# 3. Project name,
# 4. Project ID,
# 5. Service description,
# 6. Service ID, - GCP service id -- not ilab service id
# 7. SKU description,
# 8. SKU ID,
# 9. Cost type,
# 10. Usage start date,
# 11. Usage end date,
# 12. Usage amount,
# 13. Usage unit,
# 14. Cost ($),

# Usage Unit
# None
# count
# hour - compute time
# gibibytes - storage bytes
# gibibytes hours - storage bytes * hours
# gibibytes month - storage bytes * month

GCPChargeTotals = {}
Charges = []

def formatGroupChargesCSV(Groups):
    charge = initCharge()
    writer = csv.DictWriter(sys.stdout, charge.keys())
    writer.writeheader()

    lineno = 1
    CostColumn = 'M'
    PromotionsColumn = xlsxwriter.utility.xl_col_to_name(20)
    DiscountsColumn = chr(ord(PromotionsColumn) + 1)
    InvalidColumn = chr(ord(DiscountsColumn) + 1)
    UnknownColumn = chr(ord(InvalidColumn) + 1)
    MiscColumn = chr(ord(UnknownColumn) + 1)
    ComputeColumn = chr(ord(MiscColumn) + 1)
    StorageColumn = chr(ord(ComputeColumn) + 1)

    for groupname, group in Groups.items():
        lineno += 1
        FirstLine = lineno + 1
        LastLine = lineno + len(group['Charges'])
        charge = initCharge(group=groupname,
                            group_promotions="=sum({}{}:{}{})".format(PromotionsColumn, FirstLine, PromotionsColumn, LastLine),
                            group_discounts="=sum({}{}:{}{})".format(DiscountsColumn, FirstLine, DiscountsColumn, LastLine),
                            group_invalid="=sum({}{}:{}{})".format(InvalidColumn, FirstLine, InvalidColumn, LastLine),
                            group_unknown="=sum({}{}:{}{})".format(UnknownColumn, FirstLine, UnknownColumn, LastLine),
                            group_misc="=sum({}{}:{}{})".format(MiscColumn, FirstLine, MiscColumn, LastLine),
                            group_storage="=sum({}{}:{}{})".format(StorageColumn, FirstLine, StorageColumn, LastLine),
                            group_compute="=sum({}{}:{}{})".format(ComputeColumn, FirstLine, ComputeColumn, LastLine),

                            group_total="=sum({}{}:{}{})".format(CostColumn, FirstLine, CostColumn, LastLine),
        )
        writer.writerow(charge)

        for c in group['Charges']:
            writer.writerow(c)
            lineno += 1
        
    
with open(args.gcpcharges[0], newline='') as csvfile:
    reader = csv.DictReader(csvfile, delimiter=',', quotechar='"')

    for row in reader:
        if (not row['Project ID']):
            continue

        chargegroup = getProjectGroup(iLabServiceRequestIDMap, row['Project ID'])
        if (not chargegroup):
            if (row['Project ID'] == 'upenn-flywheel'):
                if (not args.flywheel):
                    chargegroup = 'flywheel'

            else:
                print("{}: No group for Project ID {}. {}".format(CmdName, row['Project ID'], row), file=sys.stderr)
                chargegroup = 'unknown'

        Charge = initCharge(
            group=chargegroup,
            project=row['Project ID'], 
            service_description=row['Service description'],
            gcp_service_id=row['Service ID'],
            sku_description=row['SKU description'],
            sku_id=row['SKU ID'],
            cost_type=row['Cost type'],
            usage_amount=row['Usage amount'],
            usage_unit=row['Usage unit'],
            cost=(float(row['Cost ($)'])+0.0)
        )
        if (Charge['sku_id'] in GCPChargeTotals.keys()):
            GCPChargeTotals[Charge['sku_id']]['cost'] += Charge['cost']
        else:
            GCPChargeTotals[Charge['sku_id']] = Charge.copy()
        
        Charge['service_id'] = getServiceId(iLabServiceRequestIDMap,
                                                 '{}/{}'.format(Charge['group'], Charge['project']))

        Charge['service_request_id'] = getServiceRequestId(iLabServiceRequestIDMap,
                                                 '{}/{}'.format(Charge['group'], Charge['project']))

        Charges.append(Charge)

SortedCharges = sorted(Charges, key=lambda c: c['group'])

#print("Number of recorded charges = ",len(SortedCharges))

for c in SortedCharges:
    if (not (c['group'] in Groups.keys())):
        Groups[c['group']] = initGroup(c['group'])
        
    group = Groups[c['group']]

    costtype = costClassifier(c)
    c[costtype] = c['cost']

    group['Charges'].append(c)

CenterGroup = initGroup("BSC")

formatGroupChargesCSV(Groups)

#print(json.dumps(CenerGroup, indent=2))


