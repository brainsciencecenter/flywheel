#!/usr/bin/python3

import argparse
import csv
import json
import os
import pyjq
import re
import sys
import yaml

from openpyxl.utils.cell import get_column_letter, column_index_from_string

from collections import OrderedDict

GibiByte = 1024 * 1024 * 1024
TerraByte = 1024 * 1024 * 1024 * 1042

CmdName = os.path.basename(sys.argv[0])

ap = argparse.ArgumentParser()

ap.add_argument('-b', '--bsc-charges', action='store_true', help='include bsc charges') 
ap.add_argument('-f', '--flywheel-only', action='store_true', help='only process flywheel charges') 
ap.add_argument('-g', '--gcp-charges', action='store_true', help='include gcp charges') 
ap.add_argument('-i', '--ilab-billable', action='store_true', help='produce file for importing to ilab') 
ap.add_argument('-p', '--project-funding', action='store', help='project funding csv file') 
ap.add_argument('-s', '--service-id', action='store', help='ilab service number -- not service request number') 
ap.add_argument('-z', '--zero', action='store_true', help='set the price to 0.00') 
ap.add_argument('group/projects', nargs='*', type=str, default=None, help='groups/projects to process')

args = ap.parse_args()

def betterFloat(f):
    if (f == None):
        return(0.0)
    else:
        return(float(f))
    
def isServiceRequestNumber(row):
    if (args.ilab_billable):
        return('iLabServiceRequestNumber' in row.keys() and row['iLabServiceRequestNumber'] and re.search('^\d+$',row['iLabServiceRequestNumber']))
    else:
        return('iLabServiceRequestNumber' in row.keys() and row['iLabServiceRequestNumber'])

def formatIlabRow(
        service_id="",
        note="",
        service_quantity=None,
        price=0.0,
        purchased_on="",
        service_request_id="",
        owner_email="",
        pi_email_or_group_id="",
        payment_number=""
):
    IlabRow = {
        "service_id": service_id,
        "note": note, 
        "service_quantity": service_quantity, 
        "price": price, 
        "purchased_on": purchased_on, 
        "service_request_id": service_request_id, 
        "owner_email": owner_email, 
        "pi_email_or_group_id": pi_email_or_group_id,
        "payment_number": payment_number
    }
        
    return(IlabRow)

iLabColumnNames = [
    "service_id", 
    "note", 
    "service_quantity", 
    "price", 
    "purchased_on", 
    "service_request_id", 
    "owner_email", 
    "pi_email_or_group_id",
    "payment_number"
]

iLabCharges = []

with open(args.project_funding) as file:
    reader = csv.DictReader(file, delimiter=',', quotechar='"')
    for row in reader:
        if (isServiceRequestNumber(row)):

            Price = 0.0
            if (args.bsc_charges):
                Price += betterFloat(row['BSCStorageCharge']) + betterFloat(row['InitialAnalysis_Cost']) + betterFloat(row['ProjectCharge'])

            if (args.gcp_charges):
                Price += betterFloat(row['VMDynamic_Cost']) + betterFloat(row['Storage_Cost'])

            ServiceQuantity = "{:.2f}".format(
                (  betterFloat(row['VMDynamic_Cost'])
                 + betterFloat(row['Storage_Cost'])
                 + betterFloat(row['BSCStorageCharge'])
                 + betterFloat(row['InitialAnalysis_Cost'])
                 + betterFloat(row['ProjectCharge'])
                ))

            iLabCharge = formatIlabRow(
                service_id=args.service_id,
                note="{}: Analysis Gears {} Storage Charge {} Storage Usage(Gb) {} BSC Storage {} BSC Inital Analysis {} BSC Project {}".format(
                    row['Group/Project'],
                    round(betterFloat(row['VMDynamic_Cost']),2),
                    round(betterFloat(row['Storage_Cost']),2),
                    round(betterFloat(row['StorageStandard_Usage']),3),
                    round(betterFloat(row['BSCStorageCharge']),2),
                    round(betterFloat(row['InitialAnalysis_Cost']),2),
                    round(betterFloat(row['ProjectCharge']),2)
                ),
                service_quantity=ServiceQuantity,
                price=round(Price,2),
                service_request_id=row['iLabServiceRequestNumber']
            )

            iLabCharges.append(iLabCharge)
            
writer = csv.DictWriter(sys.stdout, iLabColumnNames, quoting=csv.QUOTE_NONNUMERIC)
writer.writeheader()

writer.writerows(iLabCharges)
