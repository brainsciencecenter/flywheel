#!/usr/bin/python3

import argparse
import csv
import json
import os
import pyjq
import re
import sys
import yaml

from openpyxl.utils.cell import get_column_letter, column_index_from_string

from collections import OrderedDict

GibiByte = 1024 * 1024 * 1024
TerraByte = 1024 * 1024 * 1024 * 1042

CmdName = os.path.basename(sys.argv[0])

ap = argparse.ArgumentParser()

ap.add_argument('-a', '--all-group-projects', action='store_true', help='include all group projects, even those without a real service request id')
ap.add_argument('-b', '--bsc-overhead-percent', action='store', help='BSC Overhead Percent') 
ap.add_argument('-f', '--flywheel-only', action='store_true', help='only process flywheel charges') 
ap.add_argument('-m', '--ilabmapfile', action='store', help='iLab service id and service request id yaml file') 
ap.add_argument('-z', '--zero', action='store_true', help='set the price to 0.00') 
ap.add_argument('gcpcharges', nargs='+', type=str, default=None, help='GCP Charges with Flywheel Allocation CSV')

args = ap.parse_args()

def initTotalCosts():
    TotalCosts = {}

    for c in ChargeTypes:
        TotalCosts[c] = 0.0

    return(TotalCosts)

def initGroupProjectCharge(
        BscOverhead=0.0,
        Compute=0.0,
        DynamicVmRatio=1.0,
        InitialAnalysisCount=0,
        Misc=0.0,
        ServiceRequestId=None,
        Storage=0.0,
        Vm=0.0,
    ):
    return({
        'BscOverhead': BscOverhead,
        'Compute': Compute,
        'DynamicVmRatio': DynamicVmRatio,
        'InitialAnalysisCount': InitialAnalysisCount,
        'Misc': Misc,
        'ServiceRequestId': ServiceRequestId,
        'Storage': Storage,
        'Vm': Vm,
    })


def getProjectGroup(iLabServiceRequestIdMap,alias):
    try:
        # way too many backslashes
        # may need to do lots of re.escapes()
        SafeAlias = re.sub('([\(\)])', r'\\\\\1', alias)

        res = pyjq.all('.["RequestIds"][][]|select((.aliases[])|match("^{}$")) | .group'.format(SafeAlias), iLabServiceRequestIdMap)
    except:
        print("{}: No alias for '{}' '{}' in iLabServiceRequestMap".format(CmdName, alias, SafeAlias), file=sys.stderr)
        res = []

    if (len(res)):
        return(res[0])
    else:
        return(None)

def getServiceId(iLabMap,alias):
    res = pyjq.all('.["ServiceIds"][]|select(.aliases[]|match("^{}$";"i")) | .service_id'.format(alias), iLabMap)
    if (len(res)):
          return(res[0])
    else:
          return(None)

def getServiceRequestId(iLabMap,alias):
    res = pyjq.all('.["RequestIds"][][]|select((.aliases[])|match("^{}$";"i")) | .service_request_id'.format(alias), iLabMap)
    if (len(res)):
          return(res[0])
    else:
          return(None)

def getChargeType(row):
    ChargeType = None

    if (re.search('Compute Engine', row['Service description'])):
        ChargeType = 'Compute'
    elif (re.search('Cloud Storage', row['Service description'])):
        ChargeType = 'Storage'
    else:
        ChargeType = 'Misc'

    return("{}".format(ChargeType))
            
def isFlywheel(row):
    return(row['Project ID'] == 'upenn-flywheel')

def isVmCharge(row):
    return(   (row['Service description'] == 'Compute Engine')
              and (
                  re.search('.*Instance Core.*', row['SKU description'])
                  or re.search('.*Small Instance.*', row['SKU description'])
                  or re.search('.*PD Capacity.*', row['SKU description'])
                  or re.search('.*Instance Ram.*', row['SKU description'])
              )
    )
    

def isInitialAnalysis(row):
    return(row['Service description'] == 'Flywheel Gear' and row['Initial analysis'] == 'True')

def makeGcpChargeKey(row):
    Group = row['Group']
    Project = row['Project name']

    return('{}/{}'.format(Group,Project))

if (not (args.ilabmapfile)):
    print("{}: -m iLabMapFilePath argument required".format(CmdName), file=sys.stderr)
    sys.exit(1)
    
iLabMap = None

with open(args.ilabmapfile) as file:
    iLabMap = yaml.load(file, Loader=yaml.FullLoader)

GcpCharges = {}
MissingServiceRequestIds = {}

with open(args.gcpcharges[0], newline='') as csvfile:
    reader = csv.DictReader(csvfile, delimiter=',', quotechar='"')

    for row in reader:

        Cost=float(row['Cost ($)'])

        if (Cost < 0.0):
            continue

        if (args.flywheel_only and not (isFlywheel(row))):
            continue
        
        GcpChargeKey = makeGcpChargeKey(row)

        if (GcpChargeKey in GcpCharges):
            GroupProjectCharges = GcpCharges[GcpChargeKey]
        else:
            ServiceRequestId = getServiceRequestId(iLabMap,GcpChargeKey)
            if (ServiceRequestId == None):
                if (args.all_group_projects):
                    ServiceRequestId = GcpChargeKey
                else:
                    if (GcpChargeKey in MissingServiceRequestIds.keys()):
                        True
                    else:
                        MissingServiceRequestIds[GcpChargeKey] = 1
                        print("{}: No Service Request Id for '{}'".format(CmdName, GcpChargeKey), file=sys.stderr)
                    continue
                
            if (re.search('^\d+$',str(ServiceRequestId))):
                if (not args.all_group_projects):
                    print("{}: Service Request Id for '{}' not numeric".format(CmdName, GcpChargeKey, ServiceRequestId), file=sys.stderr)
                    continue

            GroupProjectCharges = initGroupProjectCharge(
                ServiceRequestId=ServiceRequestId
            )
            GcpCharges[GcpChargeKey] = GroupProjectCharges


        if (isVmCharge(row)):
            GroupProjectCharges['Vm'] += float(Cost)
            if (row['Dynamic VM Ratio']):
                GroupProjectCharges['DynamicVmRatio'] = float(row['Dynamic VM Ratio'])
            else:
                GroupProjectCharges['DynamicVmRatio'] = 1.0
        elif(isInitialAnalysis(row)):
            GroupProjectCharges['InitialAnalysisCount'] += 1
        else:
            ChargeType = getChargeType(row)
            GroupProjectCharges[ChargeType] += Cost

if (len(GcpCharges) > 0):
    print("service_id,note,service_quantity,price,purchased_on,service_request_id,owner_email,pi_email_or_group_id,payment_number")
        
ServiceId = getServiceId(iLabMap, "BSC Flywheel Charge")

for GroupProjectKey in sorted(GcpCharges.keys()): 
    GroupProjectCharge = GcpCharges[GroupProjectKey]

    ServiceRequestId = GroupProjectCharge['ServiceRequestId']
    StorageCharge = GroupProjectCharge['Storage']
    ComputeCharge = GroupProjectCharge['Compute']
    DynamicVmCharge = GroupProjectCharge['Vm'] * GroupProjectCharge['DynamicVmRatio']
    InitialAnalysisCount = GroupProjectCharge['InitialAnalysisCount']

    if (args.bsc_overhead_percent):
        BscOverheadPercent = float(args.bsc_overhead_percent)
    else:
        BscOverheadPercent = 0.36

    BscOverheadCharge = (StorageCharge * BscOverheadPercent) + (InitialAnalysisCount * 25.0)

    # *** ';' work like ',' for iLab.  and you can't quote them
    Note = "%s: Dynamic Vm: %.2f  Storage: %.2f  BSC Overhead: %.2f  Initial Analysis: %.2f" % (
        GroupProjectKey,
        DynamicVmCharge,
        StorageCharge,
        BscOverheadCharge,
        InitialAnalysisCount,
    )

    Quantity = round(DynamicVmCharge + StorageCharge + BscOverheadCharge,2)
    
    Price = ""
    if (args.zero):
        Price = 0

    if (args.all_group_projects or Quantity > 0.0):
        print("{},{},{},{},,{},,,".format(
            ServiceId,
            Note,
            "%.2f" % float(Quantity),
            Price,
            ServiceRequestId))


