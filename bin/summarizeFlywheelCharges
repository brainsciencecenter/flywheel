#!/usr/bin/python3

import argparse
import csv
import json
import pyjq
import sys
import yaml

from collections import OrderedDict

# Total bytes billed = total_storage_byte_day / days
#
TerraByte = 1024 * 1024 * 1024 * 1024

SessionConversionCharge = 25
iLabServiceRequestIDMapFile = "/home/holder/Work/CfN/flywheel/bin/iLabServiceRequestIDMap"

ap = argparse.ArgumentParser()

ap.add_argument('-l', '--iLab', action='store_true', help='produce ilab charges')
ap.add_argument('fwcharges', nargs='+', type=str, default=None, help='Flywheel Charge Report file')

args = ap.parse_args()

def initThing(center=None,
              group=None, 
              project=None, 
              days=0.0, 
              total_compute_ms=0.0, 
              total_storage_byte_day=0.0,
              total_storage_bytes=0.0,
              group_total_compute_ms=0.0,
              group_total_storage_bytes=0.0,
              center_total_compute_ms=0.0,
              center_total_storage_bytes=0.0,
):
 return(OrderedDict([
      ( 'center', center), 
      ( 'group', group ),
      ( 'project', project ),
      ( 'days', days ),
      ( 'total_compute_ms', total_compute_ms ), 
      ( 'total_storage_byte_day', total_storage_byte_day ), 
      ( 'total_storage_bytes', total_storage_bytes ), 
      ( 'group_total_compute_ms', group_total_compute_ms ),
      ( 'group_total_storage_bytes', group_total_storage_bytes ),
      ( 'center_total_compute_ms', center_total_compute_ms ),
      ( 'center_total_storage_bytes', center_total_storage_bytes ),
      ]))

Groups = []

def initGroup(name=None):
     Group = {
          'name': name,
          'Projects': []
     }
     return(Group)

def getRequestId(iLabServiceRequestIDMap,alias):
     res = pyjq.all('.["ServiceIDs"][]|select(.aliases[]|match("^{}$")) | .service_id'.format(alias), iLabServiceRequestIDMap)
     if (len(res)):
          return(res[0])
     else:
          return(None)

def getServiceRequestId(iLabServiceRequestIDMap,alias):
     res = pyjq.all('.["RequestIDs"][][]|select((.aliases[])|match("^{}$")) | .service_request_id'.format(alias), iLabServiceRequestIDMap)
     if (len(res)):
          return(res[0])
     else:
          return(None)

Group = initGroup()

with open(args.fwcharges[0], newline='') as csvfile:
     reader = csv.DictReader(csvfile, delimiter=',', quotechar='|')

     for row in reader:
          if (row['project_label'] == ""):
               if (Group['name']):
                    Groups.append(Group)

               Group = initGroup(name=row['group'])

          else:
               Project = initThing(group=Group['name'],
                                   project=row['project_label'], 
                                   days=int(row['days']),
                                   total_compute_ms=int(row['total_compute_ms']),
                                   total_storage_byte_day=float(row['total_storage_byte_day']),
                                   total_storage_bytes=float(row['total_storage_byte_day']) / float(row['days'])
                                   )
               Group['Projects'].append(Project)

if (Group['name']):
     Groups.append(Group)

Center = initThing(center='BSC')

for Group in Groups:
     for Project in Group['Projects']:
          Center['center_total_compute_ms'] += Project['total_compute_ms']
          Center['center_total_storage_bytes'] += Project['total_storage_bytes']

Lines = []
Lines.append(Center)

for Group in Groups:
     g = initThing(group=Group['name'])
     for Project in Group['Projects']:
          g['group_total_compute_ms'] += Project['total_compute_ms']
          g['group_total_storage_bytes'] += Project['total_storage_bytes']

     Lines.append(g)

     for Project in Group['Projects']:
          Lines.append(Project)

CenterTotalComputeMs = Center['center_total_compute_ms']
CenterTotalStorageBytes = Center['center_total_storage_bytes']

print(CenterTotalComputeMs, CenterTotalStorageBytes)

if (args.iLab):
     with open(iLabServiceRequestIDMapFile) as file:
          d = yaml.load(file, Loader=yaml.FullLoader)

     iLabServiceRequestIDMap = json.loads(json.dumps(d))

     #print(json.dumps(iLabServiceRequestIDMap, indent=2))

     for p in Lines:
          if (not p['project']):
               continue

          for id in ['total_compute_ms', 'total_storage_bytes']:
               if (p[id]):
                    RequestId = getRequestId(iLabServiceRequestIDMap,alias="{}".format(id))
               else:
                    RequestId = None

               ServiceRequestId = getServiceRequestId(iLabServiceRequestIDMap,alias="{}/{}".format(p['group'],p['project']))
               if (RequestId and ServiceRequestId):
#                    print(json.dumps(p, indent=2))
                    print(RequestId, ServiceRequestId, p[id])

else:
     writer = csv.DictWriter(sys.stdout, Center.keys())

     writer.writeheader()
     for row in Lines:
          writer.writerow(row)


