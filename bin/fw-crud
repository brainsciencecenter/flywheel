#!/usr/bin/env python3
#!/opt/rh/rh-python36/root/usr/bin/python


'''
Create
  create [-l GroupLabel] GroupID

Retrieve
  get [-a][-l][GroupID[[ GroupID]...]]

  -a All groups -- login to flywheel as admin
  -l list only group labels
  -i list only GroupIDs
  -m list only members
  -r list only roles

Update
  update [-d][-l GroupLabel][-r admin|ro|rw] GroupID [UserName][[ UserName]...]
  role defaults to rw

  defaults to appending pennkeys to the group
  pennkey already in the group with different roles will raise a warning
  Use -f to force the new group role on a UserName
  -d is for deleting UserNames from the group.  Warning if the UserName isnn't in the group

Delete
  delete GroupID [[ GroupID]...]

#
# Syntax
#   fw-usercrud [-n][-r][-v] {create|get|update|delete}
#      create [-c][-G group1[[,group2]...]][-f FirstName][-l LastName][-r admin|read-only|read-write][-s] [UserName]
#   -c Create any missing groups
#   -r role admin, readonly, read/write defaults to readwrite
#   -s site admin

'''

import argparse
import csv
import flywheel
import logging
import os
import json
import sys
import re
import warnings

from pprint import pprint
from subprocess import PIPE, Popen 
from os.path import expanduser

#
# *** Should probably be able to add/delete/list/update projects
#
args = False
class FW():

    def __init__(self):
        self.CmdName = os.path.basename(sys.argv[0])
        self.UserJsonFile = expanduser("~") + "/.config/flywheel/user.json"
        self.ApiKeyFile = expanduser("~") + "/.config/flywheel/api.key"
        self.Domain = 'upenn.edu'

        logging.basicConfig(format='%(message)s')

        parser = argparse.ArgumentParser(description='Flyweel group CRUD.')
        parser.add_argument('-n', '--no-op', action='store_true', help='No-op')
        parser.add_argument('-v', '--verbose', action='store_true', help='Verbose')
        parser.add_argument('-r', '--root', action='store_true', help='Login to flywheel as root')
        
        self.cmd = os.path.basename(sys.argv[0])

        if (self.cmd == "fw-groupcrud"):
            self.groupCrud(parser)
        elif(self.cmd == "fw-usercrud"):
            self.userCrud(parser)
        elif(self.cmd == "fw-projcrud"):
            self.projectCrud(parser)
        else:
            print("huh?")
            sys.exit(1)

        self.Config = parser.parse_args()

        try:
            self.fw = flywheel.Client(request_timeout=120)
        except (OSError, Exception) as e:
            try:
                with open(self.ApiKeyFile) as x: ApiKey = x.read().rstrip()
                self.fw = flywheel.Client(ApiKey,root=self.Config.root,request_timeout=120)

                if (self.Config.root):
                    try:
                        groups = self.fw.groups()
                    except:
                        print("Your ApiKey '%s' does not have site admin privileges" % ApiKey)
                        sys.exit(1)

            except (OSError, Exception) as e2:
                print(e2)
                print(e)
                sys.exit(1)

        self.Roles = self.fw.get_all_roles()

        try:
            retval = self.Config.func(self.Config)
        except Exception as e:
            logging.warning(e)
            sys.exit(1)

        sys.exit(retval)

    def projectCrud(self):
        return(True)

    def groupCrud(self,parser):
        subparsers = parser.add_subparsers(help='sub-command help', dest='create,get,update,delete')
        subparsers.required = True

        create_parser = subparsers.add_parser('create', help='create [-l GroupLabel] GroupID')
        create_parser.add_argument('-l', '--GroupLabel', nargs=1, action='store', help='Human readable group label')
        create_parser.add_argument('GroupID', nargs=1, action='store', help='GroupID')
        create_parser.set_defaults(func=self.groupCreate)

        retrieve_parser = subparsers.add_parser('get', help='get [-f][-i][-l][-m][-p][-r] GroupID [[ GroupID]...]')
        retrieve_parser.add_argument('-f', '--fullnames', action='store_true', help='List Fullnames')
        retrieve_parser.add_argument('-i', '--ids', action='store_true', help='List only GroupIDs')
        retrieve_parser.add_argument('-l', '--labels', action='store_true', help='List only Group Labels')
        retrieve_parser.add_argument('-m', '--members', action='store_true', help='List only Group Members')
        retrieve_parser.add_argument('-p', '--projects', action='store_true', help='List only Group Projects')
        retrieve_parser.add_argument('-r', '--roles', action='store_true', help='List only Roles')
        retrieve_parser.add_argument('GroupIDs', nargs='*', help='GroupIDs')
        retrieve_parser.set_defaults(func=self.groupRetrieve)

        update_parser = subparsers.add_parser('update', help='update flywheel groups')
        update_parser.add_argument('-a', '--append', default=True, action='store_true', help='Append members to group.  Default')
        update_parser.add_argument('-c', '--create-users', action='store_true', help='Create user accounts if they are missing')
        update_parser.add_argument('-d', '--delete', action='store_true', help='Delete members from group.  Defaults to append')
        update_parser.add_argument('-F', '--force', action='store_true', help='Update user project permissions')
        update_parser.add_argument('-f', '--file', action='store_true', help='args are to read group members from.  Format should be Role:UserName:FirstName:LastName')
        update_parser.add_argument('-g', '--groupid', required=True, nargs=1, action='store', help='GroupID to motify.')
        update_parser.add_argument('-l', '--label', action='store', help='Update groufp label')
        update_parser.add_argument('-p', '--project', action='store', help='Project in group to change user permissions. Use project "all" to add user permissions to all projects in the group.  Default is only modify the group permissions') 
        update_parser.add_argument('-r', '--role', choices=['admin', 'read-only', 'read-write'], default=['read-write'], nargs=1, action='store', help='Set member role.  Defaults to rw')
        update_parser.add_argument('-s', '--set', action='store_true', help='Set members of group.')
        update_parser.add_argument('UserNames', nargs='+', action='store', help='UserNames')
        update_parser.set_defaults(func=self.groupUpdate)

        delete_parser = subparsers.add_parser('delete', help='Delete flywheel groups')
        delete_parser.add_argument('GroupID', nargs='+', action='store', help='GroupID')
        delete_parser.set_defaults(func=self.groupDelete)

    def groupCreate(self,args):
        groupid = args.GroupID[0]

        if (list(filter(lambda k: k.id == groupid, self.fw.groups()))):
            warnings.warning("Group '%s' already exists" % (groupid))
            return(False)

        if (args.GroupLabel):
            grouplabel = args.GroupLabel[0]
        else:
            grouplabel = groupid

        self.fw.add_group(flywheel.Group(groupid, grouplabel))
        if (args.verbose):
            print('create group %s(%s)' % (grouplabel,groupid) )

        return(True)

    def groupRetrieve(self,args):
        #
        # *** does not show any of the project level permissions
        #

        retval = 1
        
        if (not (args.ids or args.labels or args.members or args.projects or args.roles)):
            args.fullnames = args.ids = args.labels = args.members = args.projects = args.roles = True

        projects = sorted(self.fw.projects(), key=lambda k: k['label'].lower())

        if (args.GroupIDs):
            groups = []
            for gid in args.GroupIDs:
                try:
                    groups.append(self.fw.get_group(gid))
                except flywheel.ApiException as e:
                    logging.warning("%s : No such group '%s'" % (self.cmd, gid))

        else:
            groups = self.fw.groups()

        for group in sorted(groups, key=lambda k: k['_id']):
            retval = 0
            
            if (args.labels):
                print('%s' % (group.label), end='')

            if (args.ids):
                if (args.labels):
                    print("(%s)" % (group.id), end='' )
                else:
                    print('%s' % (group.id), end='')

            print("")

            if (args.projects):
                print("  Projects:")
                for project in (list(filter(lambda k: k.group == group.id, projects))):
                    print("\t",project.label) 

            if (args.members):
                print("  Members:")
                for member in sorted(group.permissions, key=lambda k: k['_id']):
                    if (args.ids):
                        print("\t%s:%s" % (member.access, member.id), end='')
                    if (args.fullnames):
                        user = self.getUser(member.id)
                        if (user):
                            print(":%s:%s" % (user.firstname, user.lastname), end='')
                        else:
                            logging.warning("%s : No such user '%s'" % (self.cmd, userid))
                    print("")

        return(retval)

    def getUser(self,userid):
        users = list(filter(lambda u: u.id == userid, self.fw.users()))
        if users:
            return(users[0])
        else:
            return(False)


    def updateProjectUserRole(self, project, user, role):
        args = self.Config

        permission = self.mkPermission(user, role)

        if (args.no_op):
            print("add %s to %s/%s with %s" % (user, project.group, project.label, role))
        else:
            existing_permission = None
            try:
                existing_permission = project.get_permission(user)
            except (Exception) as e:
                if (e.status == 404):
                    existing_permission = None
                
            if (existing_permission):
                if (existing_permission.role_ids == permission['role_ids'] or not (args.force)):
                    RoleName = list(map(lambda r: r.label, filter(lambda r: r.id == existing_permission.role_ids[0], self.fw.get_all_roles())))[0]
                    if (args.verbose):
                        print("{} : user '{}' already has permission '{}' in project '{}'".format(self.CmdName, user, RoleName, project.label), file=sys.stderr)
                else:
                    if (args.verbose):
                        print("{} : resetting user '{}' permission in project '{}' to '{}'".format(self.CmdName, user, project.label, role), file=sys.stderr)
                    project.delete_permission(user)
                    project.add_permission(permission)
            else:
                if (args.verbose):
                    print("add %s to %s/%s with %s" % (user, project.group, project.label, role))
                project.add_permission(permission)

            project = project.reload()
        
    #
    # user must be in pennkeyname@upenn.edu format
    #
    def appendUser2Group(self,group, user, role):
        args = self.Config

        Role2AccessPermissionMap = {
            'ro': 'ro',
            'rw': 'rw',
            'read-only': 'ro',
            'read-write': 'rw',
            'admin': 'admin',
        }

        group_users = list(filter(lambda p: p['_id'] == user, self.accessPerms2RolePerms(group.permissions)))
        if (group_users):
            # Check if we're just updating the role.
            if (group_users[0]['role_ids'] != role and args.force):
                
                permission = flywheel.PermissionAccessPermission(user, Role2AccessPermissionMap[role])
                if (not args.no_op):
                    # why can't update_permissions use the id in the permissions?
                    group.update_permission(permission.id, permission)
                    group = group.reload()
                if (args.verbose or args.no_op):
                    print("update %s to %s with %s" % (user,group.id,role))
            else:
                if (args.verbose):
                    raise Exception("User '%s already in group '%s' as '%s'" % (user,group.id,role))

        else:
            permission = flywheel.PermissionAccessPermission(user, Role2AccessPermissionMap[role])
            if (not args.no_op): 
                group.add_permission(permission) 
                group = group.reload()
            if (args.verbose or args.no_op): 
                print("add %s to %s with %s" % (user,group.id,role)) 


            
    def groupUpdate(self,args):
        #
        # *** what happens when setting group and user has different permissions ? Overwrite, notify user?
        # *** How to set group labels, tags
        # *** should allow either pennkeyname or pennkeyname@upenn.edu -- expects pennkeyname@upenn.edu
        # *** make sure users are already created
        # *** have to check if the group exists

        groups = args.groupid[0]
        for groupid in re.split(',',groups):

            try:
                group = self.fw.get_group(groupid)
            except (Exception) as e:
                print("{}: Group '{}' not found".format(self.CmdName, groupid), file=sys.stderr)
                continue

            if (args.append and not (args.delete or args.set)):
                if (args.file):
                    csvlines = []
                    for file in args.UserNames:
                        csvlines += self.readCSVFile(file)

                    for l in csvlines:
                        user = self.enforceDomain(l['pennkeyname'])

                        if (self.getUser(user)):
                            self.appendUser2Group(group,user,l['role'])
                        elif(args.create_user):
                            self.createUser(l['role'],user,l['firstname'],l['lastname'])
                            self.appendUser2Group(group,user,l['role'])

                else:
                    if (args.UserNames[0] == 'all'):
                        Users = self.fw.get_all_users()
                        UserNames = list(map(lambda u: u.id, filter(lambda u: u.disabled != True, Users)))
                    else:
                        UserNames = args.UserNames
                        
                    for UserName in UserNames:
                        user = self.enforceDomain(UserName)
                        try:
                            self.appendUser2Group(group,user,args.role[0])
                        except (Exception) as e:
                            logging.warning(e)

                        ProjectList = []
                        print("Adding {}  to project {}".format(user,args.project))
                        if (args.project):
                            if (args.project == 'all'):
                                ProjectList = self.fw.projects.find("group={}".format(group.id), exhaustive=True, limit=100000)
                            else:
                                for p in re.split(',', args.project):
                                    Project = self.fw.lookup("{}/{}".format(group.id,p))
                                    ProjectList.append(Project)

                            for p in ProjectList:
                                if (args.project == 'all' or p.label == args.project):
                                    self.updateProjectUserRole(p, user, args.role[0])

            elif (args.delete):
                for user in args.UserNames:
                    group_users = list(filter(lambda p: p.id == user, group.permissions))
                    if (not group_users):
                        warn = "User '%s is not in group '%s'" % (user,group.id)
                        logging.warning(warn)
                    else:
                        group.delete_permission(user)
                        if (args.verbose):
                            print("delete %s from %s" % (user,group.id))

            elif (args.set):
                for user in args.UserNames:
                    group_users = list(filter(lambda p: p.id == user, group.permissions))
                    if (not group_users):
                        permission = self.mkPermission(user, args.role)
                        group.add_permission(permission)
                        group = group.reload()
                        if (args.verbose):
                            print("add %s to %s with %s" % (user,groupid,args.role))

                group_users = list(filter(lambda p: not (p.id in args.UserNames), group.permissions))
                for user in group_users:
                    group.delete_permission(user.id)
                    if (args.verbose):
                            print("delete %s from %s" % (user,group.id))


    def groupDelete(self,args):
        #
        # *** What do do if a group has projects?
        # ***   Should issue a warning and have a force delete flag
        #
        existing_groups = self.fw.groups()
        for groupid in args.GroupID:
            if (not (list(filter(lambda g: g.id == groupid, existing_groups)))):
                warnings.warning("No such group '%s' to delete" % groupid)
                continue

            self.fw.delete_group(groupid)
            if (args.verbose):
                print("delete group '%s'" % (groupid))

    def userCrud(self,parser):
        subparsers = parser.add_subparsers(help='sub-command help', dest='create,get,update,delete')
        subparsers.required = True

        create_parser = subparsers.add_parser('create', help='create [-c]{-f FirstName}{-l LastName}[-g {GroupID[,GroupID]}][-s] UserName')
        create_parser.add_argument('-c', '--create-groups', action='store_true', help='Create missing groups')
        create_parser.add_argument('-f', '--first-name', required=True, nargs=1, action='store', help='First Name')
        create_parser.add_argument('-g', '--group-id', nargs=1, action='store', help='Groups to add user to')
        create_parser.add_argument('-l', '--last-name', required=True, nargs=1, action='store', help='Last Name')
        create_parser.add_argument('-r', '--role', choices=['admin', 'ro', 'rw'], default=['rw'], nargs=1, action='store', help='Role to add user as -- defaults to rw')
        create_parser.add_argument('-s', '--site-admin', nargs=1, action='store', help='Make user a site administrator')
        create_parser.add_argument('UserName', nargs=1, action='store', help='UserName')
        create_parser.set_defaults(func=self.userCreate)

        retrieve_parser = subparsers.add_parser('get', help='get [-i][-l][-m][-r] [UserName[ UserName]...]')
        retrieve_parser.add_argument('-d', '--disabled', action='store_true', help='include disabled account.')
        retrieve_parser.add_argument('UserNames', nargs='*', help='UserNames')
        retrieve_parser.set_defaults(func=self.userRetrieve)

        update_parser = subparsers.add_parser('update', help='update flywheel user')
        update_parser.add_argument('-d', '--disable', action='store_true', help='disable account.')
        update_parser.add_argument('-e', '--enable', action='store_true', help='enable account.')
        update_parser.add_argument('-f', '--first-name', nargs=1, action='store', help='First name')
        update_parser.add_argument('-l', '--last-name', nargs=1, action='store', help='Last Name')
        update_parser.add_argument('UserName', nargs=1, action='store', help='UserName')
        update_parser.set_defaults(func=self.userUpdate)

        delete_parser = subparsers.add_parser('delete', help='Delete flywheel User')
        delete_parser.add_argument('UserName', nargs='+', action='store', help='UserNames')
        delete_parser.set_defaults(func=self.userDelete)

    def userCreate(self,args):
      #
      # doesn't create site admins
      # should allow putting users in groups
      # should allow reading data from a file
      #
      username = self.enforceDomain(args.UserName[0])

      if (self.getUser(username)):
          # *** should raise and exception
        warnings.warn("User '%s' already exists" % (username))
        return(False)

      if (not args.no_op):
          self.fw.add_user(flywheel.User(firstname=args.first_name[0], lastname=args.last_name[0], email=username, id=username))

      if (args.verbose or args.no_op):
        print('create user %s %s(%s)' % (args.first_name[0], args.last_name[0], username), file=sys.stderr)

      if (args.group_id[0]):
          self.appendUser2Group(self.fw.get_group(args.group_id[0]), username, args.role[0])
          print("append user '%s' to group '%' failed" % (username, args.group[0]), file=sys.stderr)
          
      return(True)

    def userRetrieve(self,args):
      for user in self.fw.users():
        UserNames = list(map(lambda x: self.enforceDomain(x), args.UserNames))
        
        if (args.UserNames and (not (user.id in UserNames))):
          continue
        if (args.disabled or not user.disabled):
          print("%s, %s, %s, %s" % (user.firstname, user.lastname, user.id, user.root))

    def userUpdate(self,args):
        user = self.getUser(self.enforceDomain(args.UserName[0]))
        if (user):
            print(user)
            retval = 0
        else:
            logging.warning("%s : No such user '%s'" % (self.cmd, user))
            retval = 1

        return(retval)

    def userDelete(self,args):
        #
        # *** can't really delete a user yet. -- only disable their account
        #
        UserNames = self.Config.UserName
        for username in UserNames:
            username = self.enforceDomain(username)
            user = self.getUser(username)
            if (user):
                if (args.verbose):
                    print("delete user '%s'" % (username))

    def mkPermission(self, user, role):

        RoleId = list(filter(lambda r: r.label == role or r.default_flywheel_role == role, self.Roles))[0].id
        permission = { '_id': user, 'role_ids': [ RoleId ] }

        return(permission)

    def accessPerms2RolePerms(self, accessPerms):
        RolePerms = []
        for ap in accessPerms:
            RolePerms.append(self.mkPermission(ap.id, ap.access))

        return(RolePerms)

    def enforceDomain(self,user):
        if (re.search('@',user)):
            return(user)
        else:
            return(re.sub(r'$','@%s' % (self.Domain), user))

    def readCSVFile(self,CSVFileName, Headers=['role','pennkeyname','firstname','lastname']):
        with open(CSVFileName) as csvfile:
            reader = csv.DictReader(csvfile, fieldnames=Headers, delimiter=':', quotechar='"')
            lines = []
            for row in reader:
                lines.append(row)

        return(lines)

    def sys(self,command,working_dir=''):
        '''
        sys - run a command line program. -n = no-op, -v = verbose 

        prints the command to stderr if either -n or -v are set.  
        executes the command if -n is not set.
        '''

        if (self.config.get(self.config_section,'no_op') == 'True' or self.config.get(self.config_section,'verbose') == 'True'):
            print(command,file=sys.stderr) 

        if (self.config.get(self.config_section,'no_op') == 'True'):
            return('')
        else:
            if(len(working_dir) > 0):
                res = Popen([command], cwd=working_dir, shell=True, stdout=PIPE, universal_newlines=True).communicate()[0]
            else:
                res = Popen([command], shell=True, stdout=PIPE, universal_newlines=True).communicate()[0]

            return(res)



if __name__ == '__main__':
    fw = FW()

