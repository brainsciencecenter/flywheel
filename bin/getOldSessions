#!/bin/bash

Group=unknown
Project=Unsorted

CmdName=$(basename "$0")
syntax="$CmdName [-d YYYY-MM-DD][-g Group][-j JsonFile][-m MinAge][-s SubjectJsonFile][-p Project]"

function getFwProjectId {
    local Group="$1"
    local Project="$2"
    
    ProjectId=$(fw ls "$Group" --ids  2> /dev/null | grep -P "\s${Project}\s+$" | sed 's/>.*$//; s/^.*id://')
    if [ -z "$ProjectId" ]
    then	 
	echo "'${Group}/${Project}' not found" 1>&2
	exit 1
    fi

    echo "$ProjectId"
}


function json2Csv () {
    echo "CreatedDate,SessionId,Group,ParentsGroup,Subject,Session"
    jq -r -L /tmp/ '
        import "unknown-Unsorted-Id2SubjectLabels" as $Id2SubjectLabels;

	[ 
	      .created,
	      ._id,
      	      .group,
	      .parents.group,
      	      $Id2SubjectLabels::Id2SubjectLabels[][.parents.subject],
      	      .label
	] | @csv
    ' | sort
}

while getopts d:g:j:m:p:s: arg
do
	case "$arg" in
	     d|g|j|m|p|s)
		eval "opt_${arg}='${OPTARG:=1}'"
		;;
	esac
done

shift $(($OPTIND - 1))

MinAge="3 months"
if [ -n "$opt_m" ]
then
    MinAge="$opt_m"
fi

ToOldDate=$(date --date="now - $MinAge" +'%Y-%m-%d')
if [ -n "$opt_d" ]
then
    ToOldDate="$opt_d"
fi

echo "ToOldDate = $ToOldDate"

ProjectId=$(getFwProjectId "${Group}" "${Project}")

Id2SubjectLabelJsonFile=$(mktemp /tmp/Id2SubjectLabels-XXXXX.json)
if [ -n "$opt_s" ]
then
    Id2SubjectLabelJsonFile="$opt_s"
fi

# should select on group=$Group 
if [ -n "$opt_j" ]
then
    cat "$opt_j" | json2Csv
else
    fwfind -1 -r -S group="$Group" project="$ProjectId" "created<${ToOldDate}" | json2Csv
fi
			  

