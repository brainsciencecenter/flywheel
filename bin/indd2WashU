#!/bin/bash
 
# You need an acquisitions file to run this
#   getAcquisitionPaths dwolklab/NACC-SC > Nacc-scAquisitionPaths.csv
#
# or
#   fwfind -p group=dwolklab  | jq '[.[]| {(._id): .label}] | add ' > id2ProjectLabels.json
#   fwfind -s group=dwolklab parents.project=5da887636cbeb0005b73e579  | jq '[.[]| {(._id): .label}] | add ' > id2SubjectLabels.json
#   fwfind -S group=dwolklab parents.project=5da887636cbeb0005b73e579  | jq '[.[]| {(._id): .label}] | add ' > is2SessionLabels.json
#   jq -r -L . -f ~/flywheel/bin/Non_SC_ScansforTxferFiles.json AcquisitionsFull.json  > AnteMortemMriAcquisitions.csv

#AcquisitionTimestamp,SessionUid,AcquisitionUid,AcquisitionLabel,FilePath,FileUid,ClassifictionMeasurement
# 2019-03-13T12:59:05-0400,5c8937a8df93e3002c0067ef,5c8937a8df93e3002c0067f0,Localizer,dwolklab/NACC-SC/119482/119482x20190313x3T/Localizer/files/1.3.12.2.1107.5.2.43.66044.2019031312585920988796658.0.0.0.dicom.zip,ad85d41a-9d72-4ec2-bd00-4fb9886bc247,T2
#2019-03-13T12:59:05-0400,5c8937a8df93e3002c0067ef,5c8937a8df93e3002c0067f0,Localizer,dwolklab/NACC-SC/119482/119482x20190313x3T/Localizer/files/1.3.12.2.1107.5.2.43.66044.2019031312585920988796658.0.0.0_i00003.nii.gz,79492eea-df68-45d0-8eb1-e9c255129c53,T2
#2019-03-13T12:59:05-0400,5c8937a8df93e3002c0067ef,5c8937a8df93e3002c0067f0,Localizer,dwolklab/NACC-SC/119482/119482x20190313x3T/Localizer/files/1.3.12.2.1107.5.2.43.66044.2019031312585920988796658.0.0.0_i00002.nii.gz,9cc9b6d0-976d-441a-a730-3fccf2557e3e,T2
# 2019-03-13T12:59:05-0400,5c8937a8df93e3002c0067ef,5c8937a8df93e3002c0067f0,Localizer,dwolklab/NACC-SC/119482/119482x20190313x3T/Localizer/files/1.3.12.2.1107.5.2.43.66044.2019031312585920988796658.0.0.0_i00001.nii.gz,c72455ee-ce85-47fe-847f-b264f8c19aed,T2
#
#
# The input file needs to list the INDD subject, and date, and optional session url (https://upenn.flywheel.io/#/projects/5d07b942a550c600296fadda/sessions/5d08f879a550c6004870cf87?tab=data) and file name
#
# INDDID,FlywheelSessionTimestampUTC,FlywheelSessionURL,FlywheelAcquisitionLabel,DicomSliceThickness,DicomPixelSpacingX,DicomPixelSpacingY
# 111011,06/06/2006,https://upenn.flywheel.io/#/projects/5d07b942a550c600296fadda/sessions/5d08f879a550c6004870cf87?tab=data,COR 3D,1.5,0.9374864697,0.9375
# 111011,06/06/2006,https://upenn.flywheel.io/#/projects/5d07b942a550c600296fadda/sessions/5d08f879a550c6004870cf87?tab=data,COR 3D,1.5,0.9374864697,0.9375
# 109593,08/11/2004,https://upenn.flywheel.io/#/projects/5d07b942a550c600296fadda/sessions/5d08cf06a550c60044700f71?tab=data,COR 3D,1.5,0.9374948144,0.9375
#
# or
#
# INDDID,MRIDate,MRIProtocol,Scanner
# 123200,11/27/2018,NACC-SC,SC (3T)
# 126022,01/12/2021,NACC-SC,SC (3T)
# 120937,07/11/2016,NACC-SC,SC (3T)
# 123213,07/10/2018,NACC-SC,SC (3T)


CmdName=$(basename "$0")

Modalities="T1 T2 FLAIR"
FileType=.nii.gz

function filterT1s {
    local PossibleAcquisitions=$(cat)
    local Scans
    local FilteredT1s=""

    for  ScanType in "ORIGINAL:PRIMARY" "DERIVED:PRIMARY"
    do
	Scans=$(echo "$PossibleAcquisitions" | grep "$ScanType")

	# are there any of this type of scan
	if [ -z "$Scans" ]
	then
	    continue
	fi
	
	# Are there scans with T1|MPRAGE in the name or with T1 in the classification/Measurement
	local T1Scans=$(echo "$Scans" | grep -Pi '(/[^/]*(T1|MPRAGE)[^/]*/)|("T1")' )
	if [ -n "$T1Scans" ]
	then
	    # Prefer ND over non-ND scans
	    local NdT1Scans=$(echo "$T1Scans" | grep '_ND')

	    if [ -n "$NdT1Scans" ]
	    then
		FilteredT1s="$NdT1Scans"
	    else
		FilteredT1s="$T1Scans"
	    fi
	    
	    break
	fi

	FilteredT1s=$(echo "$T1Scans" | grep -Pi '/[^/]*(SAG|COR) 3D[^/]*/')
    done

    echo "$FilteredT1s"
}


while getopts ei:P:p arg
do
    case "$arg" in
	e|i|P|p)
	    eval "opt_${arg}=${OPTARG:=1}"
	    ;;
    esac
done

shift $((OPTIND - 1))

if [ -n "$opt_i" ]
then
	InddAcquisitionsFile="$opt_i"
else
	echo "$CmdName : Missing {-i InddAcquisitionFile} [InddId,Date[[,FilePath]] [[InddId,Date,FilePath]...]]" 1>&2
	exit 1
fi

if [ -n "$opt_p" ]
then
    ModalityRegEx='\[BR_NAC\]|\[BR_CTAC\]|\[BR-DY_NAC\]|\[BR-DY_CTAC\]'
    Modalities=PET
fi

if [ -z "$*" ]
then
    while read Line
    do
	InddId="$(echo $Line | csvcut -c 1)"
	InputDate="$(echo $Line | csvcut -c 2)"
#	FilePathOrJunk="$(echo $Line | csvcut -c 3)"
	
	Date=$(date -d "$InputDate" +%Y-%m-%d)
	
	PossibleAcquisitions=$(grep -P '^"?'"${Date}T" ${InddAcquisitionsFile} | grep "/${InddId}/" | grep "$FileType" | grep -vPi '(T2\*)|([x_]7T[/_])|(I AM CONFUSED BY THIS)|(duplicate)')
	FilteredAcquisitions=""

	declare -A ImageTypeCount=([T1]=0 [T2]=0 [FLAIR]=0)

	for Modality in $Modalities
	do
		ModalityCount=0

		case "$Modality" in 
		     T1)
			ModalityAcquisitions=$(echo "$PossibleAcquisitions" | filterT1s)
			ModalityCount=$(echo "$ModalityAcquisitions" | grep '.' | wc -l)
			;;

		     T2)
			ModalityAcquisitions=$(echo "$PossibleAcquisitions" | grep -Pi "/[^/]*${Modality}[^/]*/")
			ModalityCount=$(echo "$ModalityAcquisitions" | grep -v "FLAIR" | grep . | wc -l)
			;;

		     FLAIR)
			ModalityAcquisitions=$(echo "$PossibleAcquisitions" | grep -Pi "/[^/]*${Modality}[^/]*/")
			ModalityCount=$(echo "$ModalityAcquisitions" | grep . | wc -l)
			;;
		esac

		ImageTypeCount[$Modality]=$((${ImageTypeCount[$Modality]} + $ModalityCount))

		FilteredAcquisitions+=$(echo ""; echo ""; echo "$ModalityAcquisitions")
	done

	echo "${InddId},${InputDate},${ImageTypeCount[T1]},${ImageTypeCount[T2]},${ImageTypeCount[FLAIR]},,,,,,,,"
	if [ -z "$FilteredAcquisitions" ]
	then
	    echo ",,No Acquisition for ${InddId} on ${Date} in ${InddAcquisitionsFile}"
	else
	    echo "$FilteredAcquisitions" | grep '.' | sed 's/^/,,,,,/' | sort -k +9 -t , | csvcut -c 1-6,9-11,13 | sed 's^,cfn/PMC[^,]*/^,^' | uniq
	    
	    if [ "${ImageTypeCount[T1]}" == 0 ]
	    then
		echo "$PossibleAcquisitions" | sed 's/^/>,,,,,/' | sort -k +9 -t , | csvcut -c 1-6,9-11,13 | sed 's^,cfn/PMC[^,]*/^,^' | uniq
	    fi
	fi

	echo ""

    done

fi
