#!/usr/bin/env python3

import sys
import re
import os
import flywheel
import json
import argparse
import fwgearutils

#
# Convert fw paths to json representation
# -a	Include acquisitions
# -g	Do a fw.get on each container
# -v	Print project information on stderr
# -z	Include zip header information
#
# Examples:
#
#  For a group/project:
#     fw2json fw://upenn-admins/Test2 | jq -r '.[]|"\(.group)/\(.label)/\(.subjects[].label)/\(.subjects[].sessions[].label)"'
#
# For group/project/subject (No easy access to the project label from a subject):
#     fw2json  fw://upenn-admins/Test2/121526 |jq -r '"fw://\(.parents.group)/Test2/\(.label)/\(.sessions[].label)"'
#
# Dump the acquisition names for a whole project:
#     fw2json -a -v fw://upenn-admins/Test2 | jq -r '.subjects[].sessions[].acquisitions[].label'
#
# Get the acqusition names for a given session (Need the -a and no easy access to either project or subject labels from session):
#     fw2json -a fw://upenn-admins/Test2/121526/121526_20180213_7T | jq -r '"fw://\(.parents.group)/Test2/121526/\(.label)/\(.acquisitions[].label)"'
#
# Print the interesting info from unknown/Unsorted:
# 	fw2json -ag unknown/Unsorted | jq -r '.[] | { "\(._id)": .label } as $ProjectLabels | .subjects[] | { "\(._id)": .label} as $SubjectLabels | .sessions[] |[ ([ .group, $ProjectLabels[.project],  $SubjectLabels[.subject._id], .label ] | join("/")), .timestamp, .acquisitions[0].files[0].info.StudyComments, .acquisitions[0].files[0].info.StudyDescription, .acquisitions[0].files[0].info.InstitutionName, .acquisitions[0].files[0].info.ManufacturerModelName ] | @csv'
#
# Print all the flywheel paths for the sessions in a set of projects:
# 	fw2json pennftdcenter/{Unsorted,7T_invivo_pilot,invivo_pilot} | jq -r '.[] | . as $Project | .subjects[] | . as $Subject | .sessions[] | . as $Session |  .acquisitions[0].files[0].info | [ ([ $Session.group, $Project.label,  $Subject.label, $Session.label ] | join("/")), $Session.timestamp, .StudyComments, .StudyDescription, .InstitutionName, .ManufacturerModelName ] | @csv'
#
# Find indexes for acquisitions that match a given string:
#     fw2json -a fw://upenn-admins/Test2 | jq -r 'paths(select(.label=="mp2rage_siemens_ipat3_0.69mm_UNI_Images")?)'
# [
#   "subjects",
#   65,
#   "sessions",
#   0,
#   "acquisitions",
#   5
# ]
# [
#   "subjects",
#   67,
#   "sessions",
#   0,
#   "acquisitions",
#   1
# ]
# => .subjects[65].sessions[0].acquisitions[5].label and .subjects[67].sessions[0].acquisitions[1].label are the desired acquisitions
#
# Dump the header information for the dicom.zip file (clicking on the 'i' over the acqusition in the WebUI):
#     fw2json -a -g -z -v -d fw://upenn-admins/Test2/121526/121526_20180213_7T/mp2rage_siemens_ipat3_0.69mm_T1_Images_ND   | jq -r '.files[0].info'
#

if __name__ == '__main__':

    import argparse

    CmdName = os.path.basename(sys.argv[0])

    ap = argparse.ArgumentParser()
    ap.add_argument('-a', '--acquisitions',  action='store_true', help='include acquisition information')
    ap.add_argument('-d', '--debug',  action='store_true', help='debug flag')
    ap.add_argument('-f', '--from-regex',  action='store', default=None, help='from-regex')
    ap.add_argument('-g', '--get',  action='store_true', help='do fw.get on each session')
    ap.add_argument('-l', '--localtime',  action='store_true', help='print times in local timezone instead of UTC')
    ap.add_argument('-p', '--progress-bar', default=False,  action='store_true', help='generate progress info on stderr')
    ap.add_argument('-R', '--no-recurse', default=False,  action='store_true', help='no recurse mode')
    ap.add_argument('-r', '--root', default=True,  action='store_true', help='enable manager mode')
    ap.add_argument('-s', '--stream', default=False,  action='store_true', help='streaming mode')
    ap.add_argument('-t', '--to-regex',  action='store', default="", help='to-regex')
    ap.add_argument('-v', '--verbose',  action='store_true', help='print progress info')
    ap.add_argument('-z', '--zip-info',  action='store_true', help='include zip file information')
    ap.add_argument('path', nargs='+', type=str, default=None, help='group/project')

    args = ap.parse_args()

    fw = fwgearutils.getFW(args)
    if (not fw):
        print("%s : unable to initialize flywheel object" % (CmdName), file=sys.stderr)
        sys.exit(1)

    Output = []
    
    for path in args.path:
        CleanPath = re.sub('^fw://','', path)
        
        try:
            Container = fw.get(path)
            if (args.no_recurse):
                if (args.stream):
                    if (args.from_regex):
                        print(re.sub(args.from_regex, args.to_regex, json.dumps(fwgearutils.sloppyCopy(Container, UTC=(not args.localtime)), indent=2)))
                    else:
                        print(json.dumps(fwgearutils.sloppyCopy(Container, UTC=(not args.localtime)), indent=2))
                else:
                    Output.append(fwgearutils.sloppyCopy(Container, UTC=(not args.localtime)))
            else:
                if (args.stream):
                    if (args.from_regex):
                        print(re.sub(args.from_regex, args.to_regex, json.dumps(fwgearutils.recurse(fw, Container, CmdName=CmdName, Get=args.get, UTC=(not args.localtime), Debug=args.debug, Verbose=args.verbose, GetAcquisitions=args.acquisitions, ZipInfo=args.zip_info), indent=2)))
                    else:
                        print(json.dumps(fwgearutils.recurse(fw, Container, CmdName=CmdName, Get=args.get, UTC=(not args.localtime), Debug=args.debug, Verbose=args.verbose, GetAcquisitions=args.acquisitions, ZipInfo=args.zip_info), indent=2))
                else:
                    Output.append(fwgearutils.recurse(fw, Container, CmdName=CmdName, Get=args.get, UTC=(not args.localtime), Debug=args.debug, Verbose=args.verbose, GetAcquisitions=args.acquisitions, ZipInfo=args.zip_info))

               
        except (flywheel.rest.ApiException) as e:
            Containers = fwgearutils.fwGlobPath(fw, CleanPath)

            for ContainerPath, Container in Containers.items():
                try:
                    Container = fw.lookup(ContainerPath)

                except (flywheel.rest.ApiException) as e:
                    print("%s : No such flywheel path '%s'" % (CmdName, ContainerPath), file=sys.stderr)

                if (args.no_recurse):
                    if (args.stream):
                        print("args.stream '{}', from_regex = '{}', to_regex = '{}'".format(args.stream, args.from_regex,args.to_regex), file=sys.stderr)
                        if (args.from_regex):
                            print(re.sub(args.from_regex,args.to_regex,json.dumps(fwgearutils.sloppyCopy(Container, UTC=(not args.localtime)), indent=2)))
                        else:
                            print(json.dumps(fwgearutils.sloppyCopy(Container, UTC=(not args.localtime)), indent=2))
                    else:
                        Output.append(fwgearutils.sloppyCopy(Container, UTC=(not args.localtime)))
                else:
                    if (args.stream):
                        print(json.dumps(fwgearutils.recurse(fw, Container, CmdName=CmdName, Get=args.get, UTC=(not args.localtime), Debug=args.debug, Verbose=args.verbose, GetAcquisitions=args.acquisitions, ZipInfo=args.zip_info),indent=2))
                    else:
                        Output.append(fwgearutils.recurse(fw, Container, CmdName=CmdName, Get=args.get, UTC=(not args.localtime), Debug=args.debug, Verbose=args.verbose, GetAcquisitions=args.acquisitions, ZipInfo=args.zip_info))

        if (args.progress_bar):
            print("%s" % CleanPath, file=sys.stderr, flush=True)

    if (args.debug):
        print("args.stream '{}', from_regex = '{}', to_regex = '{}'".format(args.stream, args.from_regex,args.to_regex), file=sys.stderr)

    if (not args.stream):
        if (args.from_regex):
            print(re.sub(args.from_regex,args.to_regex,(json.dumps(Output,indent=2))))
        else:
            print(json.dumps(Output,indent=2))
