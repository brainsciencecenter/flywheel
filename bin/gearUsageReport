#!/usr/bin/python3

import argparse
import csv
import flywheel
import fwgearutils
import json
import os
import re
import sys

CmdName = os.path.basename(sys.argv[0])

ap = argparse.ArgumentParser()

ap.add_argument('-l', '--limit', action='store', default=1000000, type=int, help='Flywheel cost allocation csv file')
ap.add_argument('-p', '--progressbar', action='store_true', help='show progress bar')
ap.add_argument('-v', '--verbose', action='store_true', help='verbose')
ap.add_argument('filter', nargs='*', type=str, default=None, help='arguments to fw.find()')

args = ap.parse_args()

fw = fwgearutils.getFW(args, Root=True)

project_data = []
search = ','.join(["state=complete"] + args.filter)

print("search = '{}'".format(search), file=sys.stderr)

def progress(count, total, status=''):
    bar_len = 60
    filled_len = int(round(bar_len * count / float(total)))

    percents = round(100.0 * count / float(total), 1)
    bar = '=' * filled_len + '-' * (bar_len - filled_len)

    sys.stderr.write('%s/%s [%s] %s%s ...%s\r' % (i, total, bar, percents, '%', status))
    sys.stderr.flush()  # As suggested by Rom Ruben (see: http://stackoverflow.com/questions/3173320/text-progress-bar-in-the-console/27871113#comment50529068_27871113)

jobs = []
for j in fw.jobs.iter_find(filter=search):
  jobs.append(j)

i = 0
l = len(jobs)

print("len = '{}'".format(l), file=sys.stderr)

for job in jobs:
  progress(i,l)
  i += 1

  try:
    job=job.reload()
    elapsed = job['profile']['elapsed_time_ms']
    cpus= job['profile']['executor']['cpu_cores']
    gear = fw.get_gear(job.gear_id)
    adj_elapsed=elapsed*cpus
    date = job.created
    req = job.get('inputs')
    for nested in req.values():
      if nested["type"] == 'project':
        id=nested["id"]
        project = fw.get(id)   
      elif nested["type"] == 'analysis':
        id=nested["id"]
        cont = fw.get(id)
        group = cont.parents.group
        project = fw.get_project(cont.parents.project)
      elif nested["type"] == 'acquisition':
        id=nested["id"]
        cont = fw.get(id)
        project = fw.get_project(cont.parents.project)
        group = project.group

        project_data.append({
            'job_id': job.id,
            'gear_name': gear.gear.name,
            'gear_version': gear.gear.version,
            'group': group,
            'project': project.label,
            'elapsed(ms)': elapsed,
            'cpus': cpus,
            'adj_elapsed(ms)': adj_elapsed,
            'date': date
          })
  except:
    job = job.reload() 

print("writing header", file=sys.stderr)

writer = csv.DictWriter(sys.stdout, ['job_id', 'gear_name', 'gear_version', 'group', 'project','elapsed(ms)','cpus','adj_elapsed(ms)','date'], lineterminator='\n')
writer.writeheader()

print("len(project_data) = ",len(project_data), file=sys.stderr)

for row in project_data:
  writer.writerow(row)
