#!/usr/bin/env python3

import argparse
import csv
import datetime
import flywheel
import fwgearutils
import fileinput
import json
import os
import re
import sys
import pyjq
import pprint

from tzlocal import get_localzone
from datetime import datetime

if __name__ == '__main__':

    CmdName = os.path.basename(sys.argv[0])
    args={}

    fw = fwgearutils.getFW(args, Root=True)
    if (not fw):
        print("{} : unable to initialize flywheel object".format(CmdName), file=sys.stderr)
        sys.exit(1)

    ap = argparse.ArgumentParser()

    ap.add_argument('-n', '--noop',  action='store_true', default=False, help='no-op')
    ap.add_argument('-t', '--timestamp',  action='store', default=False, help='new timestamp')
    ap.add_argument('-v', '--verbose', default=False,  action='store_true', help='verbose')

    ap.add_argument('id', nargs='*', type=str, default=None, help='group/project|ProjectID|uuid')

    args = ap.parse_args()

    NewContainerTimestamp=args.timestamp

    for id in args.id:
        ds = datetime.strptime(args.timestamp, '%Y-%m-%dT%H:%M:%S%z')

        c = fw.get(id)
        OldContainerTimestamp = c.timestamp

        if (not args.noop):
            c.update({ 'timestamp': ds })

        c = c.reload()

        if (args.verbose or args.noop):
            print("{} : Old {}.timestamp = '{}', NewContainerTimestamp = '{}'".format(CmdName, id, OldContainerTimestamp, c.timestamp))

