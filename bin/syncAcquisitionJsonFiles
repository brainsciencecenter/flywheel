#!/bin/bash

CmdName=$(basename "$0")

syntax="${CmdName} [-a AcquistionIds][-c CachedAcquisitionJsonFile][-f][-i][-l][-m][-n][-p][-d WorkingDir][-v] [Group/Project [other fw.find option]...]"

#
# -a comma or space separated list of acquisition ids to retrieve from flywheel
# -c cached acquisition json file with details of the acquisitions
# -d specify the temporary diretory to use.  Creates one with mktemp by default.  Implies -m
# -f overwrite the existing active acquisition id file
# -i inplace update -- Overwrite the CachedAcquisitionJsonFile with the updated acquisitions, moving the old one out of the way
# -l retreive json timestamps with local timezone
# -n Print the list of AcquisitionIds to be retrieved but don't actually retrieve any 
# -m messy - do not remove the temporary directory
# -p preserve cached acquisition file
#   if -c is supplied, will only retrieve acquisitions not in the cached acquisisition json file
# Group/Project The group/project path to retrieve acquisitions from -- ignored if -a is specified
# fw.find options arguments to fw.find for refining search -- ignored if -a is specified
#
# Intened use is to run
#   syncAcquisitionJsonFiles -pi -c Nacc-ScAcquisitions.json dwolklab/NACC-SC
# to generate a complete list of all acquisition ids in dwolklab/NACC-SC, then compare the acquisition id list
# to the one in the cached AcquisitionJsonFile and retrieve any missing acquisitions
# 
# This can be sped up by specifying additional restrictions on the acquisition search
#   syncAcquisitionJsonFiles -c Nacc-ScAcquisitions.json dwolklab/NACC-SC 'created>2021-05-01' 'created<2021-06-01'
# to constrain the list of new acquisitions to May, 2021
#
# If you know which acquisitions you want to retrieve:
#   syncAcquisitionJsonFiles -a 1,2,3,4
# or
#   syncAcquisitionJsonFile -a "1 2 3 4"
# to retrieve acquistion with ids of 1, 2, 3, and 4
#
# The fw.find options can be used to constrain the search to specific projects, subjects, or sessions
#

function sys {
    [ -n "${opt_n}${opt_v}" ] && echo "$@" 1>&2
    [ -n "$opt_n" ] || "$@"
}

function cleanup {
    [ "$DeleteTmpDir" == True ] && sys rm -rf "$TmpDir"
}


while getopts a:c:d:filmnpv arg
do
	case "$arg" in
	     a|c|d|f|i|l|m|n|p|v)
		eval "opt_${arg}='${OPTARG:=-${arg}}'"
		;;
	esac
done

shift $(($OPTIND - 1))

if echo "$0" | grep -q /
then
    CmdPath=$(realpath "$0")
else
    CmdPath=$(which "$0")
fi
FwDir=$(dirname $(dirname "$CmdPath"))

if [ -z "$1" ]
then
    if [ -z "$opt_a" ]
    then
	echo "${CmdName} : Missing Group/Project or AcquisitionIds list" 1>&2
	echo "${syntax}" 1>&2
	exit 1
    fi
else
    GroupProject="$1"
    Group=$(echo "$GroupProject" | cut -f 1 -d /)
    Project=$(echo "$GroupProject" | cut -f 2 -d /)

    if [ "$Group" == "Collections" ]
    then
	ProjectId=$(fwget -1 -c all | jq -r '.[] | select(.label == "'"$Project"'") | ._id')
    else
	ProjectId=$(fwfind -1 -p group="$Group" | jq -r 'select(.label=="'"$Project"'")|._id' )
    fi
    
    if [ -z "$ProjectId" ]
    then
	echo "${CmdName} : Group/Project '$Group/$Project' not found" 1>&2
	exit 1
    fi
    
    shift

    FindArgs="$@"
fi

if [ -n "$opt_l" ]
then
    TimeZone=-l
fi

if [ -n "$opt_d" ]
then
	TmpDir="$opt_d"
	opt_m=1
else
	TmpDir=$(mktemp -d "${TMPDIR:=/tmp}/${CmdName}-XXXXXX")
fi

if [ -n "$opt_m" ]
then
    DeleteTmpDir=False
else
    DeleteTmpDir=True
fi

if [ -n "$opt_c" ]
then
    CachedAcquisitionJsonFile="$opt_c"
    [ -e "$CachedAcquisitionJsonFile" ] || touch "$CachedAcquisitionJsonFile" 
else
    CachedAcquisitionJsonFile="${TmpDir}/CachedFwGetAcquisitions.json"
fi

#
# Pass -f through to fwMakeId2LabelJsonFiles.  Do not quote opt_f in this case so not having -f does not
# pass an empty string on
#
[ -n "$opt_f" ] && opt_f=-f
sys time fwMakeId2LabelJsonFiles $opt_f -t "$TmpDir" "${Group}/${Project}"

if [ -n "$opt_a" ]
then
    AcquisitionIdsToGet=$(echo "$opt_a" | sed 's/,/ /g')
else
    # *** if there is no tmpdir specified, there are no cached files other than the CachedAcquisitionJson File.  Everything is going to take a while, so ganging everything into the diff is ok

    [ -n "$opt_v" ] && echo "${CmdName} : getting ActiveAcquisitionIds" 1>&2

    ActiveAcquisitionIdsFile="${TmpDir}/ActiveAcquisitionIds"
    if [ -n "$opt_f" ] || [ ! -e "$ActiveAcquisitionIdsFile" ]
    then
	if [ "$Group" == "Collections" ]
	then
	    sys jq -r '.[]|._id' "${TmpDir}/CachedSessionJsonFile.json" | fwget -1 -ra | jq -r '.acquisitions[] | [ ._id, .timestamp ] | @csv' | sort -u > "$ActiveAcquisitionIdsFile"
	else
	    sys fwfind -a -1 group="$Group" parents.project="$ProjectId" "$@" | jq -r '[._id, .timestamp]|@csv' | sort -u > "$ActiveAcquisitionIdsFile"
	fi
    fi

    ActiveAcquisitionIdsCount=$(wc -l "$ActiveAcquisitionIdsFile" | awk '{print $1}')
    if [ "$ActiveAcquisitionIdsCount" == 0 ]
    then
	echo "${CmdName} : no active acquisition ids in '$ActiveAcquisitionIdsFile'" 1>&2
	exit 1
    fi
    
    AcquisitionIdsToGetFile="${TmpDir}/AcquisitionIdsToGet"
    cat /dev/null > "$AcquisitionIdsToGetFile"
    
    AcquisitionIdsToDeleteFile="${TmpDir}/AcquisitionIdsToDelete"
    cat /dev/null > "$AcquisitionIdsToDeleteFile"
    
    if [ -e "$CachedAcquisitionJsonFile" ]
    then

	AcquisitionIdsDiffOutputFile="${TmpDir}/AcquisitionIdsDiffOutput"
	diff <(jq -r '[._id, .timestamp]|@csv' "$CachedAcquisitionJsonFile" | sort -u) <(sort -u "$ActiveAcquisitionIdsFile") > "$AcquisitionIdsDiffOutputFile"

	grep '>' "$AcquisitionIdsDiffOutputFile" | sed 's/> //; s/,.*$//; s/"//g' > "$AcquisitionIdsToGetFile"
	grep '<' "$AcquisitionIdsDiffOutputFile" | sed 's/< //; s/,.*$//; s/"//g' > "$AcquisitionIdsToDeleteFile"

	[ -n "$opt_v" ] && ls -l "$TmpDir"

#	[ -f "${FwDir}/lib/FindAcqWithExpiredParentLabels.jq" ] || touch "${FwDir}/lib/FindAcqWithExpiredParentLabels.jq"

#	jq -r -L "$TmpDir" -f "${FwDir}/lib/FindAcqWithExpiredParentLabels.jq" "$CachedAcquisitionJsonFile" >> "$AcquisitionIdsToDeleteFile"
    else
	sort -u "$ActiveAcquisitionIdsFile" | cut -f 1 -d , | sed 's/"//g' > "$AcquisitionIdsToGetFile"
	cat /dev/null > "$AcquisitionIdsToDeleteFile"
    fi

    [ -n "$opt_v" ] && ls -l "$TmpDir"
    
fi

if [ -n "$opt_n" ]
then
    [ -n "$AcquisitionIdsToDelete" ] && echo "$AcquisitionIdsToDelete" | sed 's/^/- /'
    [ -n "$AcquisitionIdsToGet" ] && echo "$AcquisitionIdsToGet" | sed 's/^/+ /'
    exit 0
fi

#
# *** show deleted info
# delete acquisitionids from cached file and put results on stdout not changing cached file
# get acquisition json info to stdout
# update cached file in place

UpdatedAcquisitionsJsonFile=$(mktemp "${TmpDir}/UpdatedFwGetAcquisitions-XXXXXX.json")

if [ -e "$CachedAcquisitionJsonFile" ]
then
    # output the current Cached Acquisition Json file without the Acquisitions to delete
    # You get json of { "": "True" } if there isn't any id to delete which is fine
    AcquisitionIdsToDeleteJson=$(sed 's/^.*$/"&"/' "$AcquisitionIdsToDeleteFile" | jq -n '[inputs|{(.): true}] | add')
    jq --argjson IdsToDelete "${AcquisitionIdsToDeleteJson}" 'select(._id|in($IdsToDelete)|not)' "$CachedAcquisitionJsonFile" >> "$UpdatedAcquisitionsJsonFile"
fi
	
if [ -s "$AcquisitionIdsToGetFile" ]
then
    if [ -n "$opt_v" ]
    then
	echo "${CmdName} : fwget -1 $opt_v < ${AcquisitionIdsToGetFile}" 1>&2

    fi

    # the extra jq at the end formats numbers ala jq so 1.0 => 1 and then there is no differences between
    # files before and after deleting acquisitions

    sys fwget -1 ${opt_v} $TimeZone < "$AcquisitionIdsToGetFile" | jq . >> "$UpdatedAcquisitionsJsonFile"
fi

if [ -n "$opt_i" ]
then
    if [ -z "$CachedAcquisitionJsonFile" ]
    then
	echo "${CmdName} : Cached Acquisition Json File not specified" 1>&2
	exit 1
    fi
    
    if [ -e "$CachedAcquisitionJsonFile" ] && [ -n "$opt_p" ]
    then
	SavedCachedAcquisitionsJsonFile=$(mktemp "${TmpDir}/CachedAcquisitions-XXXXXX.json")
	sys mv -f "$CachedAcquisitionJsonFile" "$SavedCachedAcquisitionsJsonFile"
    fi

    sys mv -f "$UpdatedAcquisitionsJsonFile" "$CachedAcquisitionJsonFile"
    
else
    cat "$UpdatedAcquisitionsJsonFile"
fi

cleanup
