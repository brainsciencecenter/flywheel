#!/usr/bin/env python

import argparse
import flywheel
import fwgearutils
import json
import os
import pyjq
import re
import sys

from datetime import datetime


if __name__ == '__main__':

    import argparse

    CmdName = os.path.basename(sys.argv[0])

    ParentOrder = [ 'acquisition', 'session', 'subject', 'project' ]
    
    ap = argparse.ArgumentParser()

    ap.add_argument('-n', '--noop',  action='store_true', default=False, help='no-op')
    ap.add_argument('-q', '--quiet',  action='store_true', default=False, help='no output')
    ap.add_argument('-t', '--tags',  action='store', default=False, help='[+|-|=]comma separated list of tags to add to the files')
    ap.add_argument('-v', '--verbose', default=False,  action='store_true', help='verbose')

    ap.add_argument('id', nargs='*', type=str, default=None, help='group/project|ProjectID|uuid')

    args = ap.parse_args()

    TagOp = '+'
    NewTags = None
    if (args.tags):
        m = re.search('^(?P<TagOp>\+|\-|=)?(?P<Tags>(.)+)$',args.tags)
        if (m):
            if (m.group('TagOp')):
                TagOp = m.group('TagOp')

            if (m.group('Tags')):
                NewTags = m.group('Tags').split(',')
        
    fw = fwgearutils.getFW(args, Root=True)
    if (not fw):
        print("%s : unable to initialize flywheel object" % (CmdName), file=sys.stderr)
        sys.exit(1)

    ds = datetime.now()
    for id in args.id:
        try:
            Container = fw.get(id)
        except(flywheel.rest.ApiException) as e:
            Container = fw.get_file(id)

        if (NewTags):
            if (TagOp == '+'):
                Container.add_tags(NewTags)

            elif (TagOp == '-'):
                for Tag in NewTags:
                    Container.delete_tag(Tag)

            elif (TagOp == '='):
                CurrentTags = set(Container.tags)
                for Tag in CurrentTags:
                    Container.delete_tag(Tag)
                
                Container.add_tags(NewTags)

            Container = Container.reload()

            # Want to update the timestamp on the parent so the new tags are visable
            for ParentType in ParentOrder:
                if (hasattr(Container.parents, ParentType)):
                    ParentId = eval("Container.parents.{}".format(ParentType))
                    Parent = fw.get(ParentId)

                    if (args.verbose):
                        print("Parent = '{}'".format(Parent.label))

                    Parent.update({ 'timestamp': ds })

                    break

        if (not args.quiet):
            print("{}".format(','.join(Container.tags)))

    
