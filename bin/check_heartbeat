#!/bin/bash

CmdName=$(basename "$0")
Syntax="${CmdName} [-c YYYY-MM-DD][-g GroupId][-h][-l][-m YYYY-MM-DD][-n][-p ProjectLabel][-w YYYY-MM-DD][-v] [Scanner]" 

#
# -l Leave, do not clean up the Scan Cache file
#

FwDir=$(dirname $(dirname $(realpath $(which "$0"))))

export PATH="${PATH}:${FwDir}/bin"
export PYTHONPATH="${FwDir}/lib"

TmpDir="${TMPDIR:=/tmp}"

ScannerMapJsonFile="${FwDir}/etc/ScannerMap.json"
ScannerStationNamesJsonFile="${FwDir}/etc/ScannerStationNames.json"

function sys {
    [ -n "${opt_n}${opt_v}" ] && echo "$@" 1>&2
    [ -n "$opt_n" ] || "$@"
}

function augmentFwViewJson {
    local CriticalDate="$1"
    local WarningDate="$2"
    local ScannerStationNamesJsonFile="$3"
    
	CategorizeCreatedDateJq='
             .data[] | select(.["file.origin.type"] == "device")
           | (.["acquisition.created"] | sub("T.*$";"") ) as $CreatedDate
           | {
                "heartbeat.status": (
                              if ($CreatedDate >= $WarningDate) then
                                    "Ok"
                              else if ( ($CreatedDate > $CriticalDate) and ($CreatedDate < $WarningDate)) then
                                          "Warning"
                                   else
                                          "Critical"
                                   end
                              end
                            )
                , "created.date": $CreatedDate
                , "scanner.name": $ScannerStationNames[][.["file.info.StationName"]]
             } + .
        '
	jq -r --argjson CriticalDate '"'"$CriticalDate"'"' --argjson WarningDate '"'"$WarningDate"'"' --slurpfile ScannerStationNames "$ScannerStationNamesJsonFile" "$CategorizeCreatedDateJq" 
}

function cacheScans {
    local Group="$1"
    local Project="$2"
    local MonthAgoDate="$3"

    local ProjectId

    ProjectId=$(fwget -1 "${Group}/${Project}" | jq -r '._id')

    sys fwview -c acquisition -F json -f 'acquisition.created>"'"$MonthAgoDate"'"' -p "$ProjectId" acquisition.file.origin.id  acquisition.created subject.code session.label session.id file.info.{DeidentificationMethod,ImageComments,ManufacturerModelName,PerformedProcedureStepDescription,StationName,StudyComments,StudyDescription} file.origin.id file.origin.type
}


function checkScannerHeartbeat {
    local CachedScansJsonFile="$1"
    local Scanner="$2"
    local ScannerMapJsonFile="$3"
    local ScannerStationNamesJsonFile="$4"
    
    local ValidScanners=$(jq -r ".[]" "$ScannerMapJsonFile" "$ScannerStationNamesJsonFile" | sort -u)
    local CategorizedScanDatesFile="/tmp/CategorizedScanDates"

	if [ -z "$Scanner" ]
	then
		echo "$Syntax" 1>&2
		echo "Scanner must be one of: " 1>&2	
		echo "$ValidScanners" 1>&2
	
		exit 1
	else
		if ! echo "$ValidScanners" | grep -q "$Scanner"
		then
			echo "$Syntax" 1>&2
			echo "'$1' not found in list of valid scanners: " 1>&2
			echo "$ValidScanners" 1>&2
	
			exit 2
		fi
	fi	

        jq  -r --argjson Scanner '"'"$Scanner"'"' 'select(.["scanner.name"] == $Scanner) | [ .["heartbeat.status"], .["created.date"], .["session.id"] ] | join(" ")' "$CachedScansJsonFile" > "$CategorizedScanDatesFile"

	OkCount=$(grep "Ok" "$CategorizedScanDatesFile" | wc -l)
	WarningCount=$(grep "Warning" "$CategorizedScanDatesFile" | wc -l)
	
	if [ "$OkCount" -gt 0 ]
	then
		Msg="OK - ${OkCount} scan(s) in ${GroupId}/${ProjectLabel} from ${Scanner} since ${WarningDate}"
		ReturnCode=0
	elif [ "$WarningCount" -gt 0 ]
	then
		Msg="Warning - ${WarningCount} scan(s) in ${GroupId}/${ProjectLabel} from ${Scanner} between ${CriticalDate} and ${WarningDate}"
		ReturnCode=1
	else
		LastScanSeenDate=$(grep Critical "$CategorizedScanDatesFile" | sort | tail -n 1 | cut -f 2 -d ' ')
		if [ -z "$LastScanSeenDate" ]
		then
			Msg="CRITICAL - No scans seen in ${GroupId}/${ProjectLabel} from ${Scanner} after ${MonthAgoDate}"
		else
			Msg="CRITICAL - Last scan in ${GroupId}/${ProjectLabel} from ${Scanner} seen on ${LastScanSeenDate}"
		fi
	
		ReturnCode=2
	fi
	
	echo "$Msg"
	return "$ReturnCode"
}

while getopts c:g:hlm:np:w:v arg
do
	case "$arg" in
	     c|g|h|l|m|n|p|w|v)
		eval "opt_${arg}='${OPTARG:=1}'"
		;;
	esac
done

shift $(($OPTIND - 1))

if [ -n "$opt_h" ]
then
    echo "$Syntax" 1>&2
    exit 0
fi

CriticalDate=$(date --date='3 days ago' +%Y-%m-%d)T00:00:00
[ -n "$opt_c" ] && CriticalDate="${opt_c}"
[ -n "$opt_v" ] && echo "${CmdName}: CriticalDate = '${CriticalDate}'" 1>&2

GroupId=camris
[ -n "$opt_g" ] && GroupId="$opt_g"
[ -n "$opt_v" ] && echo "${CmdName}: GroupId = '${GroupId}'" 1>&2

MonthAgoDate=$(date --date='2 months ago' +%Y-%m-%d)T00:00:00
[ -n "$opt_m" ] && MonthAgoDateDate="$opt_m"
[ -n "$opt_v" ] && echo "${CmdName}: MonthAgoDate = '${MonthAgoDate}'" 1>&2

ProjectLabel=qa
[ -n "$opt_p" ] && ProjectLabel="$opt_p"
[ -n "$opt_v" ] && echo "${CmdName}: ProjectLabel = '${ProjectLabel}'" 1>&2

WarningDate=$(date --date='1 day ago' +%Y-%m-%d)T00:00:00
[ -n "$opt_w" ] && WarningDate="${opt_w}"
[ -n "$opt_v" ] && echo "${CmdName}: WarningDate = '${WarningDate}'" 1>&2

CachedScansJsonFile=/tmp/json

#CachedScansJsonFile=$(mktemp "${TmpDir}/${CmdName}-ScanCache-XXXXXXX.json")
cacheScans "$GroupId" "$ProjectLabel" "$MonthAgoDate" | augmentFwViewJson "$CriticalDate" "$WarningDate" "$ScannerStationNamesJsonFile" > "$CachedScansJsonFile"

for Scanner in "$@"
do
    Msg=$(checkScannerHeartbeat "$CachedScansJsonFile" "$Scanner" "$ScannerStationNamesJsonFile" "$ScannerStationNamesJsonFile" )
    ExitCode="$?"

    echo "$Msg"
done

#[ -z "$LeaveScanCacheJsonFile" ] && rm "$ScanCacheJsonFile"

exit "$ExitCode"
	
