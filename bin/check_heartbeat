#!/bin/bash

CmdName=$(basename "$0")
Syntax="${CmdName} [-C stationname|devicename][-c YYYY-MM-DD][-g GroupId][-h][-j CachedScansJsonFile][-l][-m YYYY-MM-DD][-n][-p ProjectLabel][-w YYYY-MM-DD][-v] [Scanner]" 

#
# -l Leave, do not clean up the Scan Cache file
#

FwDir=$(dirname $(dirname $(realpath $(which "$0"))))

export PATH="${PATH}:${FwDir}/bin"
export PYTHONPATH="${FwDir}/lib"

TmpDir="${TMPDIR:=/tmp}"

DeviceId2ScannerNameJsonFile="${FwDir}/etc/ScannerMap.json"
StationName2ScannerNameJsonFile="${FwDir}/etc/ScannerStationNames.json"
CheckType='"scanner.stationname"' # run the check against the stationname, vs the scanner.

if [ -e /etc/profile.d/conda.sh ]
then
    . /etc/profile.d/conda.sh
    conda activate flywheel
fi

function sys {
    [ -n "${opt_n}${opt_v}" ] && echo "$@" 1>&2
    [ -n "$opt_n" ] || "$@"
}

function augmentFwViewJson {
    local CriticalDate="$1"
    local WarningDate="$2"
    local ScannerStationNamesJsonFile="$3"
    
    CategorizeCreatedDateJq='
          .data[] | select(.["file.origin.type"] == "device")

        | (if (.["file.info.StationName"] | in($StationName2ScannerName[])) then
              $StationName2ScannerName[][.["file.info.StationName"]] 
          else
              .["file.info.StationName"] + " unknown StationName"
          end
         ) as $ScannerNameFromStationName

        | (if (.["acquisition.file.origin.id"] | in($DeviceId2ScannerName[])) then
              $DeviceId2ScannerName[][.["acquisition.file.origin.id"]]
           else
              .["acquisition.file.origin.id"] + " unknown DeviceId"
           end
          ) as $ScannerNameFromDeviceId
        | (.["acquisition.label"]) as $AcquisitionLabel
        | (.["file.name"]) as $FileName
        | ( .["acquisition.created"] | sub("\\..*$";"") ) as $AcquisitionCreatedDate

           | (.["acquisition.created"] | sub("T.*$";"") ) as $CreatedDate
           | {
                  "scanner.stationname": $ScannerNameFromStationName
                , "scanner.devicename": $ScannerNameFromDeviceId
                , "heartbeat.status": (
                          if ($AcquisitionCreatedDate >= $WarningDate) then
                                "Ok"
                          else if ( ($CreatedDate > $CriticalDate) and ($CreatedDate < $WarningDate)) then
                                 "Warning"
                              else
                                 "Critical"
                              end
                          end
                  )
                , "created.date": $CreatedDate
             } + .
        '
	jq -r --argjson CriticalDate '"'"$CriticalDate"'"' --argjson WarningDate '"'"$WarningDate"'"' --slurpfile StationName2ScannerName "$StationName2ScannerNameJsonFile" --slurpfile DeviceId2ScannerName "$DeviceId2ScannerNameJsonFile" "$CategorizeCreatedDateJq" 
}

function cacheScans {
    local Group="$1"
    local Project="$2"
    local MonthAgoDate="$3"

    sys fwview -c acquisition -F json -f 'acquisition.created>"'"$MonthAgoDate"'"' -p "${Group}/${Project}" acquisition.created acquisition.label acquisition.file.origin.id file.origin.type file.name file.info.ManufacturerModelName file.info.StationName file.info.StudyComments file.info.StudyDescription | jq .
}


function checkScannerHeartbeat {
    local CachedScansJsonFile="$1"
    local Scanner="$2"
    local ScannerName2ScannerNameJsonFile="$3"
    local DeviceName2ScannerNameJsonFile="$4"
    local CheckType="$5"

    local ValidScanners=$(jq -r ".[]" "$StationName2ScannerNameJsonFile" "$DeviceId2ScannerNameJsonFile" | sort -u)
    local CategorizedScanDatesFile=$(mktemp "${TmpDir}/${CmdName}-CategorizedScanDates-XXXXXX")

	if [ -z "$Scanner" ]
	then
		echo "$Syntax" 1>&2
		echo "Scanner must be one of: " 1>&2	
		echo "$ValidScanners" 1>&2
	
		exit 1
	else
		if ! echo "$ValidScanners" | grep -q "$Scanner"
		then
			echo "$Syntax" 1>&2
			echo "'$1' not found in list of valid scanners: " 1>&2
			echo "$ValidScanners" 1>&2
	
			exit 2
		fi
	fi	

        jq  -r --argjson CheckType "$CheckType" --argjson Scanner '"'"$Scanner"'"' 'select(.[$CheckType] == $Scanner) | [ .["heartbeat.status"], .["created.date"], .["session.id"] ] | join(" ")' "$CachedScansJsonFile" > "$CategorizedScanDatesFile"

	OkCount=$(grep "Ok" "$CategorizedScanDatesFile" | wc -l)
	WarningCount=$(grep "Warning" "$CategorizedScanDatesFile" | wc -l)
	
	if [ "$OkCount" -gt 0 ]
	then
		Msg="OK - ${OkCount} scan(s) in ${GroupId}/${ProjectLabel} from ${Scanner} since ${WarningDate}"
		ReturnCode=0
	elif [ "$WarningCount" -gt 0 ]
	then
		Msg="Warning - ${WarningCount} scan(s) in ${GroupId}/${ProjectLabel} from ${Scanner} between ${CriticalDate} and ${WarningDate}"
		ReturnCode=1
	else
		LastScanSeenDate=$(grep Critical "$CategorizedScanDatesFile" | sort | tail -n 1 | cut -f 2 -d ' ')
		if [ -z "$LastScanSeenDate" ]
		then
			Msg="CRITICAL - No scans seen in ${GroupId}/${ProjectLabel} from ${Scanner} after ${MonthAgoDate}"
		else
			Msg="CRITICAL - Last scan in ${GroupId}/${ProjectLabel} from ${Scanner} seen on ${LastScanSeenDate}"
		fi
	
		ReturnCode=2
	fi
	
	echo "$Msg"

	[ -n "$LeaveTmpFiles" ] || rm "$CategorizedScanDatesFile"
	return "$ReturnCode"
}

while getopts C:c:g:hj:lm:np:w:v arg
do
	case "$arg" in
	     C|c|g|h|j|l|m|n|p|w|v)
		eval "opt_${arg}='${OPTARG:=1}'"
		;;
	esac
done

shift $(($OPTIND - 1))

if [ -n "$opt_h" ]
then
    echo "$Syntax" 1>&2
    exit 0
fi

[ -n "$opt_l" ] && LeaveTmpFiles=1

[ -n "$opt_C" ] && CheckType="$opt_C"

CriticalDate=$(date --date='3 days ago' +%Y-%m-%d)T00:00:00
[ -n "$opt_c" ] && CriticalDate="${opt_c}"
[ -n "$opt_v" ] && echo "${CmdName}: CriticalDate = '${CriticalDate}'" 1>&2

GroupId=camris
[ -n "$opt_g" ] && GroupId="$opt_g"
[ -n "$opt_v" ] && echo "${CmdName}: GroupId = '${GroupId}'" 1>&2

MonthAgoDate=$(date --date='2 months ago' +%Y-%m-%d)T00:00:00
[ -n "$opt_m" ] && MonthAgoDateDate="$opt_m"
[ -n "$opt_v" ] && echo "${CmdName}: MonthAgoDate = '${MonthAgoDate}'" 1>&2

ProjectLabel=qa
[ -n "$opt_p" ] && ProjectLabel="$opt_p"
[ -n "$opt_v" ] && echo "${CmdName}: ProjectLabel = '${ProjectLabel}'" 1>&2

WarningDate=$(date --date='1 day ago' +%Y-%m-%d)T00:00:00
[ -n "$opt_w" ] && WarningDate="${opt_w}"
[ -n "$opt_v" ] && echo "${CmdName}: WarningDate = '${WarningDate}'" 1>&2

[ -n "$opt_v" ] && echo "${CmdName}: CachecScansJsonFile = '${CachedScansJsonFile}'" 1>&2

if [ -n "$opt_j" ]
then
    CachedScansJsonFile="$opt_j"
    LeaveTmpFiles=true
else
    CachedScansJsonFile=$(mktemp "${TmpDir}/${CmdName}-CachedScans-XXXXXXX.json")
    cacheScans "$GroupId" "$ProjectLabel" "$MonthAgoDate" | augmentFwViewJson "$CriticalDate" "$WarningDate" "$StationName2ScannerNameJsonFile" > "$CachedScansJsonFile"
fi

if [ ! -s "$CachedScansJsonFile" ]
then
    echo "${CmdName} : could not cache scans in '$CachedScansJsonFile'" 1>&2
    exit 1
fi

for Scanner in "$@"
do
    Msg=$(checkScannerHeartbeat "$CachedScansJsonFile" "$Scanner" "$StationName2ScannerNameJsonFile" "$DeviceId2ScannerNameJsonFile" $CheckType)
    ExitCode="$?"

    echo "$Msg"
done

[ -n "$LeaveTmpFiles" ] || rm "$CachedScansJsonFile"

exit "$ExitCode"
	
