#!/bin/bash

CmdName=$(basename "$0")
Syntax="${CmdName} [-c YYYY-MM-DD][-g GroupId][-m YYYY-MM-DD][-n][-p ProjectLabel][-w YYYY-MM-DD][-v] [Scanner]" 

FwDir=$(dirname $(dirname $(realpath $(which "$0"))))

export PATH="${PATH}:${FwDir}/bin"
export PYTHONPATH="${FwDir}/lib"

ScannerMapJsonFile="${FwDir}/etc/ScannerMap.json"
ScannerStationNamesJsonFile="${FwDir}/etc/ScannerStationNames.json"

function sys {
    [ -n "${opt_n}${opt_v}" ] && echo "$@" 1>&2
    [ -n "$opt_n" ] || "$@"
}

function getScanSessionAfterJson {
	local Scanner="$1"
	local GroupId="$2"
	local ProjectLabel="$3"
	local MonthAgoDate="$4"

	if [ "$Scanner" = "PAV10" ]
	then
		ScannerStationNames=(
			 $(jq -r --argjson Scanner "\"$Scanner\"" 'to_entries[] | select(.value == $Scanner) | .key' $ScannerStationNamesJsonFile)
	        )

		for ScannerStationName in "${ScannerStationNames[@]}"
		do
			sys fwsearch -r session 'group._id = '"$GroupId"' AND project.label = '"$ProjectLabel"' AND session.created > '"$MonthAgoDate"' AND file.info.StationName = "'"$ScannerStationName"'"' | jq -r '.[]'
		done 
	else
		ScannerIds=(
			 $(jq -r --argjson Scanner "\"$Scanner\"" 'to_entries[] | select(.value == $Scanner) | .key' "$ScannerMapJsonFile")
	        )
		for i in "${ScannerIds[@]}"
		do
			sys fwsearch -r session 'group._id = '"$GroupId"' AND project.label = '"$ProjectLabel"' AND session.created > '"$MonthAgoDate"' AND file.origin.id = "'"$i"'"' | jq -r '.[]' 
		done
	fi
}

function checkScannerHeartbeat {
    local Scanner="$1"

    local ValidScanners=$(jq -r ".[]" "$ScannerMapJsonFile" "$ScannerStationNamesJsonFile" | sort -u)

	if [ -z "$Scanner" ]
	then
		echo "$Syntax" 1>&2
		echo "Scanner must be one of: " 1>&2	
		echo "$ValidScanners" 1>&2
	
		exit 1
	else
		if echo "$ValidScanners" | grep -q "$1"
		then
			Scanner="$1"
		else
			echo "$Syntax" 1>&2
			echo "'$1' not found in list of valid scanners: " 1>&2
			echo "$ValidScanners" 1>&2
	
			exit 2
		fi
	fi	
	
	CategorizedScanDatesFile=$(mktemp "/tmp/${CmdName}CategorizedScanDates${Scanner}-XXXXXX")
	[ -n "$opt_v" ] && echo "$CmdName}: CategorizedScanDatesFile = '${CategorizedScanDatesFile}'" 1>&2
	
	CategorizeCreatedDateJq='
	  ( .session.created | sub("T.*$";"") )as $CreatedDate
	| if ($CreatedDate >= $WarningDate) then
	      "Ok "
	  else if ($CreatedDate > $CriticalDate and $CreatedDate <= $WarningDate) then
	        "Warning "
	     else
	         "Critical "
	     end
	  end + $CreatedDate + " " + .session._id
	'
	getScanSessionAfterJson "$Scanner" "$GroupId" "$ProjectLabel" "$MonthAgoDate" | jq -r --argjson WarningDate "\"$WarningDate\"" --argjson CriticalDate "\"$CriticalDate\"" "$CategorizeCreatedDateJq" | sort > "$CategorizedScanDatesFile"
	
	OkCount=$(grep "Ok" "$CategorizedScanDatesFile" | wc -l)
	WarningCount=$(grep "Warning" "$CategorizedScanDatesFile" | wc -l)
	
	if [ "$OkCount" -gt 0 ]
	then
		Msg="OK - ${OkCount} scan(s) in ${GroupId}/${ProjectLabel} from ${Scanner} since ${WarningDate}"
		ReturnCode=0
	elif [ "$WarningCount" -gt 0 ]
	then
		Msg="Warning - ${WarningCount} scan(s) in ${GroupId}/${ProjectLabel} from ${Scanner} between ${CriticalDate} and ${WarningDate}"
		ReturnCode=1
	else
		LastScanSeenDate=$(grep Critical "$CategorizedScanDatesFile" | sort | tail -n 1 | cut -f 2 -d ' ')
		if [ -z "$LastScanSeenDate" ]
		then
			Msg="CRITICAL - No scans seen in ${GroupId}/${ProjectLabel} from ${Scanner} after ${MonthAgoDate}"
		else
			Msg="CRITICAL - Last scan in ${GroupId}/${ProjectLabel} from ${Scanner} seen on ${LastScanSeenDate}"
		fi
	
		ReturnCode=2
	fi
	
	echo "$Msg"
	return "$ReturnCode"
}

while getopts c:g:m:np:w:v arg
do
	case "$arg" in
	     c|g|m|n|p|w|v)
		eval "opt_${arg}='${OPTARG:=1}'"
		;;
	esac
done

shift $(($OPTIND - 1))

CriticalDate=$(date --date='3 days ago' +%Y-%m-%d)T00:00:00
[ -n "$opt_c" ] && CriticalDate="${opt_c}"
[ -n "$opt_v" ] && echo "${CmdName}: CriticalDate = '${CriticalDate}'" 1>&2

GroupId=camris
[ -n "$opt_g" ] && GroupId="$opt_g"
[ -n "$opt_v" ] && echo "${CmdName}: GroupId = '${GroupId}'" 1>&2

MonthAgoDate=$(date --date='2 months ago' +%Y-%m-%d)T00:00:00
[ -n "$opt_m" ] && MonthAgoDateDate="$opt_m"
[ -n "$opt_v" ] && echo "${CmdName}: MonthAgoDate = '${MonthAgoDate}'" 1>&2

ProjectLabel=qa
[ -n "$opt_p" ] && ProjectLabel="$opt_p"
[ -n "$opt_v" ] && echo "${CmdName}: ProjectLabel = '${ProjectLabel}'" 1>&2

WarningDate=$(date --date='1 day ago' +%Y-%m-%d)T00:00:00
[ -n "$opt_w" ] && WarningDate="${opt_w}"
[ -n "$opt_v" ] && echo "${CmdName}: WarningDate = '${WarningDate}'" 1>&2

for Scanner in "$@"
do
    Msg=$(checkScannerHeartbeat "$Scanner")
    ExitCode="$?"

    echo "$Msg"
done

exit "$ExitCode"
	
