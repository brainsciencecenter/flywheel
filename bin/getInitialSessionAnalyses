#!/usr/bin/python3

#
# get all the analysises from flywheel
# filter the analysises for specified date range
# get the session ids for those analysises
# Get the flywheel paths for those sessions sorting by group/project
# Tally project totals and group totals

# from Jeff Meier

import argparse
import csv
import flywheel
import fwgearutils
import json
import re
import sys

def progress(count, total, status=''):
    bar_len = 60
    filled_len = int(round(bar_len * count / float(total)))

    percents = round(100.0 * count / float(total), 1)
    bar = '=' * filled_len + '-' * (bar_len - filled_len)

    sys.stderr.write('%s/%s [%s] %s%s ...%s\r' % (i, total, bar, percents, '%', status))
    sys.stderr.flush()  # As suggested by Rom Ruben (see: http://stackoverflow.com/questions/3173320/text-progress-bar-in-the-console/27871113#comment50529068_27871113)


ap = argparse.ArgumentParser()

ap.add_argument('-b', '--bar-length', action='store', default=40, type=int, help='bar length')
ap.add_argument('-e', '--exhaustive', action='store_false', default=True, help='exhaustive session flag')
ap.add_argument('-l', '--limit', action='store', default=1000000, type=int, help='Flywheel cost allocation csv file')
ap.add_argument('-p', '--progressbar', action='store_true', help='show progress bar')
ap.add_argument('-v', '--verbose', action='store_true', help='verbose')
ap.add_argument('filter', nargs='?', type=str, default=None, help='arguments to fw.find()')

args = ap.parse_args()

fw = fwgearutils.getFW(args, Root=True)

if (args.filter):
  sessions = fw.get_all_sessions(exhaustive=args.exhaustive, limit=args.limit, filter=args.filter)
else:
  sessions = fw.get_all_sessions(exhaustive=args.exhaustive, limit=args.limit)

UIDs2Labels = {}

projects = fw.get_all_projects(exhaustive=args.exhaustive, limit=args.limit)

for p in projects:
    UIDs2Labels[p.id] = p.label

for s in sessions:
    UIDs2Labels[s.id] = s.label

subjects = fw.get_all_subjects(exhaustive=args.exhaustive, limit=args.limit)
for s in subjects:
    UIDs2Labels[s.id] = s.label

print("Got projects, subjects and sessions", file=sys.stderr)

maxtries = 10

l = len(sessions)
i = 0
InitialSessions = {}

for session in sessions:
    i += 1
    n = 0

    if (args.progressbar):
        progress(i, l)

    while (n < maxtries):
        n += 1
        try:
            s = session.reload()
            if (s):
                session = s
                break
            else:
                print("session reload returned None for {} ({}/{})".format(session.id, n, maxtries), file=sys.stderr)

        except (flywheel.rest.ApiException) as e:
            print("session reload failed for {} ({}/{}) ({})".format(session.id, n, maxtries, e), file=sys.stderr)
    if (n >= maxtries):
        print("session reload retries failed for {} ({}/{}), skipping".format(session.id, n, maxtries), file=sys.stderr)
        continue


    if (session.analyses):
        # *** Need to verify this is a reaped session, and not uploaded

        m = 0
        for analysis in session.analyses:
            m += 1
            while (m < maxtries):
                try:
                    a = analysis.reload()
                    if (a):
                        analysis = a
                        break
                    else:
                        print("analysis reload returned None for {} ({}/{})".format(analysis.id, n, maxtries), file=sys.stderr)
                except (flywheel.rest.ApiException) as e:
                    print("analysis reload failed for {} ({}/{})".format(session.id, n, maxtries), file=sys.stderr)
            

            if (not session.id in InitialSessions.keys()):
                if (analysis.gear_info == None):
                    print("No gear info for session {} ({})".format(session.label, session.id), file=sys.stderr)
                    continue
                else:
                    InitialSessions[session.id] = True

                    gear = analysis.gear_info.name
                    print('%s,%s,%s,%s,%s,%s,%s,%s' % (
                        analysis.created,
                        session.parents.group,
                        UIDs2Labels[session.parents.project],
                        UIDs2Labels[session.parents.subject],
                        UIDs2Labels[session.id],
                        gear,
                        session.id,
                        analysis.id,
                        ))

                    if (args.verbose):
                        print("Session {} ({}/{})".format(session.label, i, l))


