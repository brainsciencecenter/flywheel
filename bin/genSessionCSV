#!/bin/bash

CmdName=$(basename "$0")

syntax="$CmdName [-d DicomHeader[[,DicomHeader]...][-j jsonfile][-n][-p][-u][-w WorkDir] fwfindargs....]"

Epoch=1970-01-01

function sys() {
    [ -n "${opt_n}${opt_v}" ] && echo "$@" 1>&2
    [ -n "$opt_n" ] || "$@"
}

#
# *** Need to config dynamically
#
if [ -z "$FlywheelUtilsDir" ]
then
	if echo "$0" | grep -q /
	then
		FlywheelUtilsDir=$(dirname $(dirname $(realpath "$0")))
	else
		FlywheelUtilsDir=$(dirname $(dirname $(which "$0")))
	fi
fi

while getopts "d:j:npuvw:" arg 
do
	case "$arg" in
	     d|j|n|p|u|v|w)
		eval "opt_${arg}=${OPTARG:=1}"
		;;

	esac
done

shift $(($OPTIND - 1))

if [ -n "$opt_w" ]
then
    WorkDir="$opt_w"
else
    WorkDir=$(mktemp -d /tmp/genSessionCSV-XXXXX)
fi

if [ -n "$opt_d" ]
then
	DicomHeaderFields=$(echo $opt_d | sed 's/,/ /g')
else
	DicomHeaderFields="
		ImageComments
		InstitutionName
		ManufacturerModelName
		PerformedProcedureStepDescription
		ProcedureStepDescription
		PerformingPhysicianName
		ReferringPhysicianName
		RequestingPhysician
		StudyComments
		StudyDescription
	 "
fi

if [ -n "$opt_j" ]
then
	SessionJsonFile="$opt_j"
else
	SessionJsonFile="${WorkDir}/Session.json"
fi

ProgressBarFlag=""
if [ -n "$opt_p" ]
then
    ProgressBarFlag=-p
fi

if [ -n "$opt_u" ]
then
    TimeZone=""
else
    TimeZone="-l"
fi

if [ ! -e "${WorkDir}/SessionUIDs" ]
then
    if echo "$@" | grep -qP '=|<|>'
    then
	sys fwfind -S "$@" | jq -r '.[]._id' > "${WorkDir}/SessionUIDs"
    else
	sys fw2json -R "$1" | jq -r '.[].subjects[].sessions[]._id' | sort -u > "${WorkDir}/SessionUIDs"
    fi
fi

if [ -s "${WorkDir}/SessionUIDs" ]
then
	if [ -n "$opt_p" ]
	then
		(fw2json -f '\\r\\n' -s -p -ag $TimeZone $(< ${WorkDir}/SessionUIDs) > "$SessionJsonFile" ) 2>&1 | pv -l -s $(wc -l < ${WorkDir}/SessionUIDs) > /dev/null
	else
		sys fw2json -f '\\r\\n' -s -ag $Timezone $(< ${WorkDir}/SessionUIDs) > "$SessionJsonFile"
	fi

else
	echo No sessions found 1>&2
	exit 1
fi

if [ ! -e "${WorkDir}/Projects.json" ]
then
    sys fwget -1 $TimeZone $(jq -r '.parents.project' "${SessionJsonFile}" | sort -u) > "${WorkDir}/Projects.json"
fi

if [ ! -e "${WorkDir}/ProjectMap.json" ]
then
    sys jq -r '[ { (._id): (.group + "/" + .label) } ] | add' ${WorkDir}/Projects.json | jq -s 'add' > ${WorkDir}/ProjectMap.json
fi

if [ ! -e "${WorkDir}/SubjectMap.json" ]
then
    sys jq -r -L ${WorkDir} 'import "ProjectMap" as $Projects; [ . | { (.subject._id): ($Projects::Projects[][.project] + "/" + .subject.label) } ] | add' ${WorkDir}/Session.json| jq -s 'add' > "${WorkDir}/SubjectMap.json"
fi

sys genSessionAndDicomHeaderTemplate $DicomHeaderFields > "${WorkDir}/genSessionCSV.jq"

sys jq -s -r -L "${FlywheelUtilsDir}/etc" -L ${WorkDir} -f "${WorkDir}/genSessionCSV.jq" "$SessionJsonFile"

