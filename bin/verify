#!/bin/bash

CmdName=$(basename "$0")
syntax="${CmdName} {-t c|g|i|j|u} [-D YYYY-MM-DD] [-d YYYY-MM-DD] [-F] [-f {Compute|Core|Ram|Storage|Bucket|Coldline} ] [-g] [-n line[[,line]...] [-v] file"

# c = Cost Table
# g = GCP cost allocation
# i = iLab upload
# j = Jobs Report
# u = Flywheel usage allocation report

# *** Need ilab type
# *** Need a pre-filter flag

# Compute
# Instance Core
# Storage
# Buckets
# Coldline

# Print all of foo
#	 verify foo
# Print first line of foo
# 	verify -n 1p foo
# Print first line of foo twice
# 	verify -n '1p;1p' foo
# Print first line of foo, then lines 2-5 twice
# 	verify -n '1p;2,5p;2,5p' foo
# Warning:
#       verify -n '1p;2p;2p;1p' foo
# gives line 1 twice, then line 2 twice, not line 1, line 2, line 2, line 1

# *** should have a warning on Usage where different units are being combined

FlywheelDir=/home/holder/flywheel
CondorYamlFile="$FlywheelDir/etc/condor.yml"

CondorJson=$(yq -jP eval < "$CondorYamlFile" | jq .)

function getHeaderIndicies() {

    local RegEx=""
    local i=

    for i in "$@"
    do
	RegEx="${RegEx}|($i)"
    done
    RegEx="$(echo $RegEx | sed 's/^|//')"

    tr ',' '\012' | grep -P -n "^($RegEx)$" | cut -f 1 -d : | (tr '\012' ','; echo) | sed 's/,$//'
}

function filterByDates () {
    local From='.'
    local To='.'

    if [ -n "$opt_D" ]
    then
	From="$opt_D"
    fi

    if [ -n "$opt_d" ]
    then
	To="$opt_d"
    fi

    grep ",${From}[^,]*,${To}"
}

#
# SliceNDice needs a header line
#
# *** cat > "$InputFile"; getHeaderIndicies "$InputFile"; csvcut -c "$Fields" "$InputFile |
# can be replaced by
# read Headers
# getHeaderIndicies <(echo "$Headers")
# csvcut -c "$Fields" | 

function sliceNDice {
    local Fields=
    
    read HeaderLine
    
	 case "$opt_t" in
	      u)
		  # Pull days, group, project_label, session_count,total_compute_ms, total_job_count, total_storage_byte_day
		  Fields=$(echo "$HeaderLine" | getHeaderIndicies "days" "group" "project_label" "session_count" "total_compute_ms" "total_job_count" "total_storage_byte_day")

		  echo "$HeaderLine" | csvcut -c "$Fields"

		  csvcut -c "$Fields" | awk -F , '{ if ($3 != "") {print $0} }'
		  ;;

	      g)
		  Fields=$(echo "$HeaderLine" | getHeaderIndicies "Group" "Project name" "Project ID" "Service description" "SKU description" 'Labels' "Usage amount" "Usage unit" "Cost \(\\\$\)")
		  echo "$HeaderLine" | csvcut -c "$Fields"
		  csvcut -c "$Fields" | grep -v -i Promotion 
		  ;;
	      
	      c)
		  Fields=$(echo "$HeaderLine" | getHeaderIndicies "Project ID" "Service description" "SKU description" "Credit type" "Labels" "Usage amount" "Usage unit" "Cost \(\\\$\)")

		  echo "$HeaderLine" | csvcut -c "$Fields"
		  csvcut -c "$Fields" | grep -v -i Promotion | grep -v "Flywheel Gear" | grep -v '^,,' 
		  ;;

	      i)
		  Fields=$(echo "$HeaderLine" | getHeaderIndicies "service_id" "note" "service_quantity" "price" "purchased_on" "service_request_id")
		  echo "$HeaderLine" | csvcut -c "$Fields"
		  csvcut -c "$Fields"
		  ;;
	      
	      j)
		  Fields=$(echo "$HeaderLine" | getHeaderIndicies gear_name gear_version gear_category job_origin_id job_origin_type job_state job_elapsed_time_ms job_runtime_ms gcp_cpus gcp_compute_percent initial_analysis group project gcp_compute_cost)
		  echo "$HeaderLine" | csvcut -c "$Fields"
		  csvcut -c "$Fields"
		  ;;

	      *)
		  echo "$CmdName : unknown report type '$opt_t'" 1>&1
		  ;;
	 esac
}

function total {
    local Fields=
    local Header=$1

    if [ -n "$opt_v" ]
    then
	cat
    else
	read HeaderLine

	case "$opt_t" in
	    u)
		Fields=$(echo "$HeaderLine" | getHeaderIndicies days session_count total_compute_ms total_job_count total_storage_byte_day)
		if [ -n "$Header" ]
		then
		    units=gibibytes
		    if [ -n "$opt_g" ]
		    then
			units=gigabytes
		    fi
		    
		    echo "$HeaderLine" | csvcut -c "$Fields" | sed 's/days,//; s/total_compute_ms/total_compute_hours/; s/byte_day/'"$units"'/'
		else
		    ByteDenominator="1024.0/1024.0/1024.0"
		    if [ -n "$opt_g" ]
		    then
			ByteDenominator="1000.0/1000.0/1000.0"
		    fi
		    HourDenominator="1000.0/3600.0"

		    units=gibibytes
		    if [ -n "$opt_g" ]
		    then
			units=gigabytes
		    fi

		    echo "$HeaderLine" | csvcut -c "$Fields" | sed 's/days,//; s/total_compute_ms/total_compute_hours/; s/byte_day/'"$units"'/'
		    csvcut -c "$Fields" | awk -F , 'BEGIN { Sessions = 0.0; MS = 0.0; Jobs = 0.0; Bytes = 0.0;} { Sessions = Sessions + $2; MS = MS + $3; Jobs = Jobs + $4; Bytes = Bytes + ($5 / $1); } END { printf("%.2f,%.2f,%.2f,%.2f\n",Sessions, MS/'"$HourDenominator"', Jobs, Bytes/'"$ByteDenominator"'); }'
		fi
		
		;;

	    c)
		Fields=$(echo "$HeaderLine" | getHeaderIndicies "Usage amount" "Cost \(\\\$\)")
		if [ -n "$Header" ]
		then
		    echo "$HeaderLine" | csvcut -c "$Fields" 
		else
		    echo "$HeaderLine" | csvcut -c "$Fields" 

		    csvcut -c "$Fields" | awk -F , 'BEGIN {Usage = 0.0; Cost = 0.0;} { Usage = Usage + $1; Cost = Cost + $2; } END {printf("%.2f,%.2f\n",Usage,Cost) }'
		fi
		
		;;

	    g)
		Fields=$(echo "$HeaderLine" | getHeaderIndicies "Usage amount" "Cost \(\\\$\)")
		if [ -n "$Header" ]
		then
		    echo "$HeaderLine" | csvcut -c "$Fields" 
		else
		    echo "$HeaderLine" | csvcut -c "$Fields" 
		    csvcut -c "$Fields" | awk -F , 'BEGIN {Usage = 0.0; Cost = 0.0;} { Usage = Usage + $1; Cost = Cost + $2; } END {printf("%.2f,%.2f\n",Usage,Cost) }'
		fi
		;;
		
	    i)
		Fields=$(echo "$HeaderLine" | getHeaderIndicies 'service_quantity' 'price' )
		if [ -n "$Header" ]
		then
		    echo "$HeaderLine" | csvcut -c "$Fields" 
		else
		    echo "$HeaderLine" | csvcut -c "$Fields" 
		    csvcut -c "$Fields" | awk -F , 'BEGIN {Quantity = 0.0; Cost = 0.0;} { Quantity = Quantity + $1; Cost = Cost + $2; } END {printf("%.2f,%.2f\n",Quantity,Cost) }'
		fi
		;;
		
	    j)
		Fields=$(echo "$HeaderLine" | getHeaderIndicies job_state job_runtime_ms gcp_cpus gcp_compute_percent initial_analysis gcp_compute_cost)
		if [ -n "$Header" ]
		then
		    echo "$HeaderLine" | csvcut -c "$Fields" | sed 's/job_state/job_count/; s/job_elapsed_time_ms,gcp_cpus/gcp_compute_hours/'
		else
		    echo "$HeaderLine" | csvcut -c "$Fields" | sed 's/job_state/job_count/; s/job_elapsed_time_ms,gcp_cpus/gcp_compute_hours/'
		    csvcut -c "$Fields" | awk -F , 'BEGIN {JobCount = 0.0;  MS = 0.0; GCPPercent = 0.0; InitialAnalysis = 0.0; GCPComputeCost = 0.0;} {if ($1 == "complete") {JobCount = JobCount + 1}; MS = MS + $2 * $3; GCPPercent = GCPPercent + $4; if ($5 == "True" || $5 == "TRUE") {InitialAnalysis = InitialAnalysis + 1}; GCPCost = GCPCost + $6; } END { printf("%d,%.2f,%.2f,%d,%.2f\n",JobCount,MS/1000.0/3600.0,GCPPercent,InitialAnalysis,GCPCost); }'
		fi
		;;

	esac
    fi
    
}

#
# Removed internal commas and unquotes fields
#  a,b,"1,234",c => a,b,1234,c
#
function deCommafie {
	 # From https://unix.stackexchange.com/questions/48672/remove-comma-between-the-quotes-only-in-a-comma-delimited-file
	 awk -F'"' -v OFS='' '{ for (i=2; i<=NF; i+=2) gsub(",", "", $i) } 1'
}

function allOrFlywheel {
    local RegEx

    # the regex is after the first set of csvcut in sliceNDice
    if [ "$opt_t" == c ]
    then
	RegEx='^upenn-flywheel,'
    else
	RegEx=',upenn-flywheel,'
    fi
    
    if [ -n "$opt_F" ]
    then
	grep "$RegEx"
    else
	cat
    fi
}

function filter {
    local Header

    read Header

    echo "$Header"

    case "$opt_t" in
	c|g)
	    case "$opt_f" in
		Bucket*)
		    allOrFlywheel | grep 'Cloud Storage' | grep 'Standard Storage' 
		    ;;

		Coldline)
		    allOrFlywheel | grep 'Cloud Storage' | grep Coldline | grep Multi
		    ;;

		Misc)
		    allOrFlywheel | grep -v -P '(Kubernetes)|(Cloud Storage)|(Flywheel Gear)|(Instance Core)|(Small Instance)|(PD Capacity)|(Instance Ram)|(GPU running)|(Storage Image)|(Storage Machine Image)|(Storage PD)'
		    ;;

		MiscStorage)
		    allOrFlywheel | grep 'Cloud Storage' | grep -v -P 'Standard Storage|Coldline Storage'
		    ;;

		Compute)
		    allOrFlywheel | grep 'Compute Engine'
		    ;;

		Core)
		    allOrFlywheel | grep 'Compute Engine' | grep 'Instance Core'
		    ;;

		Gcp)
		    allOrFlywheel | grep -v 'Flywheel Gear'
		    ;;

		Gear)
		    allOrFlywheel | grep 'Flywheel Gear'
		    ;;

		Kubernetes)
		    allOrFlywheel | grep 'Kubernetes'
		    ;;
		
		Ram)
		    allOrFlywheel | grep 'Compute Engine' | grep 'Instance Ram'
		    ;;

		Static)
		    allOrFlywheel | grep 'flywheel:infrastructure'
		    ;;

		Static-Core)
		    allOrFlywheel | grep 'flywheel:infrastructure' | grep 'Core'
		    ;;

		Storage)
		    allOrFlywheel | grep 'Cloud Storage'
		    ;;

		VM)
		    allOrFlywheel | grep -P 'Instance Core|Small Instance|PD Capacity|Instance Ram'
		    ;;

		*)
		    allOrFlywheel
		    ;;
	    esac
	    ;;

	u|i|j)
	    grep -P "$opt_f" 
	    ;;

	*)
	    cat
	    ;;
    esac
}

opt_n='1,$p'

while getopts D:d:Ff:gn:t:v arg
do
	case "$arg" in
	     D|d|F|f|g|t|v)
		 eval "opt_${arg}='${OPTARG:=1}'"
		;;
	     n)
		 opt_n="${OPTARG}"
		 ;;
	esac
done


shift $(($OPTIND - 1))

SourceFile="$1"

#head -n 1 "$SourceFile" | sliceNDice | total "header"

sed -n "${opt_n}" "$SourceFile" | filterByDates | sliceNDice | deCommafie | filter | total
#sed -n "${opt_n}" "$SourceFile" | filterByDates | sliceNDice | deCommafie | filter | total
