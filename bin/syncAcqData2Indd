#!/bin/bash

CmdName=$(basename "$0")
FwDir=$(dirname $(dirname $(which "$0")))
FwLib="${FwDir}/lib"

#
# syncAcqData2Indd -d corlab/Unsorted -c corelab-Unsorted-CachedFwAcquisitions.json corelab/Unsorted
# syncAcqData2Indd -Q -d corlab/Unsorted -c corelab-Unsorted-CachedFwAcquisitions.json corelab/Unsorted

syntax="${CmdName} [-a AcquisitionIds][-c CachedAcquisitionJsonFile][-d TmpDir][-f][-m][-n][-Q][-v] [Group/Project [other fw.find option]...]"

CmdPath=""
if echo "$0" | grep -q /
then
    CmdPath=$(realpath "$0")
else
    CmdPath=$(which "$0")
fi

function sys {
    [ -n "${opt_n}${opt_v}" ] && echo "$@" 1>&2
    [ -n "$opt_n" ] || "$@"
}

FwDir=$(dirname $(dirname "$CmdPath"))

FwAcqData2InddJqFile="$FwDir/lib/Fw2InddScanInfo.jq"

FieldsCommon=(
        'INDDID'
	'FlywheelProjectLabel'
        'FlywheelSubjectLabel'
        'FlywheelSessionTimestampUTC'
        'FlywheelSessionURL'
        'FlywheelSessionId'
	'FlywheelSessionLabel'
	'FlywheelSessionTags'
	'FlywheelSessionNotes'
        'FlywheelProjectId'
        'FlywheelAcquisitionLabel'
	'FlywheelAcquisitionType'
	'FlywheelAcquisitionSize'
        'FlywheelAcquisitionIntent'
        'FlywheelAcquisitionMeasurement'
        'FlywheelAcquisitionFeatures'
        'FlywheelAcquisitionId'
        'AcquisitionTimestampUTC'
        'DicomModality'
        'DicomInstitutionName'
        'DicomStationName'
        'DicomBodyPartExamined'
        'DicomStudyInstanceId'
        'DicomSeriesInstanceId'
        'DicomSliceThickness'
        'DicomPixelSpacingX'
        'DicomPixelSpacingY'
	'ICV'
	'LeftHippocampusVolume'
	'RightHippocampusVolume'
#	'AshsJobId'
#	'AshsJobUrl'
#	'AshsJobDateTime'
)

FieldsMisc=(
	'AcquisitionFileName'
	'AcquisitionFileId'
	'BidsNoBids'
)

FieldsBidsUnique=(
	'BidsAcq'
	'BidsCe'
	'BidsDir'
	'BidsTrc'
	'BidsEcho'
	'BidsFilename'
	'BidsFolder'
	'BidsIntendedFor'
	'BidsMod'
	'BidsModality'
	'BidsPath'
	'BidsRec'
	'BidsRun'
	'BidsTask'
	'BidsErrorMessage'
	'BidsIgnore'
	'BidsTemplate'
	'BidsValid'
)

    # Add:
    #   number of TRs
    #   duration of scan (how?) 
    #   make sure time is in correct time zone
    #   Echo Number
    #   Phase Encode Direction

FieldsMriUnique=(
        'DicomMagneticFieldStrength'
        'DicomSequenceName'
        'DicomRepetitionTime'
        'DicomEchoTime'
        'DicomEchoNumbers'
        'DicomFlipAngle'
        'DicomNumberOfAverages'
        'DicomAcquisitionNumber'
        'DicomSpacingBetweenSlices'
)

    # Tracer used
    # ReconstructionMethod
    # ScatterCorrectionMethod
    # Attenuation Correction Method
    # Isotope?
FieldsPetUnique=(
        'DicomReconstructionMethod'
        'DicomScatterCorrectionMethod'
        'DicomAttenuationCorrectionMethod'
        'DicomRadiopharmaceutical'
        'DicomRadionuclide'
)

FieldsAll=$( echo "${FieldsCommon[@]}" "${FieldsMisc[@]}" "${FieldsBidsUnique[@]}" "${FieldsMriUnique[@]}" "${FieldsPetUnique[@]}" | sed 's/ /,/g' )
FieldsMri=$( echo "${FieldsCommon[@]}" "${FieldsMriUnique[@]}" | sed 's/ /,/g' )
FieldsPet=$( echo "${FieldsCommon[@]}" "${FieldsPetUnique[@]}" | sed 's/ /,/g' )
FieldsBids=$( echo "FlywheelAcquisitionId ${FieldsBidsUnique[@]}" | sed 's/ /,/g' )

#
# -a comma or space separated list of acquisition ids to retrieve from flywheel
# -c cached acquisition json file with details of the acquisitions
# -f Overwrite all temp files
# -m messy -- don't remove the temporary directory
# -n Print the list of AcquisitionIds to be retrieved but don't actually retrieve any 
# -d specify the temporary diretory to use.  Creates one with mktemp by default.  Implies -m
#   if -c is supplied, will only retrieve acquisitions not in the cached acquisisition json file
# -Q quick, don't bother syncing the json file
# Group/Project The group/project path to retrieve acquisitions from -- ignored if -a is specified
# fw.find options arguments to fw.find for refining search -- ignored if -a is specified
#
# Intened use is to run
#   syncAcqData2Indd -c Nacc-ScAcquisitions.json dwolklab/NACC-SC
# to generate a complete list of all acquisition ids in dwolklab/NACC-SC, then compare the acquisition id list
# to the one in the cached AcquisitionJsonFile and retrieve any missing acquisitions
# 
# This can be sped up by specifying additional restrictions on the acquisition search
#   syncAcqData2Indd -c Nacc-ScAcquisitions.json dwolklab/NACC-SC 'created>2021-05-01' 'created<2021-06-01'
# to constrain the list of new acquisitions to May, 2021
#
# If you know which acquisitions you want to retrieve:
#   syncAcqData2Indd -a 1,2,3,4
# or
#   syncAcqData2Indd -a "1 2 3 4"
# to retrieve acquistion with ids of 1, 2, 3, and 4
#
# The fw.find options can be used to constrain the search to specific projects, subjects, or sessions

#
# Want to pass in fw.find args to limit date
# Want to be able to passin explicit list of acquisition args to get
# 

while getopts a:c:d:fmnQv arg
do
	case "$arg" in
	     a|c|d|f|m|n|Q|v)
		eval "opt_${arg}='${OPTARG:=1}'"
		;;
	esac
done

shift $(($OPTIND - 1))

if [ -n "$opt_d" ]
then
	TmpDir="$opt_d"
	opt_m=1
else
	TmpDir=$(mktemp -d "${TMPDIR:=/tmp}/${CmdName}-XXXXXX")
fi

if [ -n "$opt_m" ]
then
    DeleteTmpDir=False
else
    DeleteTmpDir=True
fi


if [ -z "$1" ]
then
    if [ -z "$opt_a" ]
    then
	echo "${CmdName} : Missing Group/Project or AcquisitionIds list" 1>&2
	echo "${syntax}" 1>&2
	exit 1
    fi
else
    GroupProject="$1"
    Group=$(echo "$GroupProject" | cut -f 1 -d /)
    Project=$(echo "$GroupProject" | cut -f 2 -d /)

    shift

    FindArgs="$@"
fi

CmdArgs=()
if [ -n "$opt_c" ]
then
	CmdArgs+=( -c "$opt_c" )
fi

if [ -n "$opt_v" ]
then
	CmdArgs+=( -v )
fi

ProjectAllJsonFile="${TmpDir}/${Project}_all.json"
ProjectAllCsvFile="${TmpDir}/${Project}_all.csv"
ProjectMriCsvFile="${TmpDir}/${Project}_mri.csv"
ProjectPetCsvFile="${TmpDir}/${Project}_pet.csv"
ProjectBidsCsvFile="${TmpDir}/${Project}_bids.csv"

if [ -n "$opt_a" ]
then
   sys fwget -1 "$opt_a" | sys jq -r -L "$FwLib" -L "${TmpDir}" -f "$FwAcqData2InddJqFile" "$NiftiExt"
else
    rm -f "$ProjectAllCsvFile" "$ProjectAllCsvFile" "$ProjectAllCsvFile" "$ProjectAllCsvFile"


    # Just grab the keys - csvcut at the end cleans up the headers
    # don't generate the json here.  Do it in the next append part.
    jq -r -L "$FwLib" -L "${TmpDir}" -f "$FwAcqData2InddJqFile" "$opt_c" | jq -r -n 'first( inputs | keys | @csv)' > "$ProjectAllCsvFile"

    # format the dict for just values into csv
    jq -r -L "$FwLib" -L "${TmpDir}" -f "$FwAcqData2InddJqFile" "$opt_c" | tee "$ProjectAllJsonFile" | jq -r '[ (keys[]) as $k | .[$k] ] | @csv' >> "$ProjectAllCsvFile"

    #
    # Greping out MR or PT loses the header line.
    # Don't want to sort the header line to the somewhere besides the first line
    #
    echo "$FieldsMri" > "$ProjectMriCsvFile"
    (
	head -n 1 "$ProjectAllCsvFile"
	grep ',"NoBids",' "$ProjectAllCsvFile" | grep ',"MR",'
    ) | csvcut -c "$FieldsMri" | tail -n +2 | sort -u >> "$ProjectMriCsvFile"

    echo "$FieldsPet" > "$ProjectPetCsvFile"
    (
	head -n 1 "$ProjectAllCsvFile"
	grep ',"NoBids",' "$ProjectAllCsvFile" | grep ',"PT",' 
    ) | csvcut -c "$FieldsPet" | tail -n +2 | sort -u >> "$ProjectPetCsvFile"
																			     
    echo "$FieldsBids" > "$ProjectBidsCsvFile"
    (
	head -n 1 "$ProjectAllCsvFile"
	grep ',"Bids",' "$ProjectAllCsvFile"
    ) | csvcut -c "$FieldsBids" | tail -n +2 | sort -u >> "$ProjectBidsCsvFile"

fi

if [ "$DeleteTmpDir" == True ]
then
	rm -rf "$TmpDir"
fi
