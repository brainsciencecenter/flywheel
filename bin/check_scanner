#!/bin/bash

CmdName=$(basename "$0")

Syntax="${CmdName} [-c CriticalDaysAgo][-l][-n][-w WarningDaysAgo][-v] [Scanner [...]]"

function sys {
    [ -n "${opt_n}${opt_v}" ] && echo "$@" 1>&2
    [ -n "$opt_n" ] || "$@"
}

while getopts 'c:nw:v' arg
do
	case "$arg" in
	     c|n|w|v)
	         eval "opt_${arg}='${OPTARG:=1}'"
		 ;;
	esac
done

shift $(( "$OPTIND" - 1  ))

FlywheelDir=$(dirname $(dirname $(which fwfind)))
ScannerMapJsonFile="${FlywheelDir}/etc/ScannerMap.json"

CriticalDate=$(date -d '5 days ago' +%Y-%m-%d)
WarningDate=$(date -d '3 days ago' +%Y-%m-%d)

TmpDir=$(sys mktemp -d "${TMPDIR:=/tmp}/${CmdName}-XXXXXX")

AcquisitionJsonFile="${TmpDir}/Acquisitions.json"
ProjectId2LabelsJsonFile="${TmpDir}/ProjectId2Labels.json"

[ -e "$AcquisitionJsonFile" ] || sys fwfind -1 -alr 'created>'"$CriticalDate" > "$AcquisitionJsonFile"
[ -e "$ProjectId2LabelsJsonFile" ] || (jq -r '.parents.project' "$AcquisitionJsonFile" | sort -u | fwget -1 | jq -r -s '[ .[] | { (._id): (.label) }] | add'  > "$ProjectId2LabelsJsonFile")

CheckScannerJq='
      .parents.group as $Group
    | .files[]
        | (.created | sub("\\+.*$";"") | sub("T.*$";"")) as $FileCreated
	| ($ProjectId2Label[][.parents.project]) as $ProjectLabel
	| select(.origin.type == "device") | ($DeviceId[][.origin.id]) as $ScannerName
	| (if ($FileCreated > $WarningDate) then
	     "OK"
	  else
	     if ($FileCreated > $CriticalDate) then
	         "WARNING"
            else
	         "CRITICAL"
            end
	  end) as $CheckState
	| [ $ScannerName, $CheckState, $FileCreated, $Group, $ProjectLabel ] | @csv'

ScanStatusCsvFile="${TmpDir}/ScanStatus.csv"
jq --argjson CriticalDate "\"$CriticalDate\"" --argjson WarningDate "\"$WarningDate\"" --slurpfile ProjectId2Label "$ProjectId2LabelsJsonFile" --slurpfile DeviceId "$ScannerMapJsonFile" -r "$CheckScannerJq" "$AcquisitionJsonFile" | sort > "$ScanStatusCsvFile"

ValidScanners=$(jq -r '.[]' "$ScannerMapJsonFile" | sort -u)
if [ -n "$1" ]
then
	Scanners="$@"
else
	Scanners=$(echo "$ValidScanners" | grep -v 'flywheel')
fi

for Scanner in $Scanners
do
	Msg="Warning - ${Scanner} had no scans since ${CriticalDate}"
	ExitCode=2

	if [ -z $(echo "$ValidScanners" | grep "$Scanner") ]
	then
		echo "${CmdName} : '${Scanner}' not one of valid scanners '$ValidScanners'" 1>&2
		continue
	fi
	
	ScannerStateCount=$(grep "$Scanner" "$ScanStatusCsvFile" | csvcut -c 1,2 | sort | uniq -c | sort -n)
	NumOk=$(echo "$ScannerStateCount" | grep OK | sed -E 's/^ *([0-9]+).*$/\1/')
	NumWarning=$(echo "$ScannerStateCount" | grep WARNING | sed -E 's/^ *([0-9]+).*$/\1/')
	NumCritical=$(echo "$ScannerStateCount" | grep CRITICAL | sed -E 's/^ *([0-9]+).*$/\1/')
	if [ -n "$NumOk" ]
	then
		Msg="OK - ${Scanner} had ${NumOk} scans since ${WarningDate}"
		ExitCode=0		
	elif [ -n "$NumWarning" ]
	then
		Msg="Warning - ${Scanner} had ${NumWarning} scans from ${CriticalDate} to ${WarningDate}"
	fi
	echo "$Msg"
done

[ -n "$opt_l" ] || sys rm -rf "$TmpDir"

exit "$ExitCode"