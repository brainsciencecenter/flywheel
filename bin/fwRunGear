#!/usr/bin/env python3

import argparse
import fwgearutils
import flywheel
import json
import logging
import os
import pyjq
import re
import sys
import time
from datetime import datetime


def runGear(gear, inputs=None, dest=None, config={}, tags=None):
   """Submits a job with specified gear and inputs.
    
   Args:
        gear (flywheel.Gear): A Flywheel Gear.
        inputs (dict): Input dictionary for the gear.
        dest (flywheel.container): A Flywheel Container where the output will be stored.
        
   Returns:
        str: The id of the submitted job.

   Examples:

        fwRunGear  -g dcm2niix -i dcm2niix_input dwolklab/NACC/1234/1234-3T/files/foo.dicom
        fwRunGear  -g dicom-mr-classifier -i dicom dwolklab/NACC/1234/1234-3T/files/foo.dicom
        fwRunGear  -g dicom-mr-classifier -i dicom <InputFileUuid> [ ... ]
        fwRunGear  -g ashs -i T1w <T1InputFileUuid> -i T2w <T2InputFileId> -c '{"ASHS_Atlases": "ASHS-PMC-T2"}'
        fwRunGear  -g zip-audit-logs cfn/pmc_exvivo
        fwRunGear  -g necktrim -i file  66e4743cf671b87d3bce278d
        fwRunGear  -g ashsharpicv -i dicom 675f2c7cd91310e6c4fcca51 -c '{"Age": "32" }'
        fwRunGear -w -g 'aloha' -c '{"MachineSize": "supersize", "Stages": "VerifyAlohaInputs,RunAloha"}' -i input-file 6740a5908c6dfc43b3cbb871
        fwRunGear -d -g bids-fmriprep -i 'freesurfer_license_file' cnds/DECODE/files/license.txt -c '{"ignore": "slicetiming", "output_spaces": "MNI152NLin6Asym", "skip-bids-validation": true, "use-aroma": true}' -D project 
        fwRunGear -v  -g xcpengine-fw -i fmriprepdir  63f586e3fdaef23d6ee817d7  -i designfile 63c07a6c93e165574b08071e -c '{  "analysis_type": "fc",  "session": "01",  "space": "MNI152NLin2009cAsym",  "task_name": "" }' # The first input tells fwRunGear which session to look for input and where to store the output.
        
   """

   try:
        # Run the gear on the inputs provided, stored output in dest constainer and returns job ID

       if (gear.category == "analysis"):
          now = datetime.now()
          if (args.label):
             analysis_label = ( args.label )
          else:
             analysis_label = (
                f'{gear.gear.name} {now.strftime("%m-%d-%Y %H:%M:%S")} SDK launched'
             )

          if (args.verbose or args.debug or args.noop):
             print("{} : gear.run(analysis_label={},config={},tags={},inputs={},destination={})".format(
                CmdName,analysis_label,config,tags,inputs,dest['_id']), file=sys.stderr),

          if (not args.noop):
             gear_job_id = gear.run(
                analysis_label=analysis_label,
                config=config,
                tags=tags,
                inputs=inputs,
                destination=dest)
             logging.debug('Submitted job %s', gear_job_id)
             return gear_job_id

       else:
          if (args.verbose):
             print("{} : gear.run(config={},tags={},inputs={},destination={})".format(
                CmdName,config,tags,inputs,dest.id), file=sys.stderr),

          if (not args.noop):
             gear_job_id = gear.run(
                config=config,
                inputs=inputs,
                tags=tags,
                destination=dest)
             logging.debug('Submitted job %s', gear_job_id)
             return gear_job_id

   except flywheel.rest.ApiException:
        logging.exception('An exception was raised when attempting to submit a job for %s', file_obj.name)

if __name__ == '__main__':

    CmdName = os.path.basename(sys.argv[0])

    logging.basicConfig(format='%(message)s')

    ap = argparse.ArgumentParser()
    ap.add_argument('-c', '--config', action='store', default='{}', help='config json string. Defaults to "{}"')
    ap.add_argument('-d', '--debug', default=False,  action='store_true', help='debug')
    ap.add_argument('-g', '--gear-name', required=True, action='store', help='gear name')
    ap.add_argument('-i', '--input-key', action='append', nargs=2, metavar=("input_name", "input_value"), help='gear input key')
    ap.add_argument('-L', '--label', action='store', help='Job Label')
    ap.add_argument('-l', '--show-log', default=False, action='store_true', help='Dump log at the end of the job')
    ap.add_argument('-n', '--noop', default=False, action='store_true', help='do not actually submit the job')
    ap.add_argument('-D', '--destination-container', default=False,  action='store', help='container to store output.  Usually the job for analysis gear, or the acquisition for utility gears, but may want to store output in a subject or project.  May be FlywheelId or flywheel path, or analysis, acquisition, session, subject, project, group')
    ap.add_argument('-o', '--output-file-info', default=False,  action='store_true', help='print output file ids')
    ap.add_argument('-q', '--quiet', default=False, action='store_true', help='do not print the job id')
    ap.add_argument('-t', '--tags', required=False, default=None, action='store', help='comma separated gear tags')
    ap.add_argument('-V', '--version', action='store', help='gear version to run')
    ap.add_argument('-v', '--verbose', action='store_true', help='verbose')
    ap.add_argument('-w', '--wait', default=False,  action='store_true', help='wait for job completion')

#    ap.add_argument('acqfilepaths', nargs='*', type=str, action='store', help='acquisition filename paths')
    #ap.add_argument(metavar='AcqFile', nargs='+',  dest='acqfiles',  type=str, default=None, help='AcquisitionFileName pairs')

    args = ap.parse_args()

    if (args.input_key):
       InputArgs = pyjq.all('[.[]|{(.[0]): .[1]}] | add ',args.input_key)[0]
    else:
       InputArgs = None
    Version = args.version

    fw = fwgearutils.getFW(args)
    if (not fw):
        print("%s : unable to initialize flywheel object" % (CmdName), file=sys.stderr)
        sys.exit(1)

    # *** should check if the gear isn't found
    if (args.version):
       gear = fw.lookup('gears/{}/{}'.format(args.gear_name,args.version))
    else:
       gear = fw.lookup('gears/{}'.format(args.gear_name))

    inputs={}
    if (InputArgs):
       for InputKey, InputValue in InputArgs.items():

          if (re.search('/',InputValue)):
             try:
                inputs[InputKey] = fw.lookup(InputValue)
             except (flywheel.rest.ApiException) as e:
                print("{} : No such acquisition '{}'".format(CmdName,InputValue), file=sys.stderr)

          else:          
             try:
                inputs[InputKey] = fw.get(InputValue)
             except (flywheel.rest.ApiException) as e:
                inputs[InputKey] = fw.get_file(InputValue)
             except (flywheel.rest.ApiException) as e:
                print("{} : No such flywheel Id '{}'".format(CmdName,InputValue), file=sys.stderr)
                sys.exit(2)

          # *** just because we have a container doesn't mean we know where the output goes !
          file_obj = inputs[list(inputs.keys())[0]]

          if (args.debug):
            print("type(file_obj) = '{}', file_obj = '{}'".format(type(file_obj), file_obj), file=sys.stderr)
    
    # destination containers default to the session for analysis gears and the acquisition for utility ones
    if (args.destination_container):
       if (args.debug):
          print(args.destination_container, file=sys.stderr)

       if (re.search('/',args.destination_container)):
             try:
                dest = fw.lookup(args.destination_container)
             except (flywheel.rest.ApiException) as e:
                print("{} : Cannot find flywheel object for '{}'".format(CmdName,args.destination_container), file=sys.stderr)
                sys.exit(2)
       else:
          ObjId = eval("file_obj.parents.{}".format(args.destination_container))
          if (args.debug):
             print("ObjId = '{}'".format(ObjId), file=sys.stderr)

          dest = fw.get(ObjId)
    elif (gear.category == "analysis"):
       dest = fw.get(file_obj.parents.session)
    else:
       dest = fw.get(file_obj.parents.acquisition)

    if (args.debug):
       print("dest = '{}'".format(dest), file=sys.stderr)

    if (args.tags and len(args.tags) > 0):
       tags = args.tags.split(",")
    else:
       tags = None

    Config=json.loads(args.config)

    if (args.debug):
       print("Config = '{}'".format(Config), file=sys.stderr)

    if (args.input_key):
        job_id = runGear(gear,inputs=inputs, dest=dest, config=Config, tags=tags)
    else:
        job_id = runGear(gear, dest=dest, config=Config, tags=tags)


    if (not args.quiet):
       print("{}".format(job_id))

    if (args.wait):
       count = 0
       state=None
       while True:
          count = count + 1
          time.sleep(5)
          job_info = fw.get_job(job_id)
          if (args.debug):
             print("{} : {} Job {} status {}".format(CmdName, count, job_id, job_info.state), file=sys.stderr)
          if (job_info.state != state):
             state = job_info.state
             if (args.verbose):
                print("{} : {}".format(CmdName,job_info.state), file=sys.stderr)

          if (job_info.state == 'complete' or job_info.state == "failed" or job_info.state == "cancelled"):

             if (args.show_log):
                print(fw.get_job_logs(job_id), file=sys.stderr)

             if (job_info.state == 'complete' and args.output_file_info):
                print(*pyjq.all('.outputs[] | [ .name, .file_id ] | @csv', fwgearutils.sloppyCopy(job_info)), sep="\n")

             break
