#!/usr/bin/python3

import argparse
import fwgearutils
import flywheel
import json
import logging
import os
import pyjq
import re
import sys
import time
from datetime import datetime


def runGear(gear, inputs=None, dest=None, config={}, tags=None):
   """Submits a job with specified gear and inputs.
    
   Args:
        gear (flywheel.Gear): A Flywheel Gear.
        inputs (dict): Input dictionary for the gear.
        dest (flywheel.container): A Flywheel Container where the output will be stored.
        
   Returns:
        str: The id of the submitted job.

   Examples:

        fwRunGear  -g dcm2niix -i dcm2niix_input dwolklab/NACC/1234/1234-3T/files/foo.dicom
        fwRunGear  -g dicom-mr-classifier -i dicom dwolklab/NACC/1234/1234-3T/files/foo.dicom
        fwRunGear  -g dicom-mr-classifier -i dicom <InputFileUuid> [ ... ]
        fwRunGear  -g ashs -i T1w <InputFileUuid> 
        fwRunGear  -g zip-audit-logs cfn/pmc_exvivo

   You can only submit one input at this time
        
   """

   try:
        # Run the gear on the inputs provided, stored output in dest constainer and returns job ID

       if (gear.category == "analysis"):
          now = datetime.now()
          if (args.label):
             analysis_label = ( args.label )
          else:
             analysis_label = (
                f'{gear.gear.name} {now.strftime("%m-%d-%Y %H:%M:%S")} SDK launched'
             )

          if (args.debug):
             print("{} : gear.run(analysis_label={},config={},tags={},inputs={},destination={})".format(
                CmdName,analysis_label,config,tags,inputs,dest['_id']), file=sys.stderr),

          if (not args.noop):
             gear_job_id = gear.run(
                analysis_label=analysis_label,
                config=config,
                tags=tags,
                inputs=inputs,
                destination=dest)
             logging.debug('Submitted job %s', gear_job_id)
             return gear_job_id

       else:
          if (args.verbose):
             print("{} : gear.run(config={},tags={},inputs={},destination={})".format(
                CmdName,config,tags,inputs.file_id,dest.id), file=sys.stderr),

          if (not args.noop):
             gear_job_id = gear.run(
                config=config,
                inputs=inputs,
                tags=tags,
                destination=dest)
             logging.debug('Submitted job %s', gear_job_id)
             return gear_job_id

   except flywheel.rest.ApiException:
        logging.exception('An exception was raised when attempting to submit a job for %s', file_obj.name)


if __name__ == '__main__':

    CmdName = os.path.basename(sys.argv[0])

    logging.basicConfig(format='%(message)s')

    ap = argparse.ArgumentParser()
    ap.add_argument('-d', '--debug', default=False,  action='store_true', help='debug')
    ap.add_argument('-c', '--config', action='store', default='{}', help='config json string. Defaults to "{}"')
    ap.add_argument('-g', '--gear-name', required=True, action='store', help='gear name')
    ap.add_argument('-L', '--label', action='store', help='Job Label')
    ap.add_argument('-l', '--show-log', default=False, action='store_true', help='Dump log at the end of the job')
    ap.add_argument('-n', '--noop', default=False, action='store_true', help='do not actually submit the job')
    ap.add_argument('-i', '--input-key', action='store', help='gear input key')
    ap.add_argument('-o', '--output-file-info', default=False,  action='store_true', help='print output file ids')
    ap.add_argument('-t', '--tags', required=False, default=None, action='store', help='comma separated gear tags')
    ap.add_argument('-V', '--version', action='store', help='gear version to run')
    ap.add_argument('-v', '--verbose', action='store_true', help='verbose')
    ap.add_argument('-w', '--wait', default=False,  action='store_true', help='wait for job completion')

    ap.add_argument('acqfilepaths', nargs='*', type=str, action='store', help='acquisition filename paths')
    #ap.add_argument(metavar='AcqFile', nargs='+',  dest='acqfiles',  type=str, default=None, help='AcquisitionFileName pairs')

    args = ap.parse_args()

    InputKey = args.input_key
    Version = args.version

    fw = fwgearutils.getFW(args)
    if (not fw):
        print("%s : unable to initialize flywheel object" % (CmdName), file=sys.stderr)
        sys.exit(1)

    # *** should check if the gear isn't found
    if (args.version):
       gear = fw.lookup('gears/{}/{}'.format(args.gear_name,args.version))
    else:
       gear = fw.lookup('gears/{}'.format(args.gear_name))

    for fn in args.acqfilepaths:
#       print("'{}'".format(fn))

       if (re.search('/',fn)):
          try:
             file_obj = fw.lookup(fn)
          except (flywheel.rest.ApiException) as e:
             print("{} : No such acquisition '{}'".format(CmdName,fn), file=sys.stderr)
             continue
       else:          
          try:
             file_obj = fw.get_file(fn)
          except (flywheel.rest.ApiException) as e:
             print("{} : No such file '{}'".format(CmdName,fn), file=sys.stderr)
             continue

   # *** it is possible to specify the Acquisition instead of the acquisisition file and file_obj is a
   # list of file objects -- not what we want.
   # the path parsing should be more robust.
          if (args.debug):
             print("file_obj = '{}'".format(file_obj), file=sys.stderr)
          
       if (type(file_obj) == flywheel.models.project_output.ProjectOutput):
           dest = file_obj
       else:
           if (gear.category == "analysis"):
               dest = fw.get(file_obj.parents.session)
           else:
               dest = fw.get(file_obj.parents.acquisition)
       
       if (args.debug):
          print("dest = '{}'".format(dest), file=sys.stderr)

       if (args.tags and len(args.tags) > 0):
          tags = args.tags.split(",")

       else:
          tags = None

       Config=json.loads(args.config)

       if (args.debug):
          print("Config = '{}'".format(Config), file=sys.stderr)

       if (args.input_key):
           job_id = runGear(gear,inputs={InputKey: file_obj}, dest=dest, config=Config, tags=tags)
       else:
           job_id = runGear(gear, dest=dest, config=Config, tags=tags)

       if (args.verbose):
          print("{}: '{}'".format(fn,job_id))

       if (args.wait):
          count = 0
          while True:
             count = count + 1
             time.sleep(5)
             job_info = fw.get_job(job_id)
             if (args.debug):
                print("{} : {} Job {} status {}".format(CmdName, count, job_id, job_info.state), file=sys.stderr)
             if (job_info.state == 'complete' or job_info.state == "failed"):

                if (args.show_log):
                   print(fw.get_job_logs(job_id), file=sys.stderr)

                if (job_info.state == 'complete' and args.output_file_info):
                   print(*pyjq.all('.outputs[] | [ .name, .file_id ] | @csv', fwgearutils.sloppyCopy(job_info)), sep="\n")

                break
