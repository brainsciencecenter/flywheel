#!/bin/bash

# Need:
#  CostTable - YYYY-MM-CostTable.csv
#
# Will collect if not specified:
#  JobsReport - YYYY-MM-Jobs.csv
#  FlywheelAllocationReport.csv -- YYYY-MM-FlywheelAllocationReport.csv
#  GCPChargesWithFlywheelAllocation -- YYYY-MM-GCPChargesWithFlywheelAllocation.csv

#
# syntax
# -d Report Directory - Directory to find the cost table and where to put the other reports
# -y 4 digit year
# -m 2 digit month
# -c CostTable File path
# -a Flywheel Allocation Report File Path
# -j Jobs Report File Path
# -f overwrite found reports
# -g GCP Charges with Flywheel Allocation File Path
# -u update the Big Query database
#
# Generate the data
#    ./runnFlywheelGCPBilling 
# Verify it
# Rerun and upload
#    ./runnFlywheelGCPBilling  -u


CmdName=$(basename "$0")

FlywheelStaticLabel='billing:flywheel-static'
PromotionRegEx='PROMOTION'
iLabServiceRequestMapFile=~/flywheel/bin/iLabServiceRequestIDMap

BscGCPServiceId=472933
FlywheelMriStorageServiceRequestId=3050653


while getopts a:Cc:d:fg:i:j:m:uy: arg
do
	case "$arg" in
	     a|Cc|d|f|g|i|j|m|u|y)
		eval "opt_${arg}=${OPTARG:=1}"
		;;
	esac
done

shift $(($OPTIND - 1))

ReportDir=/tmp
[ -n "$opt_d" ] && ReportDir="$opt_d"

#
# We don't run this reports until the month has past
# so we need last month for YYYY-MM
# From: https://unix.stackexchange.com/questions/207617/how-does-the-1-month-ago-option-in-date-command-work

nowmonth=$(date +%Y-%m-15)
Year=$(date --date="$nowmonth -1 month" +'%Y')
[ -n "$opt_y" ] && Year="$opt_y"

Month=$(date --date="$nowmonth -1 month" +'%m')
[ -n "$opt_m" ] && Month="$opt_m"

NextYearMonth=$(date --date="${Year}-${Month}-15 next month" +%Y-%m)

CostTableFile="${ReportDir}/${Year}-${Month}-CostTable.csv"
[ -n "$opt_c" ] && CostTableFile="$opt_c"

if [ ! -e "$CostTableFile" ]
then
	echo "${CmdName} : cannot access CostTableFile '$CostTableFile'" 1>&2
	exit 1
fi


UsageColumn=$(csvcut -n "$CostTableFile" | grep 'Usage amount' | cut -f 1 -d :)
FlywheelTotalGCPComputeCost=$(verify -F -f Compute -t c "$CostTableFile" | csvcut -c 2 | tail -n 1)

FlywheelTotalCoreHours=$(verify -F -f Core -t c "$CostTableFile" | csvcut -c 1 | tail -n 1)
FlywheelStaticCoreHours=$(verify -F -f Static-Core -t c "$CostTableFile" | csvcut -c 1 | tail -n 1)
FlywheelDynamicCoreHours=$(echo "scale = 2; $FlywheelTotalCoreHours - $FlywheelStaticCoreHours" | bc)
FlywheelVMCost=$(verify -F -f VM -t c "$CostTableFile" | csvcut -c 2 | tail -n 1)
FlywheelStaticVMCost=$(verify -F -f Static-VM -t c "$CostTableFile" | csvcut -c 2 | tail -n 1)
FlywheelDynamicVMCost=$(echo "scale = 2; $FlywheelVMCost - $FlywheelStaticVMCost" | bc)

FlywheelAllocationReportFile="${ReportDir}/${Year}-${Month}-FlywheelAllocationReport.csv"
[ -n "$opt_a" ] && FlywheelAllocationReportFile="$opt_a"

if [ -n "$opt_f" ] || [ ! -e "$FlywheelAllocationReportFile" ]
then
	flywheelGroupAllocationReport -m "$Month" -y "$Year" "$FlywheelAllocationReportFile"
fi

FlywheelJobsFile="${ReportDir}/${Year}-${Month}-Jobs.csv"
[ -n "$opt_j" ] && FlywheelJobsFile="${opt_j}"

if [ -n "$opt_f" ] || [ ! -e "$FlywheelJobsFile" ]
then
	getJobs -aei -p -c "$FlywheelTotalGCPComputeCost" -p "created>${Year}-${Month}-01" "created<${NextYearMonth}-01" > "$FlywheelJobsFile"
fi

FlywheelJobCostAllocationFile="${ReportDir}/${Year}-${Month}-JobFWCostAllocation.csv"
if [ -n "$opt_f" ] || [ ! -e "$FlywheelJobCostAllocationFile" ]
then
    createJobFWAllocation -d "$FlywheelDynamicVMCost" -i "${Year}-${Month}" -m "$iLabServiceRequestMapFile" "$FlywheelJobsFile" > "$FlywheelJobCostAllocationFile"
fi

GCPChargesWithFlywheelAllocationFile="${ReportDir}/${Year}-${Month}-GCPChargesWithFlywheelAllocation.csv"
[ -n "$opt_g" ] && GCPChargesWithFlywheelAllocationFile="$opt_g"

if [ -n "$opt_f" ] || [ ! -e "$GCPChargesWithFlywheelAllocationFile" ]
then
	createGCPChargesFWAllocation -d "$FlywheelDynamicCoreHours" -i "${Year}-${Month}" -j "$FlywheelJobsFile" -f "$FlywheelAllocationReportFile" -m "$iLabServiceRequestMapFile" "$CostTableFile" > "$GCPChargesWithFlywheelAllocationFile"
fi

GCPGroupProjectChargesFile="${ReportDir}/${Year}-${Month}-GCPGroupProjectCharges.csv"
if [ -n "$opt_f" ] || [ ! -e "$GCPGroupProjectChargesFile" ]
then
    summarizeProjectCharges  -i "${Year}-${Month}" -f  -p "$GCPChargesWithFlywheelAllocationFile" "$FlywheelJobCostAllocationFile" > "$GCPGroupProjectChargesFile"
fi

FWGearChargeFile="${ReportDir}/${Year}-${Month}-FWGearCharge.csv"
if [ -n "$opt_f" ] || [ ! -e "$FWGearChargeFile" ]
then
    summarizeProjectCharges  -i "${Year}-${Month}" -f  -g "$GCPChargesWithFlywheelAllocationFile" "$FlywheelJobCostAllocationFile" > "$FWGearChargeFile"
fi

if [ -n "$opt_u" ]
then
    # remove old entries for this invoiceMonth
    bq query --use_legacy_sql=false 'delete from `BillingAllocation.GCPGroupProjectCharges` where InvoiceMonth = "'"${Year}-${Month}"'"';
    bq query --use_legacy_sql=false 'delete from `BillingAllocation.FWGearCharge` where InvoiceMonth = "'"${Year}-${Month}"'"';
    
    bq load --project_id pennbrain-center --skip_leading_rows 1 --noreplace --source_format=CSV BillingAllocation.FWGearCharge "$FWGearChargeFile"
    bq load --project_id pennbrain-center --skip_leading_rows 1 --noreplace --source_format=CSV BillingAllocation.GCPGroupProjectCharges "$GCPGroupProjectChargesFile"
fi

ProjectFundingFile="${ReportDir}/${Year}-${Month}-ProjectFunding.csv"
if [ -n "$opt_f" ] || [ ! -e "$ProjectFundingFile" ]
then
    getProjectInfo+BSCCharges -m "$Month" -y "$Year"  > "$ProjectFundingFile"
fi
     
iLabFlywheelBscChargesFile="${ReportDir}/${Year}-${Month}-iLabFlywheelBscCharges.csv"
if [ -n "$opt_f" ] || [ ! -e "$iLabFlywheelBscChargesFile" ]
then
    createiLabGCPChargesCSV -i -s 472933 -b -p "$ProjectFundingFile" > "$iLabFlywheelBscChargesFile" 
fi

SessionsCsvFile="${ReportDir}/${Year}-${Month}-SessionsCSV.csv"
if [ -n "$opt_f" ] || [ ! -e "$SessionsCsvFile" ]
then
    genSessionCSV -p "created>${Year}-${Month}-01" "created<${NextYearMonth}-01" > "$SessionsCsvFile"
fi

iLabFlywheelMriChargesFile="${ReportDir}/${Year}-${Month}-iLabFlywheelMriCharges.csv"
if [ -n "$opt_f" ] || [ ! -e "$iLabFlywheelMriChargesFile" ]
then
    createiLabMRIChargesCSV -s "${FlywheelMriStorageServiceRequestId}" "$SessionsCsvFile"  > "$iLabFlywheelMriChargesFile" 
fi


exit 0

for i in Bucket Coldline Misc MiscStorage Compute Core Gcp Gear Ram Static, Static-Core Storage VM
do
    CostTableValue=$(verify -F -t c -f "$i" "$CostTableFile" | csvcut -c 2 | tail -n 1)
    GCPChargesValue=$(verify -F -t g -f "$i" "$GCPGroupProjectChargesFile" | csvcut -c 3 | tail -n 1)

    Diff=$(echo "scale=2; ${CostTableValue} - ${GCPChargesValue}" | bc)

    echo "$i: ${Diff}" 1>&2
done

