#!/usr/bin/python3

import argparse
import csv
import flywheel
import fwgearutils
import json
import math
import os
import pathlib
import pyjq
import re
import sys

from pprint import pprint

CmdName = sys.argv[0]

ap = argparse.ArgumentParser()

ap.add_argument('-d', '--download-dir', action='store', help='base directory to download scans do.  Current directory is default.')
ap.add_argument('-f', '--force', action='store_true', help='force download')
ap.add_argument('-n', '--noop', action='store_true', help='do not actually do anything.')
ap.add_argument('-v', '--verbose', action='store_true', help='show what is being done')
ap.add_argument('scans', nargs='*', help='list of acquisitionsid:scanid:filenames')
args = ap.parse_args()

fw = fwgearutils.getFW(args, Root=True)

if (args.download_dir):
    BaseDownloadDir = args.download_dir + '/'
else:
    BaseDownloadDir = ""

with (open(args.scans[0], 'r') if len(args.scans) >= 1 else sys.stdin) as f:
    reader = csv.reader(f)

    for row in reader:
        print(row)
        continue

        try:
            (AcquisitionTimeStamp, SessionUid, AcquisitionUid, AcquisitionLabel, FilePath, FileUid, ClassificationMeasurement) = i.split(',')
        except (ValueError) as e:
            print("{} : bad line format '{}'".format(CmdName, i), file=sys.stderr)
        FileName = os.path.basename(FilePath)
        FileDir = BaseDownloadDir + os.path.dirname(FilePath)

        try:
            Acquisition = fw.get(AcquisitionUid)
        except (flywheel.rest.ApiException) as e:
            print("{} : acquisition '{}' not found. Skipping. '{}'".format(CmdName, AcquisitionUid, str(e.detail)), file=sys.stderr)
            continue

        ScanFile = Acquisition.get_file(FileName)
        if (not ScanFile):
            print("{} : file '{}({})' not found in acquisition '{}'. Skipping.  ".format(CmdName, FileName, FileUid, AcquisitionUid), file=sys.stderr)
            continue

        if (not os.path.isdir(FileDir)):
            if (args.noop or args.verbose):
                print("mkdir -p '{}'".format(FileDir), file=sys.stderr)

            if (not args.noop):
                pathlib.Path(FileDir).mkdir(parents=True, exist_ok=True)

        FileFullPath='{}/{}'.format(FileDir, FileName)

        if ((not os.path.isfile(FileFullPath)) or args.force):
            if (args.noop or args.verbose):
                print("download '{}' to '{}'".format(FileName, FileFullPath))

            if (args.force or (not args.noop)):
                Acquisition.download_file(FileName, "{}".format(FileFullPath))


    
