#!/opt/rh/rh-python36/root/usr/bin/python

#
# Syntax
#   fwusercrud [-n][-r][-v] {create|get|update|delete}
#      create [-c][-G group1[[,group2]...]][-f FirstName][-l LastName][-r admin|ro|rw][-s] [PennkeyName]
#   -c Create any missing groups
#   -r role admin, readonly, read/write defaults to readwrite
#   -s site admin

#
import os
import sys
import re
import argparse
import flywheel
import warnings

from pprint import pprint
from subprocess import PIPE, Popen 
from os.path import expanduser

class FW():
    args = False

    def __init__(self):
        self.UserJsonFile = expanduser("~") + "/.config/flywheel/user.json"
        self.ApiKeyFile = expanduser("~") + "/.config/flywheel/api.key"
        self.EmailDomain = 'upenn.edu'

        parser = argparse.ArgumentParser(description='Flyweel user CRUD.')
        parser.add_argument('-n', '--no-op', action='store_true', help='No-op')
        parser.add_argument('-v', '--verbose', action='store_true', help='Verbose')
        parser.add_argument('-r', '--root', action='store_true', help='Login to flywheel as root')

        subparsers = parser.add_subparsers(help='sub-command help', dest='create,get,update,delete')
        subparsers.required = True

        create_parser = subparsers.add_parser('create', help='create [-c]{-f FirstName}{-l LastName}[-g {GroupID[,GroupID]}][-s] PennkeyName')
        create_parser.add_argument('-c', '--create-groups', action='store_true', help='Create missing groups')
        create_parser.add_argument('-f', '--first-name', required=True, nargs=1, action='store', help='First Name')
        create_parser.add_argument('-g', '--group-id', nargs=1, action='store', help='Groups to add user to')
        create_parser.add_argument('-l', '--last-name', required=True, nargs=1, action='store', help='Last Name')
        create_parser.add_argument('-s', '--site-admin', nargs=1, action='store', help='Make user a site administrator')
        create_parser.add_argument('PennkeyName', nargs=1, action='store', help='PennkeyName')
        create_parser.set_defaults(func=self.create)

        retrieve_parser = subparsers.add_parser('get', help='get [-i][-l][-m][-r] [PennkeyName[ PennkeyName]...]')
        retrieve_parser.add_argument('PennkeyNames', nargs='*', help='PennkeyNames')
        retrieve_parser.set_defaults(func=self.retrieve)

        update_parser = subparsers.add_parser('update', help='update flywheel user')
        update_parser.add_argument('-d', '--disable', action='store_true', help='disable account.')
        update_parser.add_argument('-e', '--enable', action='store_true', help='enable account.')
        update_parser.add_argument('-f', '--first-name', nargs=1, action='store', help='First name')
        update_parser.add_argument('-l', '--last-name', nargs=1, action='store', help='Last Name')
        update_parser.add_argument('PennkeyName', nargs=1, action='store', help='PennkeyName')
        update_parser.set_defaults(func=self.update)

        delete_parser = subparsers.add_parser('delete', help='Delete flywheel groups')
        delete_parser.add_argument('GroupID', nargs='+', action='store', help='PennkeyNames')
        delete_parser.set_defaults(func=self.delete)

        self.Config = parser.parse_args()

        if (os.path.isfile(self.UserJsonFile)):
            self.fw = flywheel.Client()
        else:
            with open(self.ApiKeyFile) as x: ApiKey = x.read().rstrip()
            self.fw = flywheel.Client(ApiKey,root=self.Config.root)

        self.Config.func(self.Config)

    def create(self,args):
      #
      # doesn't create site admins
      # should allow putting users in groups
      # should allow reading data from a file
      #

      users = self.fw.users()
      if (re.search('@%s$' % (self.EmailDomain), args.PennkeyName[0])):
          email = args.PennkeyName[0]
      else:
          email = "%s@%s" % (args.PennkeyName[0], self.EmailDomain)

      if (list(filter(lambda u: u.id == email, users))):
        warnings.warn("User '%s' already exists" % (email))
        return(False)

      if (not args.no_op):
          self.fw.add_user(flywheel.User(firstname=args.first_name[0], lastname=args.last_name[0], email=email, id=email))

      if (args.verbose or args.no_op):
        print('create user %s %s(%s)' % (args.first_name[0], args.last_name[0], email))

      return(True)

    def retrieve(self,args):
      for user in self.fw.users():
        if (args.PennkeyNames and (not (user.id in args.PennkeyNames))):
          continue
        print("%s %s %s %s" % (user.firstname, user.lastname, user.id, user.root))


    def update(self,args):
        #user = self.fw.get(args.PennkeyName[0])
        user = self.fw.get('holder@upenn.edu')
        print(user)

    def delete(self,args):
        #
        # *** What do do if a group has projects?
        #
        existing_groups = self.fw.groups()
        for groupid in args.GroupID:
            if (not (list(filter(lambda g: g.id == groupid, existing_groups)))):
                warnings.warn("No such group '%s' to delete" % groupid)
                continue

            self.fw.delete_group(groupid)
            if (args.verbose):
                print("delete group '%s'" % (groupid))

    def sys(self,command,working_dir=''):
        '''
        sys - run a command line program. -n = no-op, -v = verbose 

        prints the command to stderr if either -n or -v are set.  
        executes the command if -n is not set.
        '''

        if (self.config.get(self.config_section,'no_op') == 'True' or self.config.get(self.config_section,'verbose') == 'True'):
            print(command,file=sys.stderr) 

        if (self.config.get(self.config_section,'no_op') == 'True'):
            return('')
        else:
            if(len(working_dir) > 0):
                res = Popen([command], cwd=working_dir, shell=True, stdout=PIPE, universal_newlines=True).communicate()[0]
            else:
                res = Popen([command], shell=True, stdout=PIPE, universal_newlines=True).communicate()[0]

            return(res)



if __name__ == '__main__':
     fw = FW();
