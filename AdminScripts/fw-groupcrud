#!/opt/rh/rh-python36/root/usr/bin/python

'''Create
  create [-l GroupLabel] GroupID

Retrieve
  get [-a][-l][GroupID[[ GroupID]...]]

  -a All groups -- login to flywheel as admin
  -l list only group labels
  -i list only GroupIDs
  -m list only members
  -r list only roles

Update
  update [-d][-l GroupLabel][-r admin|ro|rw] GroupID [PennkeyName][[ PennkeyName]...]
  role defaults to rw

  defaults to appending pennkeys to the group
  pennkey already in the group with different roles will raise a warning
  Use -f to force the new group role on a PennkeyName
  -d is for deleting PennkeyNames from the group.  Warning if the PennkeyName isnn't in the group

Delete
  delete GroupID [[ GroupID]...]
'''
import os
import sys
import re
import argparse
import flywheel

from pprint import pprint
from subprocess import PIPE, Popen 
from os.path import expanduser

class FW():
    args = False

    def __init__(self):
        self.UserJsonFile = "~/.config/flywheel/user.json"
        self.ApiKeyFile = expanduser("~") + "/.config/flywheel/api.key"

        parser = argparse.ArgumentParser(description='Flyweel group CRUD.')
        parser.add_argument('-n', '--no-op', action='store_true', help='No-op')
        parser.add_argument('-v', '--verbose', action='store_true', help='Verbose')
        parser.add_argument('-r', '--root', action='store_true', help='Login to flywheel as root')

        subparsers = parser.add_subparsers(help='sub-command help', dest='create,get,update,delete')
        subparsers.required = True

        create_parser = subparsers.add_parser('create', help='create [-l GroupLabel] GroupID')
        create_parser.add_argument('-l', '--GroupLabel', nargs=1, action='store', help='Human readable group label')
        create_parser.add_argument('GroupID', nargs=1, action='store', help='GroupID')
        create_parser.set_defaults(func=self.create)

        retrieve_parser = subparsers.add_parser('get', help='get [-i][-l][-m][-r] GroupID [[ GroupID]...]')
        retrieve_parser.add_argument('-i', '--ids', action='store_true', help='List only GroupIDs')
        retrieve_parser.add_argument('-l', '--labels', action='store_true', help='List only GroupLabels')
        retrieve_parser.add_argument('-m', '--members', action='store_true', help='List only GroupMembers')
        retrieve_parser.add_argument('-r', '--roles', action='store_true', help='List only GroupRoles')
        retrieve_parser.add_argument('GroupID', nargs='*', help='GroupID')
        retrieve_parser.set_defaults(func=self.retrieve)

        update_parser = subparsers.add_parser('update', help='update flywheel groups')
        update_parser.add_argument('-a', '--append', action='store_true', help='Append members from group.  Default')
        update_parser.add_argument('-d', '--delete', action='store_true', help='Delete members from group.  Defaults to append')
        update_parser.add_argument('-g', '--groupid', nargs=1, action='store', help='GroupID to motify.')
        update_parser.add_argument('-l', '--label', nargs=1, action='store', help='Update group label')
        update_parser.add_argument('-r', '--role', choices=['admin', 'ro', 'rw'], default='rw', nargs=1, action='store', help='Set member role.  Defaults to rw')
        update_parser.add_argument('-s', '--set', action='store_true', help='Set members of group.')
        update_parser.add_argument('PennkeyName', nargs='+', action='store', help='PennkeyName')
        update_parser.set_defaults(func=self.update)

        delete_parser = subparsers.add_parser('delete', help='Delete flywheel groups')
        delete_parser.add_argument('GroupID', nargs='+', action='store', help='GroupID')
        delete_parser.set_defaults(func=self.delete)

        self.Config = parser.parse_args()
        print(vars(self.Config))

        if (os.path.isfile(self.UserJsonFile)):
            self.fw = flywheel.Client()
        else:
            with open(self.ApiKeyFile) as x: ApiKey = x.read().rstrip()
            self.fw = flywheel.Client(ApiKey,root=self.Config.root)

        self.Config.func(self.Config)

    def create(self,args):
        print('create args:', args)

    def retrieve(self,args):
        groups = self.fw.groups()
        
        for group in sorted(groups, key=lambda k: k['_id']):
            print('%s: %s' % (group.id, group.label))
            for member in sorted(group.permissions, key=lambda k: k['_id']):
                print("	%s:%s " % (member.id, member.access))

    def update(self,args):
        print('update args:', args)
        
    def delete(self,args):
        print('delete args:', args)

    def sys(self,command,working_dir=''):
        '''
        sys - run a command line program. -n = no-op, -v = verbose 

        prints the command to stderr if either -n or -v are set.  
        executes the command if -n is not set.
        '''

        if (self.config.get(self.config_section,'no_op') == 'True' or self.config.get(self.config_section,'verbose') == 'True'):
            print(command,file=sys.stderr) 

        if (self.config.get(self.config_section,'no_op') == 'True'):
            return('')
        else:
            if(len(working_dir) > 0):
                res = Popen([command], cwd=working_dir, shell=True, stdout=PIPE, universal_newlines=True).communicate()[0]
            else:
                res = Popen([command], shell=True, stdout=PIPE, universal_newlines=True).communicate()[0]

            return(res)



if __name__ == '__main__':
     fw = FW();
