#!/bin/bash

#
# Xnat credentials are expected in ~/.netrc (man netrc for details)
# should be in the form:
# machine $hostname login $user password $password
#
# Flywheel credentials are expected in the ~/.config/flywheel/api.key file in the form of
#    $host:$apikey
# eg:
#    upenn.flywheel.io:xxxxxxxxxxx
#

cmd=$(basename $0)

syntax="$cmd [-D depth][-d dir] [-F]{-g FWGroupID}[-l][-n][-P XNATProject]{-p FlyWheelProject}[-q][-s cessionfile][-t NumberOfTransferThreads][-w NumberOfWorkerThreads][-v] [[XNATSession] ...]"

: <<=cut
=pod

=head1 NAME

xnat2fw - upload XNAT sessions to flywheel

=head1 SYNOPSIS

xnat2fw {-g FWGroupID} {-p FlyWheelProject} [-n][-P XNATProject][-q][-t NumberOfTransferThreads][-w NumberOfWorkerThreads][-v] [[XNATSession] ...]
xnat2fw {-g FWGroupID} {-p FlyWheelProject} [-F]
xnat2fw {-g FWGroupID} {-p FlyWheelProject} [-l]

=head1 DESCRIPTION

xnat2fw uploads XNAT sessions to flywheel.

=over 8

=item -F

Get list of existing Flywheel session for the given group and project.

=item -g FWGroupID

Required. Specify the flywheel GroupID to upload the XNAT sessions to.

=item -l

List the remaining XNAT sessions to upload to the given Flywheel group and project.

=item -n

No-op.  Show what would have been done, but don\'t really do anything

=item -P XNATProject

Overrides the Flywheel project specified with '-p'.
Use this to upload XNAT sessions to a different Flywheel project.

=item -p

Required.  Specify the Flywheel project to upload XNAT sessions to.

=item -q

Quiet mode.  The underlying fw command is quite chatty. This ignores any status reports from fw.

=item -t NumberOfTransferThreads

Number of Transfer Threads.  Defaults to 4.

=item -w NumberOfWorkerThreads

Number of Worker Threads.  Defaults to 2.

=item -v

Verbose.  Show what commands are being run as we go.

=back

A space list of XNAT sessions may be given to xnat2fw.  Without this list, xnat2fw will
generate a list of sessions still to be uploaded (use xnat2fw -l to see the list) and start uploading them.

=cut

#
# -P defaults to -p option
#
function sys {
	[ -n "${opt_n}${opt_v}" ] && echo "$@" 1>&2
	[ -z "$opt_n" ] && "$@"
}

function dirPath2FWPath {
    local Group="$1"
    local Path="$2"

    echo "$Group/$(echo $Path | cut -f 6,8,9 -d /)"
}

function syncDicom2FW {
        local FWGroupID="$1"

	shift

	local FWCmd
	local Project
	local Subject
	local Session
	local g

	for Path in "$@"
	do
		
		if [ ! -e "$Path" ]
		then
			echo "$cmd : No such file or directory for session '$Session' : skipping" 1>&2
			continue
		fi

		read g Project Subject Session < <(echo "$Path" | "$mapPaths2FWSessions" "$FWGroupID" "${PrefixInfo[@]}" | tr '/' ' ')

		#
		# fw -q doesn't seem to do anything  Force it.
		#	
		FWCmd=(fw import dicom -y --quiet --de-identify --jobs "$opt_w" --concurrent-uploads "$opt_t" --subject "$Subject" --session "$Session" "$Path" "$FWGroupID" "$Project")
		if [ -n "$opt_q" ]
		then
			sys "${FWCmd[@]}" > /dev/null
		else
			sys "${FWCmd[@]}"
		fi	  
	done
}

function xnatPrefix {
    local Group="$1"
    local Project="$2"

    XNATURL=http://picsl-xnat.uphs.upenn.edu
    XNATSessionID=$(curl -n -s "$XNATURL/data/JSESSION")

    HTTPCode=$(curl -b "JSESSIONID=$XNATSessionID" -s -o /dev/null -w "%{http_code}" "${XNATURL}/data/projects/${Project}")
    if [ "$HTTPCode" == 401 ]
    then
        echo "$cmd : XNAT authorization failed '$XNATURL'" 1>&2
        cleanup
        exit 1
    fi

    XNATCSVFile=$(sys mktemp /tmp/xnat2fw-XXXXX)

    sys curl -s -b "JSESSIONID=$XNATSessionID" "$XNATURL/data/archive/projects/${Project}/experiments?columns=subject_label,label&format=csv" > $XNATCSVFile

    echo "$XNATCSVFile"
}

function mapFWSessions2XNATPaths {
    BaseDir=/data/XNAT/archive

    awk -F / '{print "'"$BaseDir"'/"$2"/arc001/"$4}'    
}

# /data/XNAT/archive/NACC-SC/arc001/124287_20190124_3T => dwolklab/NACC-SC/124287/124287_20190124_3T
function mapXNATPaths2FWSessions {
    local Group="$1"
    local XNATCSVFile="$2"
    local Subject
    local Session
    
    while read line
    do
	Session=$(echo "$line" | awk -F / '{print $NF}')
	Project=$(echo "$line" | awk -F / '{print $5}')
	Subject=$(grep ",$Session," "$XNATCSVFile" | cut -f 2 -d ,)
	echo "${Group}/${Project}/${Subject}/${Session}"
    done

}

function mapFWSessions2LougheadPaths {
    BaseDir=/data/jag/bbcp/Studies
    awk -F / '{print "'"$BaseDir"'/"$2"/Subjects/"$3"/"$4}'
}

function mapLougheadPaths2FWSessions {
    local Group="$1"
    
    awk -F / '{print "'"$Group"'/"$6"/"$8"/"$9}'
}
    
function cleanup {
	 [ -e "$CleanupFile" ] && sys rm "$CleanupFile"
	 [ -n "$XNATSessionID" ] && sys curl -b "JSESSIONID=$XNATSessionID" -X DELETE "$XNATURL/data/JSESSION"
}

#
# *** Remove defaults for opt_g opt_p opt_P and verify they've been given on command line
#
opt_t=4
opt_w=2
opt_D=3

while getopts D:d:Fg:lnP:p:qs:t:w:v arg
do
	case "$arg" in 
		D|d|F|f|g|l|n|P|p|q|s|t|w|v)
			eval "opt_${arg}=${OPTARG:=1}"
			;;
	esac
done

shift $((OPTIND - 1))

# check FWgroupid/Project exists? --- let it fail

if [ -n "$opt_g" ]
then
	FWGroupID="$opt_g"
else
	echo "$cmd : Missing -g argument" 1>&2
	echo "$syntax" 1>&2
	exit 1
fi

if [ -n "$opt_p" ]
then
    FWProject="$opt_p"
else
    echo "$cmd : Missing -p argument" 1>&2
    echo "$syntax" 1>&2
    exit 1
fi

if [ -n "$opt_D" ]
then
    Depth="$opt_D"
fi

if [ -n "$opt_l" ]
then
    getFWSessions -g "$opt_g" "$opt_p"
    exit $?
fi

prefix=xnatPrefix
prefix=true

mapFWSessions2Paths=mapFWSessions2XNATPaths
mapFWSessions2Paths=mapFWSessions2LougheadPaths

mapPaths2FWSessions=mapXNATPaths2FWSessions
mapPaths2FWSessions=mapLougheadPaths2FWSessions

getDicomDirs=getDicomDirsXNAT
getDicomDirs=getDicomDirsLoughead

Paths=$("$getDicomDirs" -g "$FWGroupID" -p "$FWProject" "$@" | sort)

PrefixInfo=( $("$prefix" "$FWGroupID" "$FWProject") )

if [ -n "$opt_s" ]
then
    FWSessions=$(< "$opt_s")
else
    FWSessions=$(getFWSessions -g "$FWGroupID" "$FWProject" | sort)
fi

FWPaths=$(echo "$FWSessions" | "$mapFWSessions2Paths" "$GroupID" "${PrefixInfo[@]}")

SessionsMissingFromFlywheel=$(diff <(echo "$Paths") <(echo "$FWPaths") | grep '<' | sed 's/< //')

syncDicom2FW "$FWGroupID" "$SessionsMissingFromFlywheel"

cleanup


