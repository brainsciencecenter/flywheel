#!/bin/bash

#
# Xnat credentials are expected in ~/.netrc (man netrc for details)
# should be in the form:
# machine $hostname login $user password $password
#
# Flywheel credentials are expected in the ~/.config/flywheel/api.key file in the form of
#    $host:$apikey
# eg:
#    upenn.flywheel.io:xxxxxxxxxxx
#

cmd=$(basename $0)

syntax="$cmd [-D depth][-d dir] [-F]{-g FWGroupID}[-l][-n][-P XNATProject]{-p FlyWheelProject}[-q][-t NumberOfTransferThreads][-w NumberOfWorkerThreads][-v] [[XNATSession] ...]"

XNATBaseDir=/data/XNAT/archive

: <<=cut
=pod

=head1 NAME

xnat2fw - upload XNAT sessions to flywheel

=head1 SYNOPSIS

xnat2fw {-g FWGroupID} {-p FlyWheelProject} [-n][-P XNATProject][-q][-t NumberOfTransferThreads][-w NumberOfWorkerThreads][-v] [[XNATSession] ...]
xnat2fw {-g FWGroupID} {-p FlyWheelProject} [-F]
xnat2fw {-g FWGroupID} {-p FlyWheelProject} [-l]

=head1 DESCRIPTION

xnat2fw uploads XNAT sessions to flywheel.

=over 8

=item -F

Get list of existing Flywheel session for the given group and project.

=item -g FWGroupID

Required. Specify the flywheel GroupID to upload the XNAT sessions to.

=item -l

List the remaining XNAT sessions to upload to the given Flywheel group and project.

=item -n

No-op.  Show what would have been done, but don\'t really do anything

=item -P XNATProject

Overrides the Flywheel project specified with '-p'.
Use this to upload XNAT sessions to a different Flywheel project.

=item -p

Required.  Specify the Flywheel project to upload XNAT sessions to.

=item -q

Quiet mode.  The underlying fw command is quite chatty. This ignores any status reports from fw.

=item -t NumberOfTransferThreads

Number of Transfer Threads.  Defaults to 4.

=item -w NumberOfWorkerThreads

Number of Worker Threads.  Defaults to 2.

=item -v

Verbose.  Show what commands are being run as we go.

=back

A space list of XNAT sessions may be given to xnat2fw.  Without this list, xnat2fw will
generate a list of sessions still to be uploaded (use xnat2fw -l to see the list) and start uploading them.

=cut

#
# -P defaults to -p option
#
function sys {
	[ -n "${opt_n}${opt_v}" ] && echo "$@" 1>&2
	[ -z "$opt_n" ] && "$@"
}

#
# /data/XNAT/archive/MEMORIES-2/arc001: has directories of the form DD_DDDDD_YYYYMMDD -- mostly.  Some of them have _PET extension.
# 
function getXNATSessions {
	 local XNATProject="$1"
	 
	 (cd "$XNATBaseDir/$XNATProject/arc001"; ls | sort)
}

function getFWSessions {
	local FWGroupID="$1"
	local FWProject="$2"

	# *** just because we're authenticated to fw doesn't mean we
	#     have authorization to this group/project
	for Subject in $( fw ls "${FWGroupID}/${FWProject}" | awk '{print $2}')
	do
		sys fw ls "${FWGroupID}/${FWProject}/${Subject}" | grep -v " files/" | awk '{print "'"${FWGroupID}/${FWProject}/${Subject}/"'"$NF}'
	done | sort
}

function getSessionsDiff {
        local FWGroupID="$1"
        local FWProject="$2"
        local XNATProject="$3"

	local FWSessions=""

	FWSessions=$(getFWSessions "$FWGroupID" "$FWProject")
	diff <(getXNATSessions "$XNATProject") <(echo "$FWSessions" | sed 's/_MRI//')
}

function getSessionsStill2Import {
        local FWGroupID=$1
        local FWProject="$2"
        local XNATProject="$3"

	getSessionsDiff "$FWGroupID" "$FWProject" "$XNATProject" | grep '<' | awk '{print $2}'
}

function session2Subject {
	 local Session="$1"

	 grep ",$Session," "$CleanupFile" | cut -f 2 -d ,
}

function dirPath2FWPath {
    local Group="$1"
    local Project="$2"
    local Path="$3"

    echo "$Group/$Project/$(echo $Path | cut -f 8,9 -d /)"
}

function syncDicom2FW {
        local FWGroupID="$1"

	shift

	local FWCmd

	for Path in "$@"
	do
		
		if [ ! -e "$Path" ]
		then
			echo "$cmd : No such file or directory for session '$Session' : skipping" 1>&2
			continue
		fi

		FWPath=$(dirPath2FWPath "$FWGroupID" "$Project" "$Path")
		read g p Subject Session < <(echo "$FWPath" | tr '/' ' ')

		#
		# fw -q doesn't seem to do anything  Force it.
		#	
		FWCmd=(fw import dicom -y --quiet --de-identify --jobs "$opt_w" --concurrent-uploads "$opt_t" --subject "$Subject" --session "$Session" "$Path" "$FWGroupID" "$Project")
		if [ -n "$opt_q" ]
		then
			sys "${FWCmd[@]}" > /dev/null
		else
			sys "${FWCmd[@]}"
		fi	  
	done
}

function getXNATSession2SubjectMap {
	 local MapFile="$1"
	 local SessionID="$2"
	 local XNATSession="$3"

	 sys curl -s -b "JSESSIONID=$SessionID" "$XNATURL/data/archive/projects/${XNATSession}/experiments?columns=subject_label,label&format=csv" > $MapFile
}

function cleanup {
	 [ -e "$CleanupFile" ] && sys rm "$CleanupFile"
	 [ -n "$XNATSessionID" ] && sys curl -b "JSESSIONID=$XNATSessionID" -X DELETE "$XNATURL/data/JSESSION"
}

#
# *** Remove defaults for opt_g opt_p opt_P and verify they've been given on command line
#
opt_t=4
opt_w=2
opt_D=3

while getopts D:d:Fg:lnP:p:qt:w:v arg
do
	case "$arg" in 
		D|d|F|f|g|l|n|P|p|q|t|w|v)
			eval "opt_${arg}=${OPTARG:=1}"
			;;
	esac
done

shift $((OPTIND - 1))

# check FWgroupid/Project exists? --- let it fail

if [ -n "$opt_g" ]
then
	FWGroupID="$opt_g"
else
	echo "$cmd : Missing -g argument" 1>&2
	echo "$syntax" 1>&2
	exit 1
fi

if [ -n "$opt_p" ]
then
    Project="$opt_p"
else
    echo "$cmd : Missing -p argument" 1>&2
    echo "$syntax" 1>&2
    exit 1
fi

if [ -n "$opt_D" ]
then
    Depth="$opt_D"
fi

function prefix {
	 XNATURL=http://picsl-xnat.uphs.upenn.edu
	 XNATSessionID=$(curl -n -s "$XNATURL/data/JSESSION")

	 HTTPCode=$(curl -b "JSESSIONID=$XNATSessionID" -s -o /dev/null -w "%{http_code}" "${XNATURL}/data/projects/${XNATProject}")
	 if [ "$HTTPCode" == 401 ]
	 then
		echo "$cmd : XNAT authorization failed '$XNATURL'" 1>&2
		cleanup

	 	exit 1
	 fi

	 CleanupFile=$(sys mktemp /tmp/xnat2fw-XXXXX)
	 getXNATSession2SubjectMap "$CleanupFile" "$XNATSessionID" "$XNATProject"
}

if [ -n "$opt_l" ]
then
    getFWSessions "$opt_g" "$opt_p"
    exit $?
fi

if [ -n "$1" ]
then
	Paths=("$@")
else
	Paths=($(find "$opt_d" -mindepth $Depth -maxdepth $Depth -name '[A-Z][A-Z]*[0-9][0-9]*' | grep Subjects))
fi

syncDicom2FW "$FWGroupID" "${Paths[@]}"

cleanup


