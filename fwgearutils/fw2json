#!/usr/bin/env python3

import sys
import re
import os
import flywheel
import json
import argparse
import fwgearutils

def recurse(r):
    global CmdName
    global args

    if (args.get):
        try:
            r = fw.get(r._id)
        except (flywheel.rest.ApiException) as e:
            True

    if (args.debug):
        print(type(r), file=sys.stderr)

    Output = fwgearutils.sloppyCopy(r)

    if (type(r) == flywheel.models.project.Project or type(r) == flywheel.models.container_project_output.ContainerProjectOutput):
        if (args.verbose):
            print("%s : r == project" % (CmdName), file=sys.stderr)

        Subjects = []
        for s in r.subjects():
            if (args.verbose):
                print("%s : %s/%s" % (CmdName, r.label, s.label), file=sys.stderr)

            Subject = recurse(s)
            Subjects.append(fwgearutils.sloppyCopy(Subject))
        Output['subjects'] = Subjects
        
    elif (type(r) == flywheel.models.subject.Subject or type(r) == flywheel.models.container_subject_output.ContainerSubjectOutput):
        if (args.debug):
            print("r == subject", file=sys.stderr)

        Sessions = []
        for s in fw.get_subject_sessions(r._id):
            if (args.verbose):
                print("%s : %s/%s" % (CmdName, r.label, s.label), file=sys.stderr)
            Session = recurse(s)
            Sessions.append(fwgearutils.sloppyCopy(Session))
        Output['sessions'] = Sessions

    elif (type(r) == flywheel.models.session.Session or type(r) == flywheel.models.container_session_output.ContainerSessionOutput):
        if (args.verbose):
            print("%s : r == session(%s)" % (CmdName, r.label), file=sys.stderr)

        if (r.analyses):
            Analyses = []
            for a in r.analyses:
                Analysis = fwgearutils.sloppyCopy(a)
                Analyses.append(Analysis)
            Output['analyses'] = Analyses

        Acquisitions = []

        if (args.acquisitions):
            for a in r.acquisitions():
                Acquisition = recurse(a)
                Acquisitions.append(fwgearutils.sloppyCopy(Acquisition))

        Output['acquisitions'] = Acquisitions

    elif (type(r) == flywheel.models.acquisition.Acquisition or type(r) == flywheel.models.container_acquisition_output.ContainerAcquisitionOutput):
        if (args.verbose):
            print("r == acquisition", file=sys.stderr)

    if (args.zip_info):
        Files = []

        try:
            for f in r.files:
                File = fwgearutils.sloppyCopy(f)
                if (re.search('\.zip$', f.name)):
                    if (f.size > 0):
                        try:
                            File['zip_info'] = fwgearutils.sloppyCopy(r.get_file_zip_info(f.name))
                            File['zip_member_count'] = len(File['zip_info']['members'])

                            if (args.verbose):
                                print("%s : '%s/files/%s' %d" % (CmdName, r.label, f.name, File['zip_member_count']), file=sys.stderr)

                        except (flywheel.rest.ApiException) as e:
                            print("%s : %s(%s).get_file_zip_info failed on '%s' : %s - %s\n" % (CmdName, r.label, r.id, f.name, e.status, e.reason), file=sys.stderr)
                            continue
                    else:
                        print("%s : Size of '%s(%s)/%s' is 0 : Skipping\n" % (CmdName, r.label, r.id, f.name), file=sys.stderr)
                        continue
                else:
                    if (args.verbose):
                        print("%s : '%s/files/%s'" % (CmdName, r.label, f.name), file=sys.stderr)

                Files.append(File)

        except (AttributeError) as e:
            # no filees attribute
            True

        if (len(Files) > 0):
            Output['files'] = Files

    return(Output)

if __name__ == '__main__':

    import argparse

    CmdName = os.path.basename(sys.argv[0])

    ap = argparse.ArgumentParser()
    ap.add_argument('-a', '--acquisitions',  action='store_true', help='include acquisition information')
    ap.add_argument('-d', '--debug',  action='store_true', help='debug flag')
    ap.add_argument('-g', '--get',  action='store_true', help='do fw.get on each session')
    ap.add_argument('-z', '--zip-info',  action='store_true', help='include zip file information')
    ap.add_argument('-v', '--verbose',  action='store_true', help='print progress info')
    ap.add_argument('path', nargs=1, type=str, default=None, help='group/project')

    args = ap.parse_args()

    fw = fwgearutils.getFW(args)
    if (not fw):
        print("%s : unable to initialize flywheel object" % (CmdName), file=sys.stderr)
        sys.exit(1)

    Container = re.sub('^fw://','',args.path[0])
    
    c = fw.lookup(Container)

    Output = recurse(c)

    print(json.dumps(Output))

