#!/bin/bash

. v${Version:=5}ArgHandler

if [ -n "$opt_f" ]
then
    bq query --use_legacy_sql=false --format=csv --allow_large_results --max_rows=1000000 --parameter="InvoiceMonth:STRING:${opt_y}${opt_m}" '
    DROP TABLE IF EXISTS
         `'"${Project}.${Dataset}.v5FwComputeMetrics"'`
    ;
    '
fi


bq query --use_legacy_sql=false --format=csv --allow_large_results --max_rows=1000000 --parameter="InvoiceMonth:STRING:${opt_y}${opt_m}" '

'"$(< ${v5TempFunctions})"'

CREATE TABLE IF NOT EXISTS
         `'"${Project}.${Dataset}"'.v5FwComputeMetrics`
     (
           InvoiceMonth			STRING
	 , FwGroup			STRING
	 , FwProject			STRING
	 , FwGearName			STRING
	 , FwGearCategory		STRING
	 , FwGearRunCount		INTEGER
	 , FwGearAnalysisCpuHours	FLOAT64
	 , FwGearUtilityCpuHours	FLOAT64
	 , FwGearGenericCpuHours	FLOAT64
	 , FwGearDynamicCpuHours	FLOAT64
	 , FwGearStaticCpuHours		FLOAT64
	 , FwInitialAnalysisCount	INTEGER
     );

DELETE FROM
         `'"${Project}.${Dataset}"'.v5FwComputeMetrics`
    WHERE
        InvoiceMonth = @InvoiceMonth
;

INSERT
         `'"${Project}.${Dataset}"'.v5FwComputeMetrics`
    SELECT
        InvoiceMonth
      , FwGroup
      , FwProject
      , FwGearName
      , FwGearCategory
      , COUNT(FwGearName) AS FwGearRunCount
      , SUM(IF (isAnalysisGear(FwGearCategory), FwGearCpuHours, 0.0)) AS FwGearAnalysisCpuHours
      , SUM(IF (isAnalysisGear(FwGearCategory), 0.0, FwGearCpuHours)) AS FwGearUtilityCpuHours
      , SUM(FwGearCpuHours) AS FwGearGenericCpuHours
      , SUM(IF (isGroupComputeNode(job_compute_node_name), FwGearCpuHours, 0.0)) AS FwGearDynamicCpuHours
      , SUM(IF (isGroupComputeNode(job_compute_node_name), 0.0, FwGearCpuHours)) AS FwGearStaticCpuHours
      , SUM(FwGearInitialAnalysis) AS FwInitialAnalysisCount
    
    FROM (
        SELECT 
          
              CAST(invoice_month AS STRING) AS InvoiceMonth
            , REPLACE(`group`,"_","-") AS FwGroup
            , project AS FwProject
            , gear_name AS FwGearName
            , gear_category AS FwGearCategory
            #
            # Many more job cpu hours can be recorded than billed for
            # A 1 core compute node generates 1 cpu hour (and disk, ram, etc)
            # 24 jobs can be run on the single compute node and if they each take 10 minutes to run, that is 240 minutes of runtime,
            # but not an accurate reflection of what we are being billed for.
            #
            # We allocate the compute costs based on how much cpu hours flywheel records for each job
            # If flywheel says dicom2niix takes 3 cpu hours and ashsharpicv takes 1 cpu hour, then 3/4 of the cost is attributed
            # to dicom2niix and 1/4 to ashsharpicv
            #
            , fwCpuMsToCpuHours(job_runtime_ms * gcp_cpus) AS FwGearCpuHours
            , IF(initial_analysis,1,0) AS FwGearInitialAnalysis
   	    , job_compute_node_name
       
        FROM
	    `pennbrain-center.BillingAllocation.FwJobsReport` 
          
        WHERE
	     CAST(invoice_month AS STRING) = @InvoiceMonth
        
    )

    GROUP BY
        InvoiceMonth
        , FwGroup
        , FwProject
        , FwGearName
        , FwGearCategory

  ;

' | OutputControl $opt_v

bq query --use_legacy_sql=false --format=csv --allow_large_results --max_rows=1000000 --parameter="InvoiceMonth:STRING:${opt_y}${opt_m}" '

SELECT
           InvoiceMonth
	 , ROUND(SUM(FwGearRunCount),2) AS FwGearRunCount
	 , ROUND(SUM(FwInitialAnalysisCount),2) AS FwInitialAnalysisCount
	 , ROUND(SUM(FwGearAnalysisCpuHours),2) AS FwGearAnalysisCpuHours
	 , ROUND(SUM(FwGearUtilityCpuHours),2) AS FwGearUtilityCpuHours
	 , ROUND(SUM(FwGearGenericCpuHours),2) AS FwGearGenericCpuHours
	 , ROUND(SUM(FwGearDynamicCpuHours),2) AS FwGearDynamicCpuHours
	 , ROUND(SUM(FwGearStaticCpuHours),2) AS FwGearStaticCpuHours

FROM
         `'"${Project}.${Dataset}"'.v5FwComputeMetrics`
WHERE
        InvoiceMonth = @InvoiceMonth

GROUP BY
         InvoiceMonth
    ;


' | OutputControl column

