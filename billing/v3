#!/bin/bash

#
# *** Want cost of 
#     cpu hour
#     Standard Storage Tb/year
#     Coldline Storage Tb/year
#     Archive Storage Tb/year
#     Cost/Gear Run
#     CPU Hour/Gear Run

#     Misc Compute Costs - Do not need as we allocate all the compute costs to the gears based on cpu hours

#
# *** Misc Storage charges - $3 in July
#

# *** Done
#    Need to deal with dynamic vs static jobs
#    analysis gears are run on the compute nodes spun up for the group
#    Utility gears are supposed to run on the central site (static) processing and are labeled as flywheel-static
#    So we need to keep the cpu hours in two different accumulators, dynamic cpu hours, and a static cpu hours
#    The dynamic will be used to apportion the Gcp cost of the group compute resources to the gears.
#    The static will be used to apportion the Gcp cost of the flywheel-static compute resources to the gears
#
# *** Done
#    Should be able to allocate the costs of the unlabeled compute resources which are all
#       BigQuery
#	Cloud Key Management Service (KMS)
# 	Cloud Logging
#	Cloud Storage
# 	Compute Engine
#	Networking
#
#    Currently all dynamic compute nodes come with 200GB SSD drives. The unlabeled SSD backed PD Capacity is in gibibyte months
#    Divide by 200 gibibytes to get # of months and convert to hours using average 30 day month
#    Use the ratio of analysis gears dynamic cpu hours to total dynamic cpu hours to allocate unlabeled compute costs
#
#    All compute engine costs are assigned as Unlabeled Compute Costs.  The remaining unlabeled costs are unlabeled Misc Costs
#
# *** Done
#    Need to allocate flywheel-static compute costs across the gear runs
#    Prorate the flywheel-static compute costs across the UtilityGearCpuHours / TotalUtilityGearCpuHours
#
# *** Done
#    Still need to allocate compute costs for flywheel-static
#    each group/project/utility gear cpu hours over the total utility gear cpu hours
#
# *** Done
#    Need
#      Total Utility Gear Cpu Hours 
#      Total Unlabeled Compute Hours
#      Default SSD size for compute nodes
#

CmdName=$(basename "$0")

syntax="${CmdName} [-d Dataset][-p Project][-v] {-m Month} {-y Year}"

function OutputControl {
    if [ -n "$opt_v" ]
    then
	cat
    else
	cat > /dev/null
    fi
}

while getopts d:m:p:vy: arg
do
	case "$arg" in
		d|m|p|v|y)
			eval "opt_${arg}=${OPTARG:=1}"
			;;
	esac
done

shift $(($OPTIND - 1))

if [ -z "$opt_y" ] || [ -z "$opt_m" ]
then
	echo "$syntax" 1>&2
	exit 1
fi

#Dataset=BillingAllocation
Dataset=Bob
[ -n "$opt_d" ] && Dataset="$opt_d"

Project=pennbrain-center
[ -n "$opt_p" ] && Project="$opt_p"

bq query --use_legacy_sql=false --format=csv --allow_large_results --max_rows=1000000 --parameter="InvoiceMonth:STRING:${opt_y}${opt_m}" '

DECLARE FwTotalAnalysisGearCpuHours FLOAT64;
DECLARE FwTotalUtilityGearCpuHours FLOAT64;
DECLARE GcpFwTotalUnlabeledComputeHours FLOAT64;
DECLARE GcpFwTotalUnlabeledComputeCosts FLOAT64;
DECLARE GcpFwTotalMiscCosts FLOAT64;

DECLARE GcpFwTotalFlywheelStaticComputeCosts FLOAT64;
DECLARE GcpFwTotalFlywheelDynamicComputeCosts FLOAT64;
DECLARE FwComputeDefaultSsdSize FLOAT64 DEFAULT 200.0; # GibiBytes
DECLARE GcpFwTotalComputeNonGearCosts FLOAT64;

DECLARE GcpFwStaticStorageStandardCosts FLOAT64;
DECLARE GcpFwStaticStorageColdlineCosts FLOAT64;
DECLARE GcpFwStaticStorageArchiveCosts FLOAT64;
DECLARE GcpFwStaticStorageMiscCosts FLOAT64;
DECLARE FwTotalProjectStorageGb FLOAT64;


DECLARE GcpFwTotalMiscLabeledCosts FLOAT64;
DECLARE GcpFwTotalMiscUnlabeledCosts FLOAT64;
DECLARE GcpFwTotalMiscStaticCosts FLOAT64;

CREATE TEMP FUNCTION zeroIfNull(Value FLOAT64) RETURNS FLOAT64 AS (
  IF (Value IS NOT NULL, Value, 0.0)
  )
  ;

CREATE TEMP FUNCTION fwCpuMsToCpuHours(CpuMs FLOAT64) RETURNS FLOAT64 AS (
  CpuMs / 1000.0 / 3600.0
  )
  ;

CREATE TEMP FUNCTION isComputeCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (ServiceDescription = "Compute Engine", TRUE, FALSE)
  );

CREATE TEMP FUNCTION isComputeDynamicCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (    ServiceDescription = "Compute Engine"
      AND FwGroup IS NOT NULL
      AND FwGroup != "flywheel-static",
      TRUE, 
      FALSE)
  );

CREATE TEMP FUNCTION isComputeCoreHours(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     ServiceDescription = "Compute Engine"
       AND
	   SkuDescription LIKE "%Instance Core%"
    ,
    TRUE,
    FALSE)
  );

CREATE TEMP FUNCTION isSsdPdCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Compute Engine"
       AND
	   SkuDescription = "SSD backed PD Capacity"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isAnalysisGear(GearCategory STRING) RETURNS BOOLEAN AS (
  IF (GearCategory = "analysis", TRUE, FALSE)
  );

CREATE TEMP FUNCTION isUtilityGear(GearCategory STRING) RETURNS BOOLEAN AS (
  IF (isAnalysisGear(GearCategory),FALSE,TRUE)
  );


CREATE TEMP FUNCTION isStorageStandardCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND
	   SkuDescription LIKE "Standard Storage%"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isStorageColdlineCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND
	   SkuDescription LIKE "Coldline Storage%"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isStorageArchiveCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND
	   SkuDescription LIKE "Archive Storage%"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isStorageMiscCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND SkuDescription NOT LIKE "Standard Storage%"
       AND SkuDescription NOT LIKE "Coldline Storage%"
       AND SkuDescription NOT LIKE "Archive Storage%"

  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscLabeledCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup IS NOT NULL
       AND FwGroup != "flywheel-static"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscUnlabeledCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup IS NULL
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscStaticCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup = "flywheel-static"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription NOT LIKE "Compute Engine%"
       AND ServiceDescription NOT LIKE "Cloud Storage"
  , TRUE, FALSE)
  );


#
# 1 `pennbrain-center.Bob.TempGcpFlywheelCosts`
#
#      All the Gcp Flywheel charges for this invoice month in a table we can process
#
CREATE or REPLACE TABLE
  `pennbrain-center.Bob.TempGcpFlywheelCosts`
AS
    SELECT
        invoice.month as InvoiceMonth,
        labels.value as FwGroup,
        project.name as GcpProjectName,
        service.description as ServiceDescription,
        sku.description as SkuDescription,
        sum(usage.amount_in_pricing_units) as UsageAmount,
        usage.pricing_unit as UsagePricingUnits,

        SUM(cost + IFNULL((
            SELECT
              SUM(c.amount)
            FROM
              UNNEST(credits) c
            WHERE
              c.type != "PROMOTION" ),
            0)) AS DiscountedCosts,
	    
        SUM(IFNULL((
            SELECT
              SUM(c.amount)
            FROM
              UNNEST(credits) c
            WHERE
              c.type = "PROMOTION" ),
            0)) AS Promotions
    FROM
        #
        # *** The billing sources should be passed in
	#
        upenn-017978-eb30e0-a7e2f9.billing_export.gcp_billing_export_v1_017978_EB30E0_A7E2F9
    LEFT JOIN
        UNNEST(labels) AS labels
    ON
        labels.key = "billing"
    WHERE
	    Invoice.month = "202207"
        AND project.name = "upenn-flywheel"

    GROUP BY
            InvoiceMonth,
            FwGroup,
            GcpProjectName,
            ServiceDescription,
            SkuDescription,
            UsagePricingUnits
;

CREATE OR REPLACE TABLE
  `pennbrain-center.Bob.TempGcpFwClassifiedCosts`
AS
    SELECT
        *
	, IF (GcpFwGroupStorageStandardGb > 0.0, GcpFwGroupStorageCosts / GcpFwGroupStorageStandardGb, 0.0) AS GcpFwGropuStorageCostPerStandardGb
	, zeroIfNull(GcpFwGroupComputeCosts) + zeroIfNull(GcpFwGroupStorageCosts) + zeroIfNull(GcpFwGroupMiscCosts) AS GcpFwGroupCosts
    FROM ( # A
        SELECT
    	  *
    	  , IF (GcpFwGroupComputeCoreCpuHours > 0.0, GcpFwGroupComputeCosts / GcpFwGroupComputeCoreCpuHours, 0.0) AS ComputeCostPerCpuHour
    	  , IF (GcpFwGroupStorageStandardGb > 0.0, GcpFwGroupStorageStandardCosts / GcpFwGroupStorageStandardGb, 0.0) AS StorageStandarCostPerGb
    	  , IF (GcpFwGroupStorageColdlineGb > 0.0, GcpFwGroupStorageColdlineCosts / GcpFwGroupStorageColdlineGb, 0.0) AS StorageColdlineCostPerGb
    	  , IF (GcpFwGroupStorageArchiveGb > 0.0, GcpFwGroupStorageArchiveCosts / GcpFwGroupStorageArchiveGb, 0.0) AS StorageArchiveCostPerGb
    	  , (
    	      + zeroIfNull(GcpFwGroupStorageStandardCosts)
    	      + zeroIfNull(GcpFwGroupStorageColdlineCosts)
    	      + zeroIfNull(GcpFwGroupStorageArchiveCosts)
    	      + zeroIfNull(GcpFwGroupStorageMiscCosts)
    	    ) AS GcpFwGroupStorageCosts
    
        FROM ( # B
            SELECT
        	InvoiceMonth,
        	FwGroup,
        
        	#
        	# Compute
        	#   Core Hours Used
        	#   Total
        	#   $/CPU hour
        	#
        	SUM(IF (isComputeCost(ServiceDescription,SkuDescription),
                       DiscountedCosts,
        	       0.0)) AS GcpFwGroupComputeCosts,  
        
                SUM(IF (isComputeCoreHours(ServiceDescription,SkuDescription),
                       UsageAmount,
                       0.0)) AS GcpFwGroupComputeCoreCpuHours,
        
        	SUM(IF (isComputeDynamicCost(ServiceDescription,FwGroup),
                       DiscountedCosts,
        	       0.0)) AS GcpFwGroupComputeDynamicCosts,  
        
             #
             # *** As of 2022-08-15 all storage is under flywheel static and none is grouped.
             #
             SUM(IF (isStorageStandardCost(ServiceDescription,SkuDescription),
                 DiscountedCosts,
                 0.0)) AS GcpFwGroupStorageStandardCosts,  
        
             SUM(IF (isStorageStandardCost(ServiceDescription,SkuDescription),
                 UsageAmount,
                 0.0)) AS GcpFwGroupStorageStandardGb,  
        
             SUM(IF (isStorageColdlineCost(ServiceDescription,SkuDescription),
                 DiscountedCosts,
                 0.0)) AS GcpFwGroupStorageColdlineCosts,
        
             SUM(IF (isStorageColdlineCost(ServiceDescription,SkuDescription),
                 UsageAmount,
                 0.0)) AS GcpFwGroupStorageColdlineGb,
        
             SUM(IF (isStorageArchiveCost(ServiceDescription,SkuDescription),
                 DiscountedCosts,
                 0.0)) AS GcpFwGroupStorageArchiveCosts,
        
             SUM(IF (isStorageArchiveCost(ServiceDescription,SkuDescription),
                 UsageAmount,
                 0.0)) AS GcpFwGroupStorageArchiveGb,
        
             SUM(IF (isStorageMiscCost(ServiceDescription,SkuDescription),
                 DiscountedCosts,
                 0.0)) AS GcpFwGroupStorageMiscCosts,
        
             #
             # Misc Costs
             #
             SUM(IF (isMiscCost(ServiceDescription,SkuDescription),
                 DiscountedCosts,
                 0.0)) AS GcpFwGroupMiscCosts,

	     SUM(IF (isMiscStaticCosts(ServiceDescription,FwGroup),
                 DiscountedCosts,
		 0.0)) AS GcpFwMiscStaticCostsCosts,  

	     SUM(IF (isMiscUnlabeledCosts(ServiceDescription,FwGroup),
                 DiscountedCosts,
	         0.0)) AS GcpFwMiscUnlabeledCosts,

	     SUM(IF (isMiscLabeledCosts(ServiceDescription,FwGroup),
             	 DiscountedCosts,
		 0.0)) AS GcpFwMiscLabeledCosts,

          FROM
              `pennbrain-center.Bob.TempGcpFlywheelCosts`
        
          WHERE
              InvoiceMonth = "202207"
        
          GROUP BY
                InvoiceMonth
              , FwGroup
        
          ORDER BY
                InvoiceMonth
              , FwGroup
    )
)
;

#
# 1   `pennbrain-center.Bob.TempProjectJobReport`
#
#	Sorts gear hours into utility and analysis hours
#	Sum everything else up into fwgroup/project/gear bins
CREATE OR REPLACE TABLE

  `pennbrain-center.Bob.TempProjectJobReport`

AS
    SELECT
      InvoiceMonth,
      FwGroup,
      FwProject,
      GearName,
      SUM(GearRunCount) AS GearRunCount,
      SUM(AnalysisGearCpuHours) AS AnalysisGearCpuHours,
      SUM(UtilityGearCpuHours) AS UtilityGearCpuHours,
      SUM(GenericGearCpuHours) AS GenericGearCpuHours,
      SUM(InitialAnalysisCount) AS InitialAnalysisCount,
    
    FROM (
      SELECT
          InvoiceMonth,
          FwGroup,
          FwProject,
          GearName,
          GearCategory,
          SUM(GearRuns) GearRunCount,
          IF (isAnalysisGear(GearCategory), SUM(GearCpuHours), 0.0) AS AnalysisGearCpuHours,
          IF (isAnalysisGear(GearCategory), 0.0, SUM(GearCpuHours)) AS UtilityGearCpuHours,
	  SUM(GearCpuHours) AS GenericGearCpuHours,
          SUM(GearInitialAnalysis) AS InitialAnalysisCount

#
# *** This select could be easily merged with the one above this.
#
      FROM (
            SELECT 
          
              invoice_month AS InvoiceMonth,
              REPLACE(`group`,"_","-") AS FwGroup,
              project AS FwProject,
              gear_name AS GearName,
              gear_category AS GearCategory,
              COUNT(gear_name) AS GearRuns,
              #
              # Many more job cpu hours can be recorded than billed for
              # A 1 core compute node generates 1 cpu hour (and disk, ram, etc)
              # 24 jobs can be run on the single compute node and if they each take 10 minutes to run, that is 240 minutes of runtime,
              # but not an accurate reflection of what we are being billed for.
              #
              # We allocate the compute costs based on how much cpu hours flywheel records for each job
              # If flywheel says dicom2niix takes 3 cpu hours and ashsharpicv takes 1 cpu hour, then 3/4 of the cost is attributed
              # to dicom2niix and 1/4 to ashsharpicv
              #
              SUM(fwCpuMsToCpuHours(job_runtime_ms * gcp_cpus)) AS GearCpuHours, 
              SUM(IF(initial_analysis,1,0)) AS GearInitialAnalysis,
          
            FROM
	         `pennbrain-center.Bob.FwJobsReport` 
          
            WHERE
              invoice_month = "202207"
          
            GROUP BY
              InvoiceMonth,
              FwGroup,
              FwProject,
              GearName,
              GearCategory
      )
      GROUP BY
        InvoiceMonth
        , FwGroup
        , FwProject
        , GearName
       , GearCategory
    )
    GROUP BY
        InvoiceMonth,
        FwGroup,
        FwProject,
        GearName
 

  ;

SET FwTotalAnalysisGearCpuHours = (
    SELECT
        SUM(AnalysisGearCpuHours)
    FROM
        `pennbrain-center.Bob.TempProjectJobReport`
    WHERE
        FwGroup IS NOT NULL
    AND
        FWGroup != "flywheel-static"
)
;

SET FwTotalUtilityGearCpuHours = (
    SELECT
        SUM(UtilityGearCpuHours)
    FROM
        `pennbrain-center.Bob.TempProjectJobReport`
    WHERE
        FwGroup IS NOT NULL
    AND
        FWGroup != "flywheel-static"
)
;

SET GcpFwTotalFlywheelStaticComputeCosts = (
    SELECT
	SUM(DiscountedCosts)
    FROM
	`pennbrain-center.Bob.TempGcpFlywheelCosts`
    WHERE
       FwGroup = "flywheel-static"
       AND ServiceDescription = "Compute Engine"
)
;

SET GcpFwTotalFlywheelDynamicComputeCosts = (
    SELECT
	SUM(DiscountedCosts)
    FROM
	`pennbrain-center.Bob.TempGcpFlywheelCosts`
    WHERE
           FwGroup != "flywheel-static"
       AND FwGroup IS NOT NULL
       AND ServiceDescription = "Compute Engine"
)
;

SET GcpFwTotalUnlabeledComputeCosts = (
    SELECT
	SUM(DiscountedCosts)
    FROM
	`pennbrain-center.Bob.TempGcpFlywheelCosts`
    WHERE
       FwGroup IS NULL
       AND ServiceDescription = "Compute Engine"	
)
;

SET GcpFwTotalMiscCosts = (
    SELECT
	SUM(GcpFwGroupMiscCosts)
    FROM
      `pennbrain-center.Bob.TempGcpFwClassifiedCosts`
)
;

SELECT FwComputeDefaultSsdSize;
SELECT FwTotalAnalysisGearCpuHours;
SELECT FwTotalUtilityGearCpuHours;
SELECT GcpFwTotalFlywheelStaticComputeCosts;
SELECT GcpFwTotalFlywheelDynamicComputeCosts;
SELECT GcpFwTotalUnlabeledComputeCosts;
SELECT GcpFwTotalMiscCosts;

#
# 4
#
# This table is grouped by group/project/gear so you can not allocate storage costs by project
#
CREATE OR REPLACE TABLE

  `pennbrain-center.Bob.TempGcpFwAllocatedComputeCosts`

AS
    SELECT
          *
	, zeroIfNull(TotalComputeCosts) + zeroIfNull(GcpAllocatedMiscCosts) AS TotalMiscNComputeCosts
    FROM (

        SELECT
              *
            , zeroIfNull(GcpAllocatedDynamicComputeCosts) + zeroIfNull(GcpAllocatedStaticComputeCosts) + zeroIfNull(GcpAllocatedUnlabeledComputeCosts) AS TotalComputeCosts

        FROM (
          SELECT
            t3.InvoiceMonth,
            t3.FwGroup,
            t4.FwProject,
            t4.GearName,
            t4.GearRunCount,
            t4.AnalysisGearCpuHours,
            t4.UtilityGearCpuHours,
            t4.GenericGearCpuHours,
            t4.InitialAnalysisCount,
            t4.GroupAnalysisGearCpuHours,
            t4.GroupUtilityGearCpuHours,
            t3.GcpFwGroupComputeCosts,
            t3.GcpFwGroupComputeCoreCpuHours,
        
            IF (GroupAnalysisGearCpuHours > 0.0, GcpFwGroupComputeDynamicCosts * AnalysisGearCpuHours / GroupAnalysisGearCpuHours, 0.0) AS GcpAllocatedDynamicComputeCosts,
            IF (FwTotalUtilityGearCpuHours > 0.0, GcpFwTotalFlywheelStaticComputeCosts * UtilityGearCpuHours / FwTotalUtilityGearCpuHours, 0.0) AS GcpAllocatedStaticComputeCosts,
            IF (FwTotalAnalysisGearCpuHours > 0.0, GcpFwTotalUnlabeledComputeCosts * AnalysisGearCpuHours / FwTotalAnalysisGearCpuHours,0.0) AS GcpAllocatedUnlabeledComputeCosts,
        
           IF (GcpFwTotalMiscCosts > 0.0, GcpFwTotalMiscCosts * AnalysisGearCpuHours / FwTotalAnalysisGearCpuHours, 0.0) AS GcpAllocatedMiscCosts,

          FROM (
            SELECT
              *
            FROM
               `pennbrain-center.Bob.TempGcpFwClassifiedCosts` 
        
          ) t3
          LEFT OUTER JOIN (
         
            SELECT
                  t1.InvoiceMonth
                , t1.FwGroup
                , FwProject
                , GearName
                , GearRunCount
                , AnalysisGearCpuHours
                , UtilityGearCpuHours
                , GenericGearCpuHours
                , InitialAnalysisCount
                , t2.GroupAnalysisGearCpuHours
                , t2.GroupUtilityGearCpuHours
            From (
              SELECT
                InvoiceMonth,
                FwGroup,
                FwProject,
                GearName,
                SUM(GearRunCount) AS GearRunCount,
                SUM(AnalysisGearCpuHours) AS AnalysisGearCpuHours,
                SUM(UtilityGearCpuHours) AS UtilityGearCpuHours,
                SUM(GenericGearCpuHours) AS GenericGearCpuHours,
                SUM(InitialAnalysisCount) AS InitialAnalysisCount,
              FROM
                `pennbrain-center.Bob.TempProjectJobReport`
        
              GROUP BY
                InvoiceMonth,
                FwGroup,
                FwProject,
                GearName 
             ) t1
            FULL OUTER JOIN (
              SELECT
                InvoiceMonth,
                FwGroup,
                SUM(AnalysisGearCpuHours) AS GroupAnalysisGearCpuHours, 
                SUM(UtilityGearCpuHours) AS GroupUtilityGearCpuHours
              FROM
                `pennbrain-center.Bob.TempProjectJobReport`
              GROUP BY
                InvoiceMonth,
                  FwGroup
            ) t2
            ON
                  t1.InvoiceMonth = t2.InvoiceMonth
              AND t1.FwGroup = t2.FwGroup
          ) t4
          ON
                  t3.InvoiceMonth = t4.InvoiceMonth
              AND t3.FwGroup = t4.FwGroup
          ORDER BY
            InvoiceMonth
            , FwGroup
            , FwProject
            , GearName
        
        )
    )
;

#
# 5   `pennbrain-center.Bob.TempProjectUsageReport`
#
# Gcp charges us for 106TB of Standard storage, flwheel can account for 79 of them
CREATE OR REPLACE TABLE 
       `pennbrain-center.Bob.TempFwProjectUsageReportV3` 
#    `'"${Project}.${Dataset}.TempFwProjectUsageReport"'`

AS
    SELECT
        InvoiceMonth,
        FwGroup,
        FwProject,
	SUM(FwProjectStorageGB) AS FwProjectStorageGb,
	SUM(FwProjectDeletedStorageGB) AS FwProjectDeletedStorageGb,
	SUM(FwProjectActiveStorageGB) AS FwProjectActiveStorageGb,
    FROM (
        SELECT
          invoice_month AS InvoiceMonth,
          REPLACE(`group`,"_","-") AS FwGroup,
          project_label AS FwProject,
          SUM(total_storage_byte_day / days / 1024.0 / 1024.0 / 1024.0) AS FwProjectStorageGb,
          IF (deleted, SUM(total_storage_byte_day / days / 1024.0 / 1024.0 / 1024.0), 0.0) AS FwProjectDeletedStorageGb,
          IF (NOT deleted, SUM(total_storage_byte_day / days / 1024.0 / 1024.0 / 1024.0), 0.0) AS FwProjectActiveStorageGb
        FROM
          `pennbrain-center.Bob.FwUsageReport`
#          `'"${Project}.${Dataset}.FwUsageReport"'`

        WHERE
          invoice_month = "202207"
          AND project_label IS NOT NULL

        GROUP BY
            InvoiceMonth,
            FwGroup,
            FwProject,
	    deleted
        ORDER BY
            InvoiceMonth,
            FwGroup,
            FwProject
    )
    GROUP BY
            InvoiceMonth,
            FwGroup,
            FwProject
    ORDER BY
            InvoiceMonth,
            FwGroup,
            FwProject

;

#
# 6   `pennbrain-center.Bob.TempProjectAllocatedStorageCosts`
#


#
# *** There are a few groups which have compute costs and no analysis jobs
# For July, this works out to about $4.24, so we are still missing about $1.50 of compute costs
#
# There is another $1.47 missing from the flywheel-static/utility costs  do not know where that is hiding
#

SET GcpFwTotalComputeNonGearCosts = (
    SELECT
      SUM(GcpFwGroupComputeCosts)
    FROM (
      SELECT 
          InvoiceMonth
        , FwGroup
        , GcpFwGroupComputeCosts
        , SUM(AnalysisGearCpuHours) AS AnalysisGearCpuHours
      FROM `pennbrain-center.Bob.TempGcpFwAllocatedComputeCosts` 
     GROUP BY
        InvoiceMonth
        , FwGroup
        , GcpFwGroupComputeCosts
    
      
    )
    WHERE 
            AnalysisGearCpuHours = 0
	AND GcpFwGroupComputeCosts != 0
)
;

SET GcpFwStaticStorageStandardCosts = (
    SELECT
        SUM(DiscountedCosts)
    FROM
	`pennbrain-center.Bob.TempGcpFlywheelCosts`
    WHERE
       FwGroup = "flywheel-static"
       AND ServiceDescription = "Cloud Storage"	
       AND SkuDescription LIKE "Standard Storage%"
)
;

SET GcpFwStaticStorageColdlineCosts = (
    SELECT
        SUM(DiscountedCosts)
    FROM
	`pennbrain-center.Bob.TempGcpFlywheelCosts`
    WHERE
       FwGroup = "flywheel-static"
       AND ServiceDescription = "Cloud Storage"	
       AND SkuDescription LIKE "Coldline Storage%"
)
;

SET GcpFwStaticStorageArchiveCosts = (
    SELECT
        SUM(DiscountedCosts)
    FROM
	`pennbrain-center.Bob.TempGcpFlywheelCosts`
    WHERE
       FwGroup = "flywheel-static"
       AND ServiceDescription = "Cloud Storage"	
       AND SkuDescription LIKE "Archive Storage%"
)
;

SET GcpFwStaticStorageMiscCosts = (
    SELECT
        SUM(DiscountedCosts)
    FROM
	`pennbrain-center.Bob.TempGcpFlywheelCosts`
    WHERE
       FwGroup = "flywheel-static"
       AND ServiceDescription = "Cloud Storage"	
       AND SkuDescription NOT LIKE "Archive Storage%"
       AND SkuDescription NOT LIKE "Coldline Storage%"
       AND SkuDescription NOT LIKE "Standard Storage%"
)
;

SET FwTotalProjectStorageGb = (
    SELECT
        SUM(FwProjectStorageGb)
    FROM
	`pennbrain-center.Bob.TempFwProjectUsageReportV3`
)
;

SELECT GcpFwTotalComputeNonGearCosts;
SELECT GcpFwStaticStorageStandardCosts;
SELECT GcpFwStaticStorageColdlineCosts;
SELECT GcpFwStaticStorageArchiveCosts;
SELECT GcpFwStaticStorageMiscCosts;
SELECT FwTotalProjectStorageGb;
	

#
# Putting the non gear costs here because they are have to be allocated by project -- there are no gears associated with
# these compute costs
#
# *** Still missing $1.47 in compute costs
#

# *** Want to calculate cost/gb metrics --- This is done in the Classified costs table skip

CREATE OR REPLACE TABLE 
       `pennbrain-center.Bob.TempFwProjectAllocatedStorageCostsV3` 
#    `'"${Project}.${Dataset}.TempFwProjectAllocatedStorageCostsV3"'`

AS
    SELECT
        *
	, zeroIfNull(FwProjectStorageCosts) + zeroIfNull(FwProjectComputeNonGearCosts) AS FwProjectStorageNonGearCosts
    FROM (
        SELECT
            *
    	    ,   zeroIfNull(FwProjectStorageStandardCosts)
	      + zeroIfNull(FwProjectStorageColdlineCosts)
	      + zeroIfNull(FwProjectStorageArchiveCosts)
	      + zeroIfNull(FwProjectStorageMiscCosts) AS FwProjectStorageCosts, 
    
        FROM (
            SELECT
                InvoiceMonth,
                FwGroup,
                FwProject,
        
    	    GcpFwTotalComputeNonGearCosts  * SUM(FwProjectStorageGb) / FwTotalProjectStorageGb AS FwProjectComputeNonGearCosts,
    
                SUM(FwProjectStorageGb) AS FwProjectStorageGb,
        
                #
                # *** All storage is in flywheel-static at the moment, but this does not handle the case where there are other
                # repositories of storage costs
                # These should be GcpFwStorage{Standard,Coldline,Archive,Misc}
                #
                GcpFwStaticStorageStandardCosts * SUM(FwProjectStorageGb) / FwTotalProjectStorageGb AS FwProjectStorageStandardCosts,
                GcpFwStaticStorageColdlineCosts * SUM(FwProjectStorageGb) / FwTotalProjectStorageGb AS FwProjectStorageColdlineCosts,
                GcpFwStaticStorageArchiveCosts * SUM(FwProjectStorageGb) / FwTotalProjectStorageGb AS FwProjectStorageArchiveCosts,
                GcpFwStaticStorageMiscCosts * SUM(FwProjectStorageGb) / FwTotalProjectStorageGb AS FwProjectStorageMiscCosts,
            
                Sum(FwProjectStorageGb) / FwTotalProjectStorageGb AS FwProjectStorageRatio,
            
                GcpFwStaticStorageStandardCosts,
                GcpFwStaticStorageColdlineCosts,
                GcpFwStaticStorageArchiveCosts,
            
                SUM(FwProjectDeletedStorageGb) AS FwProjectDeletedStorageGb,
                SUM(FwProjectActiveStorageGb) AS FwProjectActiveStorageGb,
            
            FROM 
                `pennbrain-center.Bob.TempFwProjectUsageReportV3`
        
            GROUP BY
                  InvoiceMonth
        	    , FwGroup
        	    , FwProject
        
            ORDER BY
                  InvoiceMonth
        	    , FwGroup
        	    , FwProject
        )
   )
;

CREATE OR REPLACE TABLE 
       `pennbrain-center.Bob.TempFwProjectAllocatedCostsV3` 
#    `'"${Project}.${Dataset}.TempFwProjectAllocatedV3"'`

AS
  SELECT 
      t1.InvoiceMonth
    , t1.FwGroup
    , t1.FwProject
    , InitialAnalysisCount
    , FwProjectStorageAllocatedCosts
    , FwProjectStorageStandardGb
    , ProjectComputeCosts
    , ProjectMiscCosts
    , FwProjectComputeNonGearCosts
    ,   zeroIfNull(FwProjectStorageAllocatedCosts)
      + zeroIfNull(ProjectComputeCosts)
      + zeroIfNull(ProjectMiscCosts)
      + zeroIfNull(FwProjectcomputeNonGearcosts) AS Totals
  FROM (
    SELECT
          InvoiceMonth
        , FwGroup
        , FwProject
        , SUM(FwProjectStorageGb) AS FwProjectStorageStandardGb
        , SUM(FwProjectStorageCosts) AS FwProjectStorageAllocatedCosts
	, SUM(FwProjectComputeNonGearCosts) AS FwProjectComputeNonGearCosts

    FROM
        `pennbrain-center.Bob.TempFwProjectAllocatedStorageCostsV3`
    WHERE
      FwGroup IS NOT NULL
    GROUP BY
          InvoiceMonth
        , FwGroup
        , FwProject
  ) t1
  FULL OUTER JOIN (
    SELECT
          InvoiceMonth
        , FwGroup
        , FwProject
        , SUM(InitialAnalysisCount) AS InitialAnalysisCount
        , SUM(TotalComputeCosts) AS ProjectComputeCosts
        , SUM(GcpAllocatedMiscCosts) ProjectMiscCosts
    FROM
        `pennbrain-center.Bob.TempGcpFwAllocatedComputeCosts`

    GROUP BY
          InvoiceMonth
        , FwGroup
        , FwProject
  ) t2
  ON
        t1.InvoiceMonth = t2.InvoiceMonth
    AND t1.FwGroup = t2.FwGroup
    AND t1.FwProject = t2.FwProject
  ORDER BY
      t1.InvoiceMonth
    , t1.FwGroup
    , t1.FwProject

	

'
