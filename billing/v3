#!/bin/bash

#
# *** Done
#    Need to deal with dynamic vs static jobs
#    analysis gears are run on the compute nodes spun up for the group
#    Utility gears are supposed to run on the central site (static) processing and are labeled as flywheel-static
#    So we need to keep the cpu hours in two different accumulators, dynamic cpu hours, and a static cpu hours
#    The dynamic will be used to apportion the Gcp cost of the group compute resources to the gears.
#    The static will be used to apportion the Gcp cost of the flywheel-static compute resources to the gears
#
# ***
#    Should be able to allocate the costs of the unlabeled compute resources which are all
#       BigQuery
#	Cloud Key Management Service (KMS)
# 	Cloud Logging
#	Cloud Storage
# 	Compute Engine
#	Networking
#
#    Currently all dynamic compute nodes come with 200GB SSD drives. The unlabeled SSD backed PD Capacity is in gibibyte months
#    Divide by 200 gibibytes to get # of months and convert to hours using average 30 day month
#    Use the ratio of analysis gears dynamic cpu hours to total dynamic cpu hours to allocate unlabeled compute costs
#
# *** Done
#    Need to allocate flywheel-static compute costs across the gear runs
#    Prorate the flywheel-static compute costs across the UtilityGearCpuHours / TotalUtilityGearCpuHours
#
# *** Done
#    Still need to allocate compute costs for flywheel-static
#    each group/project/utility gear cpu hours over the total utility gear cpu hours
#
# *** Done
#    Need
#      Total Utility Gear Cpu Hours 
#      Total Unlabeled Compute Hours
#      Default SSD size for compute nodes
#

CmdName=$(basename "$0")

syntax="${CmdName} [-d Dataset][-p Project][-v] {-m Month} {-y Year}"

function OutputControl {
    if [ -n "$opt_v" ]
    then
	cat
    else
	cat > /dev/null
    fi
}

while getopts d:m:p:vy: arg
do
	case "$arg" in
		d|m|p|v|y)
			eval "opt_${arg}=${OPTARG:=1}"
			;;
	esac
done

shift $(($OPTIND - 1))

if [ -z "$opt_y" ] || [ -z "$opt_m" ]
then
	echo "$syntax" 1>&2
	exit 1
fi

#Dataset=BillingAllocation
Dataset=Bob
[ -n "$opt_d" ] && Dataset="$opt_d"

Project=pennbrain-center
[ -n "$opt_p" ] && Project="$opt_p"

bq query --use_legacy_sql=false --format=csv --allow_large_results --max_rows=1000000 --parameter="InvoiceMonth:STRING:${opt_y}${opt_m}" '

DECLARE GcpFwTotalUtilityGearCpuHours FLOAT64;
DECLARE GcpFwTotalUnlabeledComputeHours FLOAT64;
DECLARE GcpFwTotalFlywheelStaticComputeCost FLOAT64;
DECLARE FwComputeDefaultSsdSize FLOAT64 DEFAULT 200.0; # GibiBytes

CREATE TEMP FUNCTION fwCpuMsToCpuHours(CpuMs FLOAT64) RETURNS FLOAT64 AS (
  CpuMs / 1000.0 / 3600.0
  )
  ;

CREATE TEMP FUNCTION isComputeCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (ServiceDescription = "Compute Engine", TRUE, FALSE)
  );

CREATE TEMP FUNCTION isComputeCoreHours(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     ServiceDescription = "Compute Engine"
       AND
	   SkuDescription LIKE "%Instance Core%"
    ,
    TRUE,
    FALSE)
  );

CREATE TEMP FUNCTION isSsdPdCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Compute Engine"
       AND
	   SkuDescription = "SSD backed PD Capacity"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isAnalysisGear(GearCategory STRING) RETURNS BOOLEAN AS (
  IF (GearCategory = "analysis", TRUE, FALSE)
  );

CREATE TEMP FUNCTION isUtilityGear(GearCategory STRING) RETURNS BOOLEAN AS (
  IF (isAnalysisGear(GearCategory),FALSE,TRUE)
  );


#
# *** Not correctly grouping rows
#

CREATE OR REPLACE TABLE

  `pennbrain-center.Bob.TempProjectJobReport`

AS
    SELECT
      InvoiceMonth,
      FwGroup,
      FwProject,
      GearName,
      SUM(GearRunCount) AS GearRunCount,
      SUM(AnalysisGearCpuHours) AS AnalysisGearCpuHours,
      SUM(UtilityGearCpuHours) AS UtilityGearCpuHours,
      SUM(InitialAnalysisCount) AS InitialAnalysisCount,
    
    FROM (
      SELECT
          InvoiceMonth,
          FwGroup,
          FwProject,
          GearName,
          GearCategory,
          SUM(GearRuns) GearRunCount,
          IF (isAnalysisGear(GearCategory), SUM(GearCpuHours), 0.0) AS AnalysisGearCpuHours,
          IF (isAnalysisGear(GearCategory), 0.0, SUM(GearCpuHours)) AS UtilityGearCpuHours,
          SUM(GearInitialAnalysis) AS InitialAnalysisCount
    
      FROM (
            SELECT 
          
              invoice_month AS InvoiceMonth,
              `group` AS FwGroup,
              project AS FwProject,
              gear_name AS GearName,
              gear_category AS GearCategory,
              COUNT(gear_name) AS GearRuns,
              #
              # Many more job cpu hours can be recorded than billed for
              # A 1 core compute node generates 1 cpu hour (and disk, ram, etc)
              # 24 jobs can be run on the single compute node and if they each take 10 minutes to run, that is 240 minutes of runtime,
              # but not an accurate reflection of what we are being billed for.
              #
              # We allocate the compute costs based on how much cpu hours flywheel records for each job
              # If flywheel says dicom2niix takes 3 cpu hours and ashsharpicv takes 1 cpu hour, then 3/4 of the cost is attributed
              # to dicom2niix and 1/4 to ashsharpicv
              #
              SUM(fwCpuMsToCpuHours(job_runtime_ms * gcp_cpus)) AS GearCpuHours, 
              SUM(IF(initial_analysis,1,0)) AS GearInitialAnalysis,
          
            FROM
	         `pennbrain-center.Bob.FwJobsReport` 
          
            WHERE
              invoice_month = "202207"
              AND (
	            `group` = "dwolklab"
             	     OR `group` = "pennftdcenter")
          
            GROUP BY
              InvoiceMonth,
              FwGroup,
              FwProject,
              GearName,
              GearCategory
      )
      GROUP BY
        InvoiceMonth
        , FwGroup
        , FwProject
        , GearName
       , GearCategory
    )
    GROUP BY
        InvoiceMonth,
        FwGroup,
        FwProject,
        GearName
 

  ;

SELECT * FROM 	`pennbrain-center.Bob.TempProjectJobReport`;

CREATE or REPLACE TABLE
  `pennbrain-center.Bob.GcpFlywheelCosts`
AS
      SELECT
        invoice.month as InvoiceMonth,
        labels.value as FwGroup,
        project.name as GcpProjectName,
        service.description as ServiceDescription,
        sku.description as SkuDescription,
        sum(usage.amount_in_pricing_units) as UsageAmountInPricingUnits,
        usage.pricing_unit as UsagePricingUnits,
        SUM(cost) AS Costs,
        SUM(IFNULL((
            SELECT
              SUM(c.amount)
            FROM
              UNNEST(credits) c
            WHERE
              c.type != "PROMOTION" ),
            0)) AS Discounts,
        SUM(IFNULL((
            SELECT
              SUM(c.amount)
            FROM
              UNNEST(credits) c
            WHERE
              c.type = "PROMOTION" ),
            0)) AS Promotions
      FROM
        upenn-017978-eb30e0-a7e2f9.billing_export.gcp_billing_export_v1_017978_EB30E0_A7E2F9
      LEFT JOIN
        UNNEST(labels) AS labels
      ON
        labels.key = "billing"
      WHERE
    	invoice.month = "202207"
        AND 
           project.name = "upenn-flywheel"
	AND (
	      labels.value = "dwolklab"
           OR labels.value = "pennftdcenter"
	   OR labels.value = "flywheel-static"
	   OR labels.value IS NULL
	   )

        GROUP BY
            InvoiceMonth,
            FwGroup,
            GcpProjectName,
            ServiceDescription,
            SkuDescription,
            UsagePricingUnits
;

CREATE OR REPLACE TABLE
  `pennbrain-center.Bob.TempGcpFlywheelCosts`
AS
SELECT
  InvoiceMonth,
  FwGroup,
  ServiceDescription,
  SkuDescription,

  Costs + Discounts AS DiscountedCosts,

  UsageAmountInPricingUnits AS UsageAmount,
  UsagePricingUnits

FROM
  `pennbrain-center.Bob.GcpFlywheelCosts`
WHERE
  InvoiceMonth = "202207"
;

CREATE OR REPLACE TABLE
  `pennbrain-center.Bob.TempGcpFlywheelClassifiedComputeCosts`
AS

  SELECT
    InvoiceMonth,
    FwGroup,

    SUM(IF (isComputeCost(ServiceDescription,SkuDescription),
        DiscountedCosts,
        0.0)) AS GcpFwGroupComputeDiscountedCosts,  

     SUM(IF (isComputeCoreHours(ServiceDescription,SkuDescription),
        UsageAmount,
        0.0)) AS GcpFwGroupComputeCoreCpuHours,
#
# 2022-08-12 The ssd for VM Gear compute machines is not currently labeled, so this comes out a $0.00
#

  FROM
    `pennbrain-center.Bob.TempGcpFlywheelCosts`
    WHERE
    ServiceDescription = "Compute Engine"

  GROUP BY
        InvoiceMonth,
    FwGroup
;


SET GcpFwTotalUtilityGearCpuHours = (
    SELECT
        SUM(UtilityGearCpuHours)
    FROM
        `pennbrain-center.Bob.TempProjectJobReport`
    WHERE
        FwGroup IS NOT NULL
    AND
        FWGroup != "flywheel-static"
)
;

SET GcpFwTotalFlywheelStaticComputeCost = (
    SELECT
	SUM(DiscountedCosts)
    FROM
	`pennbrain-center.Bob.TempGcpFlywheelCosts`
    WHERE
       FwGroup = "flywheel-static"
       AND ServiceDescription = "Compute Engine"
)
;

#
# UsageAmount in GibiByte Months
#
SET GcpFwTotalUnlabeledComputeHours = (
  SELECT
	(SUM(SsdPdHours) * 30 * 24) / FwComputeDefaultSsdSize, 
  FROM (
    SELECT
	FwGroup
	ServiceDescription,
	SkuDescription,
	IF (isSsdPdCost(ServiceDescription,SkuDescription),
	   UsageAmount,
	   0.0) AS SsdPdHours
    FROM
	`pennbrain-center.Bob.TempGcpFlywheelCosts`
    WHERE
       FwGroup IS NULL
	
  )
)
;
	
SELECT FwComputeDefaultSsdSize;
SELECT GcpFwTotalUtilityGearCpuHours;
SELECT GcpFwTotalFlywheelStaticComputeCost;
SELECT GcpFwTotalUnlabeledComputeHours;


SELECT
       t3.InvoiceMonth,
       t3.FwGroup,
       FwProject,
       GearName,
       GearRunCount,
       AnalysisGearCpuHours,
       UtilityGearCpuHours,
       InitialAnalysisCount,
       GroupAnalysisGearCpuHours,
       GroupUtilityGearCpuHours,
       GcpFwGroupComputeDiscountedCosts,
       GcpFwGroupComputeCoreCpuHours,
       GcpFwGroupComputeDiscountedCosts * AnalysisGearCpuHours / GroupAnalysisGearCpuHours AS GcpAllocatedDynamicComputeCosts,
       GcpFwTotalFlywheelStaticComputeCost * UtilityGearCpuHours / GcpFwTotalUtilityGearCpuHours AS GcpAllocatedStaticComputeCosts
FROM (

    SELECT
       t1.InvoiceMonth,
       t1.FwGroup,
       FwProject,
       GearName,
       SUM(GearRunCount) AS GearRunCount,
       SUM(AnalysisGearCpuHours) AS AnalysisGearCpuHours,
       SUM(UtilityGearCpuHours) AS UtilityGearCpuHours,
       SUM(InitialAnalysisCount) AS InitialAnalysisCount,
       SUM(GroupAnalysisGearCpuHours) AS GroupAnalysisGearCpuHours,
       SUM(GroupUtilityGearCpuHours) AS GroupUtilityGearCpuHours,
    
    FROM
      `pennbrain-center.Bob.TempProjectJobReport` t1
    
    LEFT JOIN (
        	 SELECT
    	     InvoiceMonth,
    	     FwGroup,
    	     SUM(AnalysisGearCpuHours) AS GroupAnalysisGearCpuHours, 
    	     SUM(UtilityGearCpuHours) AS GroupUtilityGearCpuHours
    	 FROM
    	         `pennbrain-center.Bob.TempProjectJobReport`
    	 GROUP BY
    	   InvoiceMonth,
    	   FwGroup
    ) t2
    ON
            t1.InvoiceMonth = t2.InvoiceMonth
          AND
            t1.FwGroup = t2.FwGroup
     GROUP BY
         InvoiceMonth,
	 FwGroup,
	 FwProject,
	 GearName

) t3
LEFT JOIN 

  `pennbrain-center.Bob.TempGcpFlywheelClassifiedComputeCosts` t4
ON
   t3.InvoiceMonth = t4.InvoiceMonth
  AND
   t3.FwGroup = t4.FwGroup





'