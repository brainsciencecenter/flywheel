#!/bin/bash

CmdName=$(basename "$0")

syntax="${CmdName} [-d Dataset][-p Project][-v] {-m Month} {-y Year}"

function OutputControl {
    if [ -n "$opt_v" ]
    then
	cat
    else
	cat > /dev/null
    fi
}

while getopts d:m:p:vy: arg
do
	case "$arg" in 
		d|m|p|v|y)
			eval "opt_${arg}=${OPTARG:=1}"
			;;
	esac
done

shift $(($OPTIND - 1))

if [ -z "$opt_y" ] || [ -z "$opt_m" ]
then
	echo "$syntax" 1>&2
	exit 1
fi

nowmonth=$(date +%Y-%m-15)
Year=$(date --date="$nowmonth -1 month" +'%Y')
[ -n "$opt_y" ] && Year="$opt_y"

Month=$(date --date="$nowmonth -1 month" +'%m')
[ -n "$opt_m" ] && Month="$opt_m"

Dataset=BillingAllocation
[ -n "$opt_d" ] && Dataset="$opt_d"

Project=pennbrain-center
[ -n "$opt_p" ] && Project="$opt_p"


bq query --use_legacy_sql=false --format=csv --allow_large_results --max_rows=1000000 --parameter="InvoiceMonth:STRING:${opt_y}${opt_m}" '

DECLARE TotalGearCost FLOAT64;
DECLARE TotalGearCpuHours FLOAT64;

SET TotalGearCost = (
#    SELECT DiscountedCosts FROM `'"${Project}.${Dataset}.FwTotalCosts"'` WHERE ChargeType = "VMDynamic"
    SELECT SUM(GcpFwLblDynamicComputeDiscountedCosts) FROM `'"${Project}.${Dataset}.TempGcpFwTotals"'` 
);

SET TotalGearCpuHours = (
#    SELECT UsageAmountInPricingUnits FROM `'"${Project}.${Dataset}.FwTotalCosts"'` WHERE ChargeType = "VMDynamicCore"
    SELECT SUM((gcp_cpus * job_elapsed_time_ms) / 1000.0 / 3600.0) FROM `'"${Project}.${Dataset}.FwJobsReport"'`
    WHERE
            project IS NOT NULL
	    AND CAST(invoice_month AS STRING) = @InvoiceMonth
);


CREATE TABLE IF NOT EXISTS
       `'"${Project}.${Dataset}.ProjectGearCosts"'`
   (
      `group`			STRING,
      project			STRING,
      gear_name			STRING,

      GearCpuHours    		 FLOAT64,
      GearRuns			INTEGER,
      GearCpuHoursAvg		FLOAT64,

      ProjectGearCost		FLOAT64,
      ProjectAvgGearCost	FLOAT64,
      InvoiceMonth		STRING,
    );

DELETE FROM
       `'"${Project}.${Dataset}.FwProjectGearCosts"'`
    WHERE
      InvoiceMonth = @InvoiceMonth
  ;

#
# *** This formula is pretends that the GearCpuHours is an absolute measure instead of a relative value
#  

INSERT 
       `'"${Project}.${Dataset}.FwProjectGearCosts"'`

    #
    # *** Not clear how we get a gear without a number of gear runs, but they seem to creap in,
    #     so need elaborate guards to keep from dividing by zero
    # 
    SELECT
        ggh.`Group`,
        Project,
        GearName,

        FwProjectGearCpuHours AS GearCpuHours,
        GearRuns,
        IF(GearRuns != 0.0, FwGroupGearCpuHours / GearRuns, 0.0) AS GearCpuHoursAvg,

        (GroupDynamicComputeCosts * GearToGroupCpuRatio) AS ProjectGearCost,
        IF(GearRuns != 0.0, (GroupDynamicComputeCosts * GearToGroupCpuRatio)/GearRuns,0.0) AS ProjectAvgGearCost,
        ggh.InvoiceMonth,

    FROM (
    	# 
	# Calculate costs, cpu hours, by group, project, gear
	#
        SELECT 
            tfpjr.InvoiceMonth,
            tfpjr.`Group`,
            Project,
            GearName,
            SUM(GearRuns) AS GearRuns,
            SUM(FwProjectGearCpuHours) AS FwProjectGearCpuHours,
            SUM(gpj.FwGroupGearCpuHours) AS FwGroupGearCpuHours,
            IF (SUM(gpj.FwGroupGearCpuHours) != 0.0, SUM(FwProjectGearCpuHours) / SUM(gpj.FwGroupGearCpuHours), 0.0) AS GearToGroupCpuRatio


        FROM
            `'"${Project}.${Dataset}.TempFwProjectJobReport"'` tfpjr
        LEFT JOIN (
	     #
	     # Sum Gear Cpu Hours from the Project Job Report by group
	     #
            SELECT 
                tgfjr.InvoiceMonth,
                tgfjr.`Group`,
                SUM(FwProjectGearCpuHours) AS FwGroupGearCpuHours,
            FROM 
                `'"${Project}.${Dataset}.TempFwProjectJobReport"'` tgfjr
            GROUP BY 
                tgfjr.InvoiceMonth,
                tgfjr.`Group`   
        ) gpj
        ON 
            tfpjr.InvoiceMonth = gpj.InvoiceMonth
            AND    tfpjr.Group = gpj.Group
        GROUP BY 
            tfpjr.InvoiceMonth,
            tfpjr.Group,
            tfpjr.Project,
            tfpjr.GearName
    ) ggh
    LEFT JOIN (
        SELECT 
            InvoiceMonth,
            `Group`,
            SUM(AllocatedGroupDynamicComputeDiscountedCosts) AS GroupDynamicComputeCosts
        FROM
            `'"${Project}.${Dataset}.TempGcpFwBillingAllocation"'`
        GROUP BY 
            InvoiceMonth,
            `Group`
    ) tgfba
    ON
        ggh.InvoiceMonth = tgfba.InvoiceMonth
        AND ggh.Group = tgfba.Group



;
    
' | OutputControl
