#!/bin/bash

#
# Load up the GCP costs
# Load the flywheel compute (group/project/gear) and storage metrics (group/project)
# Join the flywheel compute and storage metrics (group/project/gear)
# Group the flywheel metrics into a group level table
# Join the GCP costs and the flywheel group table
# allocate the group level costs/hours back across the group/project/gear rows
# pull out the null and flywheel-static groups into a total overhead table.
# allocate the overhead metrics over the group/project/gear rows
# calculate bsc charges
#

#     This table contains all the classifications we need from Gcp.
#
# Costs are what google charges us
# Charges are what we bill labs and PIs
#
# Classify all the GCP costs into
# Compute
#  Dynamic Gear Compute
#  Static Compute
#  Misc Compute
#  Non-Gear Related Dynamic compute - This is for groups which have compute costs and no gears run, so the compute costs 
#     distributed differently
#  Total Dynamic Costs
# Storage
#   Standard Cost/Hours
#   Coldline Cost/Hours
#   Archival Cost/Hours
#   Misc Costs
# Misc Costs - All the Costs which is not either Compute or Storage

# TempFwGroupProjectComputeMetrics
#     Cleanup of all the flywheel Job information for the current invoice month, grouped by group/project/gear

# TempFwGroupProjectStorageMetrics
#     Cleanup of all the flywheel Storage infomration for the current invoice month, grouped by group/project

# TempFwAllocatedGroupProjectComputeStorageMetrics
#     Join of TempFwGroupProjectComputeMetrics and TempFwGroupProjectStorageMetrics with BogusGears generated for
#     Group/Projects in storage to carry the storage metrics for the Group/Project/Gear
#     Includes group totals for gear metrics

# TempGcpFwAllocatedGroupProjectGearMetricsCosts
#     Join of TempFwAllocatedGroupProjectComputeStorageMetrics and TempGcpFwClassifiedCosts
#     Use functions to allocate costs across the Group/Project/Gears
#     Should be allocate costs per compute metric, allocate costs by storage metric
#     Does not assign charges -- only allocates costs

# BscAllocatedCharges
#     Use functions to allocate charges from TempGcpFwAllocatedGroupProjectGearMetricsCosts to drive the data studio reports
#     and iLab billling CSV

#
# BscGearCharges
#

# There is a basic problem of joining the storage and compute metrics across different levels of organization.  If you join on
#     Group/Project/Gear the storage metrics will be duplicated for each gear.  If you do not break it down to the gear level, you 
#     need another table to hold the gear costs information.
#     Really want all the storage to go the the Bogus gear, and not copied to the all the 
#
# Gcp - Data orginated from Gcp
# Fw - Dat originated from Flywheel
# Costs - What Google charged us
# Charges - What we're going to charge a fund
# AllocatedCosts - Costs we allocated to group/project/gear
# AllocatedCharges - Charges that were allocated to group/project/gear -- probably not really used
# Compute/Storage/Misc - Three main types of costs/charges
# TotalColumn - Totals for a column for prorating

# *** Should get rid of group level prorating.  Gcp group costs are a good check, but prorating should be across
#     the total metrics to simplify the tables and reduce the chance of getting the prorating wrong

# *** How do we deal with entire groups which have been deleted by the time we run the reports?

# *** Have to make sure every table is filtered through InvoiceMonth including the joined tables


CmdName=$(basename "$0")

syntax="${CmdName} [-d Dataset][-p Project][-v] {-m Month} {-y Year}"

function OutputControl {
    if [ -n "$opt_v" ]
    then
	cat
    else
	cat > /dev/null
    fi
}

while getopts d:m:p:vy: arg
do
	case "$arg" in
		d|m|p|v|y)
			eval "opt_${arg}=${OPTARG:=1}"
			;;
	esac
done

shift $(($OPTIND - 1))

if [ -z "$opt_y" ] || [ -z "$opt_m" ]
then
	echo "$syntax" 1>&2
	exit 1
fi

Dataset=BillingAllocation

[ -n "$opt_d" ] && Dataset="$opt_d"

Project=pennbrain-center
[ -n "$opt_p" ] && Project="$opt_p"

bq query --use_legacy_sql=false --format=csv --allow_large_results --max_rows=1000000 --parameter="InvoiceMonth:STRING:${opt_y}${opt_m}" '

DECLARE TotalFwStorageGb FLOAT64;

DECLARE TotalFwGearAnalysisCpuHours FLOAT64;
DECLARE TotalFwGearUtilityCpuHours FLOAT64;
DECLARE TotalFwGearGenericCpuHours FLOAT64;
DECLARE TotalFwGearDynamicCpuHours FLOAT64;
DECLARE TotalFwGearStaticCpuHours FLOAT64;

DECLARE TotalGcpComputeDynamicCpuHours FLOAT64;
DECLARE TotalGcpComputeStaticCpuHours FLOAT64;
DECLARE TotalGcpComputeGenericCpuHours FLOAT64;

DECLARE TotalGcpComputeUnlabeledCosts FLOAT64;
DECLARE TotalGcpComputeLabeledCosts FLOAT64;
DECLARE TotalGcpMiscCosts FLOAT64;
DECLARE TotalGcpMiscStaticCosts FLOAT64;
DECLARE TotalGcpMiscDynamicCosts FLOAT64;
DECLARE TotalGcpMiscLabeledCosts FLOAT64;
DECLARE TotalGcpMiscUnlabeledCosts FLOAT64;

DECLARE TotalGcpComputeStaticCosts FLOAT64;
DECLARE TotalGcpComputeDynamicCosts FLOAT64;
DECLARE FwComputeDefaultSsdSize FLOAT64 DEFAULT 200.0; # GibiBytes
DECLARE TotalGcpFwComputeNonGearCosts FLOAT64;

DECLARE TotalGcpStorageStandardCosts FLOAT64;
DECLARE TotalGcpStorageColdlineCosts FLOAT64;
DECLARE TotalGcpStorageArchiveCosts FLOAT64;
DECLARE TotalGcpStorageMiscCosts FLOAT64;

DECLARE TotalGcpStorageStandardGb FLOAT64;
DECLARE TotalGcpStorageColdlineGb FLOAT64;
DECLARE TotalGcpStorageArchiveGb FLOAT64;

DECLARE TotalGcpStaticStorageMiscCosts FLOAT64;

DECLARE GcpFwStaticStorageStandardCosts FLOAT64;
DECLARE GcpFwStaticStorageColdlineCosts FLOAT64;
DECLARE GcpFwStaticStorageArchiveCosts FLOAT64;
DECLARE TotalFwProjectStorageGb FLOAT64;
DECLARE TotalFwProjectStorageActiveGb FLOAT64;

DECLARE TotalGcpFwMiscLabeledCosts FLOAT64;
DECLARE TotalGcpFwMiscUnlabeledCosts FLOAT64;
DECLARE TotalGcpFwMiscStaticCosts FLOAT64;

DECLARE TotalEstGcpComputeStaticGearCpuHours FLOAT64;
DECLARE TotalEstGcpComputeStaticGearCosts FLOAT64;
DECLARE TotalEstGcpComputeStaticNonGearCpuHours FLOAT64;
DECLARE TotalEstGcpComputeStaticNonGearCosts FLOAT64;


CREATE TEMP FUNCTION myZeroIfNull(Value FLOAT64) RETURNS FLOAT64 AS (
  IF (Value IS NOT NULL, Value, 0.0)
  )
  ;

CREATE TEMP FUNCTION fwCpuMsToCpuHours(CpuMs FLOAT64) RETURNS FLOAT64 AS (
      CpuMs / 1000.0 / 3600.0
    );

CREATE TEMP FUNCTION isComputeCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
      IF (ServiceDescription = "Compute Engine", TRUE, FALSE)
    );

CREATE TEMP FUNCTION isComputeDynamicCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
    IF (    ServiceDescription = "Compute Engine"
        AND FwGroup IS NOT NULL
        AND FwGroup != "flywheel-static"
      , TRUE
      , FALSE)
    );

CREATE TEMP FUNCTION isComputeStaticCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
    IF (    ServiceDescription = "Compute Engine"
        AND FwGroup IS NOT NULL
        AND FwGroup = "flywheel-static"
      , TRUE 
      , FALSE)
    );

CREATE TEMP FUNCTION isComputeLabeledCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (    ServiceDescription = "Compute Engine"
      AND FwGroup IS NOT NULL
      , TRUE
      , FALSE)
  );

CREATE TEMP FUNCTION isComputeUnlabeledCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (    ServiceDescription = "Compute Engine"
        AND FwGroup IS NULL
      , TRUE
      , FALSE)
  );

CREATE TEMP FUNCTION isComputeDynamicCpuHours(ServiceDescription STRING, SkuDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     ServiceDescription = "Compute Engine"
       AND SkuDescription LIKE "%Instance Core%"
       AND FwGroup IS NOT NULL
       AND FwGroup != "flywheel-static"
    ,
    TRUE,
    FALSE)
  );

CREATE TEMP FUNCTION isComputeStaticCpuHours(ServiceDescription STRING, SkuDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     ServiceDescription = "Compute Engine"
       AND SkuDescription LIKE "%Instance Core%"
       AND FwGroup IS NOT NULL
       AND FwGroup = "flywheel-static"
    ,
    TRUE,
    FALSE)
  );

CREATE TEMP FUNCTION isSsdPdCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Compute Engine"
       AND
	   SkuDescription = "SSD backed PD Capacity"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isAnalysisGear(GearCategory STRING) RETURNS BOOLEAN AS (
  IF (GearCategory = "analysis", TRUE, FALSE)
  );

CREATE TEMP FUNCTION isGroupComputeNode(ComputeNode STRING) RETURNS BOOLEAN AS (
  IF (regexp_contains(ComputeNode,"^compute[^-][^-]*-"), TRUE, FALSE)
  );

CREATE TEMP FUNCTION isUtilityGear(GearCategory STRING) RETURNS BOOLEAN AS (
  IF (isAnalysisGear(GearCategory),FALSE,TRUE)
  );


CREATE TEMP FUNCTION isStorageStandardCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND
	   SkuDescription LIKE "Standard Storage%"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isStorageColdlineCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND
	   SkuDescription LIKE "Coldline Storage%"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isStorageArchiveCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND
	   SkuDescription LIKE "Archive Storage%"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isStorageMiscCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND SkuDescription NOT LIKE "Standard Storage%"
       AND SkuDescription NOT LIKE "Coldline Storage%"
       AND SkuDescription NOT LIKE "Archive Storage%"

  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscLabeledCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup IS NOT NULL
       AND FwGroup != "flywheel-static"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscUnlabeledCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup IS NULL
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscStaticCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup = "flywheel-static"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscDynamicCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup IS NOT NULL
       AND FwGroup != "flywheel-static"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription NOT LIKE "Compute Engine%"
       AND ServiceDescription NOT LIKE "Cloud Storage"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION OneTeraByte() RETURNS FLOAT64 AS (1024.0); # in Gibibytes

CREATE TEMP FUNCTION isTbOrMore(StorageUsage FLOAT64) RETURNS BOOL AS (
       IF ((StorageUsage > OneTeraByte()),
       	  TRUE,
	  FALSE
       )
);

CREATE TEMP FUNCTION BscStorageOverheadRate() RETURNS FLOAT64 AS (0.25);
CREATE TEMP FUNCTION BscInitialAnalysisRate() RETURNS FLOAT64 AS (25);
CREATE TEMP FUNCTION BscSmallProjectCharge() RETURNS FLOAT64 AS (8.33);
CREATE TEMP FUNCTION BscLargeProjectCharge() RETURNS FLOAT64 AS (20.66);
CREATE TEMP FUNCTION OneCent() RETURNS FLOAT64 AS (0.01);

CREATE TEMP FUNCTION calculateBscStorageCharge(StorageCharge FLOAT64) RETURNS FLOAT64 AS (
	  StorageCharge * BscStorageOverheadRate()
);

CREATE TEMP FUNCTION calculateBscInitialAnalysisCharge(InitialAnalysisCount FLOAT64) RETURNS FLOAT64 AS (
       InitialAnalysisCount * BscInitialAnalysisRate()
);


CREATE TEMP FUNCTION calculateBscProjectCharge(StorageStandardUsage FLOAT64, StorageCharge FLOAT64) RETURNS FLOAT64 AS (
        IF (round(StorageCharge,2) >= OneCent(),
	        IF (isTbOrMore(StorageStandardUsage),
		      BscLargeProjectCharge(),
		      BscSmallProjectCharge()
		),
		0.0
       )
);

CREATE TEMP FUNCTION prorate(x FLOAT64, y FLOAT64) RETURNS FLOAT64 AS (
       IF (y IS NULL OR y = 0.0, 0.0, x / y)
);

CREATE TEMP FUNCTION estGcpCpuHoursFromFwCpuHours( FwCpuHours FLOAT64, TotalGcpComputeDynamicCpuHours FLOAT64, TotalFwGearDynamicCpuHours FLOAT64  ) RETURNS FLOAT64 AS (
      FwCpuHours * prorate(TotalGcpComputeDynamicCpuHours, TotalFwGearDynamicCpuHours)
);

#
# 1 TempGcpClassifiedCostsV4
# 
#   Classify all the costs from Gcp
#

SET TotalGcpComputeStaticCpuHours = (
    SELECT
	SUM(GcpGroupComputeStaticCpuHours)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth        
    );

SET TotalGcpComputeDynamicCpuHours = (
    SELECT
	SUM(GcpGroupComputeDynamicCpuHours)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth        
    );

SET TotalGcpComputeStaticCosts = (
    SELECT
	SUM(GcpGroupComputeStaticCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth        
    );

SET TotalGcpComputeDynamicCosts = (
    SELECT
	SUM(GcpGroupComputeDynamicCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth        
    );

SET TotalGcpComputeUnlabeledCosts = (
    SELECT
	SUM(GcpGroupComputeUnlabeledCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth        
    ); 	

SET TotalGcpComputeLabeledCosts = (
    SELECT
	SUM(GcpGroupComputeLabeledCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth        
    ); 	

SET TotalGcpMiscCosts = (
    SELECT
	SUM(GcpGroupMiscCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`

    WHERE
        InvoiceMonth = @InvoiceMonth        
    );

SET TotalGcpMiscDynamicCosts = (
    SELECT
	SUM(GcpGroupMiscDynamicCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`

    WHERE
        InvoiceMonth = @InvoiceMonth        
    );

SET TotalGcpMiscStaticCosts = (
    SELECT
	SUM(GcpGroupMiscStaticCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`

    WHERE
        InvoiceMonth = @InvoiceMonth        

    );

SET TotalGcpMiscLabeledCosts = (
    SELECT
	SUM(GcpGroupMiscLabeledCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`

    WHERE
        InvoiceMonth = @InvoiceMonth        

    );

SET TotalGcpMiscUnlabeledCosts = (
    SELECT
	SUM(GcpGroupMiscUnlabeledCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`

    WHERE
        InvoiceMonth = @InvoiceMonth        

    );

SET TotalFwGearAnalysisCpuHours = (
    SELECT
        SUM(FwGearAnalysisCpuHours)
    FROM
        `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeMetricsV4`
    WHERE
        FwGroup IS NOT NULL
    AND FWGroup != "flywheel-static"
    AND InvoiceMonth = @InvoiceMonth        
)
;

SET TotalFwGearUtilityCpuHours = (
    SELECT
        SUM(FwGearUtilityCpuHours)
    FROM
        `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeMetricsV4`
    WHERE
        FwGroup IS NOT NULL
    AND FWGroup != "flywheel-static"
    AND InvoiceMonth = @InvoiceMonth        
)
;

SET TotalFwGearGenericCpuHours = (
    SELECT
        SUM(FwGearGenericCpuHours)
    FROM
        `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeMetricsV4`
    WHERE
        FwGroup IS NOT NULL
    AND FWGroup != "flywheel-static"
    AND InvoiceMonth = @InvoiceMonth        
)
;

SET TotalFwGearDynamicCpuHours = (
    SELECT
        SUM(FwGearDynamicCpuHours)
    FROM
        `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeMetricsV4`
    WHERE
        FwGroup IS NOT NULL
    AND InvoiceMonth = @InvoiceMonth        
)
;

SET TotalFwGearStaticCpuHours = (
    SELECT
        SUM(FwGearStaticCpuHours)
    FROM
        `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeMetricsV4`
    WHERE
        FwGroup IS NOT NULL
    AND InvoiceMonth = @InvoiceMonth        
)
;

SET TotalEstGcpComputeStaticGearCpuHours = (
    TotalFwGearStaticCpuHours * (TotalGcpComputeDynamicCpuHours / TotalFwGearDynamicCpuHours)
)
;

SET TotalEstGcpComputeStaticNonGearCpuHours = (
    TotalGcpComputeStaticCpuHours - TotalEstGcpComputeStaticGearCpuHours
)
;

SET TotalEstGcpComputeStaticGearCosts = (
    TotalGcpComputeStaticCosts * prorate(TotalEstGcpComputeStaticGearCpuHours,TotalGcpComputeStaticCpuHours)
)
;

SET TotalEstGcpComputeStaticNonGearCosts = (
    TotalGcpComputeStaticCosts * prorate(TotalEstGcpComputeStaticNonGearCpuHours,TotalGcpComputeStaticCpuHours)
)
;

SET TotalFwProjectStorageGb = (
    SELECT
        SUM(FwProjectStorageGb)
    FROM
        `'"${Project}.${Dataset}"'.TempFwGroupProjectStorageMetricsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth

)
;

SET TotalFwProjectStorageActiveGb = (
    SELECT
        SUM(FwProjectStorageActiveGb)
    FROM
        `'"${Project}.${Dataset}"'.TempFwGroupProjectStorageMetricsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth

)
;

SET TotalGcpStorageStandardCosts = (
    SELECT
        SUM(GcpGroupStorageStandardCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4` 
    WHERE
        InvoiceMonth = @InvoiceMonth
)
;

SET TotalGcpStorageColdlineCosts = (
    SELECT
        SUM(GcpGroupStorageColdLineCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4` 
    WHERE
        InvoiceMonth = @InvoiceMonth
)
;

SET TotalGcpStorageArchiveCosts = (
    SELECT
        SUM(GcpGroupStorageArchiveCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4` 
    WHERE
        InvoiceMonth = @InvoiceMonth
)
;

SET TotalGcpStorageMiscCosts = (
    SELECT
        SUM(GcpGroupStorageMiscCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4` 
    WHERE
        InvoiceMonth = @InvoiceMonth
)
;

SET TotalGcpStorageStandardGb = (
    SELECT
        SUM(GcpGroupStorageStandardGb)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4` 
    WHERE
        InvoiceMonth = @InvoiceMonth
)
;

SET TotalGcpStorageColdlineGb = (
    SELECT
        SUM(GcpGroupStorageColdLineGb)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4` 
    WHERE
        InvoiceMonth = @InvoiceMonth
)
;

SET TotalGcpStorageArchiveGb = (
    SELECT
        SUM(GcpGroupStorageArchiveGb)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4` 
    WHERE
        InvoiceMonth = @InvoiceMonth
)
;


#
# *** Building table to check group summation against GCP and flywheel summations
#

#
# TempGcpFwGroupMetrics
#
DROP TABLE IF EXISTS
        `'"${Project}.${Dataset}"'.TempGcpFwGroupMetricsV4`
    ;

CREATE TABLE IF NOT EXISTS
        `'"${Project}.${Dataset}"'.TempGcpFwGroupMetricsV4`
    (
        InvoiceMonth				STRING,
        FwGroup					STRING,

	GcpGroupCosts			FLOAT64,

	GcpGroupComputeCosts			FLOAT64,

	GcpGroupComputeCpuHours			FLOAT64,
	GcpGroupComputeDynamicCpuHours		FLOAT64,
	GcpGroupComputeDynamicCosts		FLOAT64,
	GcpGroupComputeStaticCpuHours		FLOAT64,
	GcpGroupComputeStaticCosts		FLOAT64,
	GcpGroupComputeLabeledCosts		FLOAT64,
	GcpGroupComputeUnlabeledCosts		FLOAT64,

	GcpGroupStorageCosts			FLOAT64,
	GcpGroupStorageStandardCosts		FLOAT64,
	GcpGroupStorageStandardGb		FLOAT64,
	GcpGroupStorageColdlineCosts		FLOAT64,
	GcpGroupStorageColdlineGb		FLOAT64,
	GcpGroupStorageArchiveCosts		FLOAT64,
	GcpGroupStorageArchiveGb		FLOAT64,
	GcpGroupStorageMiscCosts		FLOAT64,

	GcpGroupMiscCosts			FLOAT64,
	GcpGroupMiscStaticCosts			FLOAT64,
	GcpGroupMiscDynamicCosts		FLOAT64,
	GcpGroupMiscUnlabeledCosts		FLOAT64,
	GcpGroupMiscLabeledCosts		FLOAT64,

        FwGroupTotalAnalysisCpuHours		FLOAT64,
        FwGroupTotalUtilityCpuHours		FLOAT64,
        FwGroupTotalGenericCpuHours		FLOAT64,
        FwGroupTotalDynamicCpuHours		FLOAT64,
        FwGroupTotalStaticCpuHours		FLOAT64,

        FwGroupTotalRunCount			FLOAT64,
        FwGroupTotalInitialAnalysisCount	FLOAT64,
        FwGroupTotalProjectCount		FLOAT64,

        FwGroupTotalStorageGb			FLOAT64,
        FwGroupTotalStorageActiveGb		FLOAT64,
        FwGroupTotalStorageDeletedGb		FLOAT64,

        FwGroupTotalStorageSessionCount		FLOAT64,

    );


# *** Delete after everything is working
DELETE FROM 
        `'"${Project}.${Dataset}"'.TempGcpFwGroupMetricsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth
;

#
#  TempGcpFwGroupMetrics has one row per FwGroup with the GCP costs and the 
#  Flywheel group compute and storage metrics
#

INSERT
        `'"${Project}.${Dataset}"'.TempGcpFwGroupMetricsV4`
    (
        SELECT 
	    * 
	FROM
            (
	    	SELECT
                     IF (t1.InvoiceMonth IS NULL, t2.InvoiceMonth, t1.InvoiceMonth) AS InvoiceMonth
            	   , IF (t1.FwGroup IS NULL, t2.FwGroup, t1.FwGroup) AS FwGroup

		   , GcpGroupCosts

            	   , GcpGroupComputeCosts
            	   , GcpGroupComputeCpuHours
            	   , GcpGroupComputeDynamicCpuHours
            	   , GcpGroupComputeDynamicCosts
            	   , GcpGroupComputeStaticCpuHours
            	   , GcpGroupComputeStaticCosts
            	   , GcpGroupComputeLabeledCosts
            	   , GcpGroupComputeUnlabeledCosts

            	   , GcpGroupStorageCosts
            	   , GcpGroupStorageStandardCosts
            	   , GcpGroupStorageStandardGb
            	   , GcpGroupStorageColdlineCosts
            	   , GcpGroupStorageColdlineGb
            	   , GcpGroupStorageArchiveCosts
            	   , GcpGroupStorageArchiveGb
            	   , GcpGroupStorageMiscCosts

            	   , GcpGroupMiscCosts
            	   , GcpGroupMiscStaticCosts
            	   , GcpGroupMiscDynamicCosts
            	   , GcpGroupMiscUnlabeledCosts
            	   , GcpGroupMiscLabeledCosts

                   , FwGroupTotalAnalysisCpuHours
                   , FwGroupTotalUtilityCpuHours
                   , FwGroupTotalGenericCpuHours
                   , FwGroupTotalDynamicCpuHours
                   , FwGroupTotalStaticCpuHours

                   , FwGroupTotalRunCount
                   , FwGroupTotalInitialAnalysisCount
		   , FwGroupProjectCount
        
                   , FwGroupTotalStorageGb
                   , FwGroupTotalStorageActiveGb
                   , FwGroupTotalStorageDeletedGb

                   , FwGroupTotalStorageSessionCount

	       FROM
	           (
		       SELECT 
		             InvoiceMonth
	      
			   # *** One of the flywheel groups is NASA with a group id of 13
			   #     but 13 is not a valid google tag, so flywheel adds "g-" to make it google compliant
			   #     Strip that prefix off so the full outer join works

			   , REGEXP_REPLACE(FwGroup,"^g-","") AS FwGroup
			   , GcpGroupCosts

            		   , GcpGroupComputeCosts
            		   , GcpGroupComputeCpuHours
            		   , GcpGroupComputeDynamicCpuHours
            		   , GcpGroupComputeDynamicCosts
            		   , GcpGroupComputeStaticCpuHours
            		   , GcpGroupComputeStaticCosts
            		   , GcpGroupComputeLabeledCosts
            		   , GcpGroupComputeUnlabeledCosts

            		   , GcpGroupStorageCosts
            		   , GcpGroupStorageStandardCosts
            		   , GcpGroupStorageStandardGb
            		   , GcpGroupStorageColdlineCosts
            		   , GcpGroupStorageColdlineGb
            		   , GcpGroupStorageArchiveCosts
            		   , GcpGroupStorageArchiveGb
            		   , GcpGroupStorageMiscCosts

            		   , GcpGroupMiscCosts
            		   , GcpGroupMiscStaticCosts
            		   , GcpGroupMiscDynamicCosts
            		   , GcpGroupMiscUnlabeledCosts
            		   , GcpGroupMiscLabeledCosts

		       FROM
			   `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`
		       WHERE
		           InvoiceMonth = @InvoiceMonth
		   ) t1
	       FULL OUTER JOIN (
	           # Generate single row for each InvoiceMonth, FwGroup
		   SELECT
	                 InvoiceMonth
		       , FwGroup

		       # FwGroupProjectComputeStorageMetrics has separate lines for Compute and Storage
		       # so they need to be combined here
                       , SUM(FwGearAnalysisCpuHours) AS FwGroupTotalAnalysisCpuHours
                       , SUM(FwGearUtilityCpuHours) AS FwGroupTotalUtilityCpuHours
                       , SUM(FwGearGenericCpuHours) AS FwGroupTotalGenericCpuHours
                       , SUM(FwGearDynamicCpuHours) AS FwGroupTotalDynamicCpuHours
                       , SUM(FwGearStaticCpuHours) AS FwGroupTotalStaticCpuHours

                       , SUM(FwGearRunCount) AS FwGroupTotalRunCount
                       , SUM(FwInitialAnalysisCount) AS FwGroupTotalInitialAnalysisCount

		       , COUNT(FwProject) AS FwGroupProjectCount
        
		       , SUM(FwProjectStorageGb) AS FwGroupTotalStorageGb
                       , SUM(FwProjectStorageActiveGb) AS FwGroupTotalStorageActiveGb
                       , SUM(FwProjectStorageDeletedGb) AS FwGroupTotalStorageDeletedGb

                       , SUM(FwProjectStorageSessionCount) AS FwGroupTotalStorageSessionCount
             	   FROM
                       `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeStorageMetricsV4`
             	   WHERE
		       InvoiceMonth = @InvoiceMonth
	     	   GROUP BY
                         InvoiceMonth
                       , FwGroup
	       ) t2
	       ON
	               t1.InvoiceMonth = t2.InvoiceMonth
	     	   AND t1.FwGroup = t2.FwGroup

	    )
    )
    ;

# *** Delete after everything is working
DROP TABLE IF EXISTS
        `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearsV4_5`
    ;

CREATE TABLE IF NOT EXISTS
        `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearsV4_5`
    (
         InvoiceMonth				STRING
       , FwGroup				STRING

       , FwProject				STRING
       , FwGearName				STRING
       , FwGearCategory				STRING

       , AllocatedGearComputeCosts		FLOAT64
       , AllocatedGearComputeCpuHours		FLOAT64

       , AllocatedGearComputeDynamicCpuHours	FLOAT64
       , AllocatedGearComputeDynamicCosts	FLOAT64

       , AllocatedGearComputeStaticCpuHours	FLOAT64
       , AllocatedGearComputeStaticCosts	FLOAT64

       , AllocatedGearComputeLabeledCosts	FLOAT64
       , AllocatedGearComputeUnLabeledCosts	FLOAT64

       , AllocatedGcpStorageCosts		FLOAT64
       , AllocatedGcpStorageStandardCosts	FLOAT64
       , AllocatedGcpStorageStandardGb		FLOAT64
       , AllocatedGcpStorageColdlineCosts	FLOAT64
       , AllocatedGcpStorageColdlineGb		FLOAT64
       , AllocatedGcpStorageArchiveCosts	FLOAT64
       , AllocatedGcpStorageArchiveGb		FLOAT64

       , AllocatedGcpMiscCosts			FLOAT64

       , GcpGroupComputeCosts			FLOAT64
       , GcpGroupComputeCpuHours		FLOAT64
       , GcpGroupComputeDynamicCpuHours		FLOAT64
       , GcpGroupComputeDynamicCosts		FLOAT64
       , GcpGroupComputeStaticCpuHours		FLOAT64
       , GcpGroupComputeStaticCosts		FLOAT64
       , GcpGroupComputeLabeledCosts		FLOAT64
       , GcpGroupComputeUnLabeledCosts		FLOAT64

       , GcpGroupStorageCosts			FLOAT64

       , FwGearRunCount				FLOAT64
       , FwInitialAnalysisCount			FLOAT64

       , FwGearDynamicCpuHours			FLOAT64
       , FwGearStaticCpuHours			FLOAT64
       , FwProjectStorageGb			FLOAT64
       , FwProjectStorageActiveGb		FLOAT64
       , FwProjectStorageDeletedGb		FLOAT64

       , FwGearGroupTotalDynamicCpuHours	FLOAT64
       , FwGearGroupTotalStaticCpuHours		FLOAT64
       , FwGearGroupTotalStorageGb		FLOAT64
       , FwGearGroupTotalStoragActiveGb		FLOAT64
       , FwGearGroupTotalStorageDeletedGb	FLOAT64

       , FwGearGroupTotalProjectCount		FLOAT64

    );


DELETE FROM 
        `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearsV4_5`
    WHERE
        InvoiceMonth = @InvoiceMonth
;

#
#	    , FwGearDynamicCpuHours
#	    , FwGearGroupTotalDynamicCpuHours
#	    , GcpGroupComputeDynamicCosts
#           , GcpGroupComputeDynamicCosts * prorate(FwGearDynamicCpuHours,FwGearGroupTotalDynamicCpuHours) AS AllocatedGearComputeDynamicCosts
# works great when there are gcp costs and fw metrics to prorate the costs with
# in 6/2023 cnet has $5.16 in Dynamic costs and no fw metrics
# in the case where there are no flywheel metrics, 
# 
# dwolklab is easy, cnet a little harder,  13 harder

CREATE TEMP FUNCTION AllocateGcpMetrics (
       Cost     FLOAT64,
       x	FLOAT64,
       y	FLOAT64,  
       n	FLOAT64
 ) RETURNS FLOAT64 AS (
   IF (n IS NULL OR n = 0.0,
       myZeroIfNull(Cost),		# There are no FwProjects to distribute the gcp costs across so all the costs go into a bogus project
       IF (y IS NULL OR y = 0.0,
	   myZeroIfNull(Cost) / n,
       	   myZeroIfNull(Cost) * prorate(x, y)
       )
   )
);

# *** ignore all the total collumns from FwGroupProjectComputeStorageMetrics -- they are wrong

INSERT
        `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearsV4_5`
    (

	SELECT
              t1.InvoiceMonth
            , t1.FwGroup
    
	    , IF (FwProject IS NULL, "BogusGearProject", FwProject) AS FwProject
	    , IF (FwGearName IS NULL, "BogusGearName", FwGearName) AS FwGearName
	    , IF (FwGearCategory IS NULL, "BogusGearCategory", FwGearCategory) AS FwGearCategory

            , AllocateGcpMetrics(GcpGroupComputeCosts,FwGearDynamicCpuHours,FwGroupTotalDynamicCpuHours, FwGroupTotalProjectCount) AS AllocatedGearComputeCosts
            , AllocateGcpMetrics(GcpGroupComputeCpuHours,FwGearDynamicCpuHours,FwGroupTotalDynamicCpuHours, FwGroupTotalProjectCount) AS AllocatedGearComputeCpuHours

            , AllocateGcpMetrics(GcpGroupComputeDynamicCpuHours,FwGearDynamicCpuHours,FwGroupTotalDynamicCpuHours, FwGroupTotalProjectCount) AS AllocatedGearComputeDynamicCpuHours
            , AllocateGcpMetrics(GcpGroupComputeDynamicCosts,FwGearDynamicCpuHours,FwGroupTotalDynamicCpuHours, FwGroupTotalProjectCount) AS AllocatedGearComputeDynamicCosts

            , AllocateGcpMetrics(GcpGroupComputeStaticCpuHours,FwGearDynamicCpuHours,FwGroupTotalDynamicCpuHours, FwGroupTotalProjectCount) AS AllocatedGearComputeStaticCpuHours
            , AllocateGcpMetrics(GcpGroupComputeStaticCosts,FwGearStaticCpuHours,FwGroupTotalStaticCpuHours, FwGroupTotalProjectCount) AS AllocatedGearComputeStaticCosts

            , AllocateGcpMetrics(GcpGroupComputeLabeledCosts,FwGearDynamicCpuHours,FwGroupTotalDynamicCpuHours, FwGroupTotalProjectCount) AS AllocatedGearComputeLabeledCosts
            , AllocateGcpMetrics(GcpGroupComputeUnLabeledCosts,FwGearDynamicCpuHours,FwGroupTotalDynamicCpuHours, FwGroupTotalProjectCount) AS AllocatedGearComputeUnLabeledCosts

            , AllocateGcpMetrics(GcpGroupStorageCosts,FwProjectStorageActiveGb,FwGroupTotalStorageActiveGb, FwGroupTotalProjectCount) AS AllocatedGcpStorageCosts

            , AllocateGcpMetrics(GcpGroupStorageStandardCosts,FwProjectStorageActiveGb,FwGroupTotalStorageActiveGb, FwGroupTotalProjectCount) AS AllocatedGcpStorageStandardCosts
            , AllocateGcpMetrics(GcpGroupStorageStandardGb,FwProjectStorageActiveGb,FwGroupTotalStorageActiveGb, FwGroupTotalProjectCount) AS AllocatedGcpStorageStandardGb

            , AllocateGcpMetrics(GcpGroupStorageColdlineGb,FwProjectStorageActiveGb,FwGroupTotalStorageActiveGb, FwGroupTotalProjectCount) AS AllocatedGcpStorageColdlineCosts
            , AllocateGcpMetrics(GcpGroupStorageColdlineCosts,FwProjectStorageActiveGb,FwGroupTotalStorageActiveGb, FwGroupTotalProjectCount) AS AllocatedGcpStorageColdlineGb

            , AllocateGcpMetrics(GcpGroupStorageArchiveCosts,FwProjectStorageActiveGb,FwGroupTotalStorageActiveGb, FwGroupTotalProjectCount) AS AllocatedGcpStorageArchiveCosts
            , AllocateGcpMetrics(GcpGroupStorageArchiveGb,FwProjectStorageActiveGb,FwGroupTotalStorageActiveGb, FwGroupTotalProjectCount) AS AllocatedGcpStorageArchiveGb


            , AllocateGcpMetrics(GcpGroupMiscCosts,FwGearDynamicCpuHours,FwGroupTotalDynamicCpuHours, FwGroupTotalProjectCount) AS AllocatedGcpMiscCosts

	    , GcpGroupComputeCosts
	    , GcpGroupComputeCpuHours
	    , GcpGroupComputeDynamicCpuHours
	    , GcpGroupComputeDynamicCosts
	    , GcpGroupComputeStaticCpuHours
	    , GcpGroupComputeStaticCosts
	    , GcpGroupComputeLabeledCosts
	    , GcpGroupComputeUnLabeledCosts

	    , GcpGroupStorageCosts

	    , FwGearRunCount
	    , FwInitialAnalysisCount

	    , FwGearDynamicCpuHours
	    , FwGearStaticCpuHours
	    , FwProjectStorageGb
	    , FwProjectStorageActiveGb
	    , FwProjectStorageDeletedGb

	    , FwGroupTotalDynamicCpuHours
	    , FwGroupTotalStaticCpuHours
	    , FwGroupTotalStorageGb
	    , FwGroupTotalStorageActiveGb
	    , FwGroupTotalStorageDeletedGb

	    , FwGroupTotalProjectCount

	FROM
	    # TempGcpFwGroupMetricsV4` has all the groups so we can do a left join and not worry about missing a group
            `'"${Project}.${Dataset}"'.TempGcpFwGroupMetricsV4` t1
        LEFT JOIN (
            SELECT
	          InvoiceMonth
                , FwGroup

		, FwProject
		, FwGearName
		, FwGearCategory

		, FwGearRunCount
		, FwInitialAnalysisCount

		, FwGearDynamicCpuHours
		, FwGearStaticCpuHours
		, FwProjectStorageGb
		, FwProjectStorageActiveGb
		, FwProjectStorageDeletedGb

             FROM
               `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeStorageMetricsV4`
             WHERE
                InvoiceMonth = @InvoiceMonth

        ) t2
	ON
	        t1.InvoiceMonth = t2.InvoiceMonth
	    AND t1.FwGroup = t2.FwGroup
        WHERE
               t1.InvoiceMonth = @InvoiceMonth
	ORDER BY
	    t1.InvoiceMonth
            , t1.FwGroup
     ) ORDER BY InvoiceMonth, FwGroup, FwProject, FwGearName

     ;

# To verify against TempGcpClassifiedCosts4V table sums
SELECT 
  ROUND(SUM(AllocatedGearComputeCosts),2) AS AllocatedGearComputeCosts
  , ROUND(SUM(AllocatedGearComputeCpuHours),2) AS AllocatedGearComputeCpuHours
  , ROUND(SUM(AllocatedGearComputeDynamicCpuHours),2) AS AllocatedGearComputeDynamicCpuHours
  , ROUND(SUM(AllocatedGearComputeDynamicCosts),2) AS AllocatedGearComputeDynamicCosts

  , ROUND(SUM(AllocatedGearComputeStaticCpuHours),2) AS AllocatedGearComputeStaticCpuHours
  , ROUND(SUM(AllocatedGearComputeStaticCosts),2) AS AllocatedGearComputeStaticCosts

  , ROUND(SUM(AllocatedGearComputeLabeledCosts),2) AS AllocatedGearComputeLabeledCosts
  , ROUND(SUM(AllocatedGearComputeUnLabeledCosts),2) AS AllocatedGearComputeUnLabeledCosts
  , ROUND(SUM(AllocatedGcpStorageCosts),2) AS AllocatedGcpStorageCosts
  , ROUND(SUM(AllocatedGcpStorageStandardCosts),2) AS AllocatedGcpStorageStandardCosts
  , ROUND(SUM(AllocatedGcpStorageStandardGb),2) AS AllocatedGcpStorageStandardGb
  , ROUND(SUM(AllocatedGcpStorageColdlineCosts),2) AS AllocatedGcpStorageColdlineCosts
  , ROUND(SUM(AllocatedGcpStorageColdlineGb),2) AS AllocatedGcpStorageColdlineGb
  , ROUND(SUM(AllocatedGcpStorageArchiveCosts),2) AS AllocatedGcpStorageArchiveCosts
  , ROUND(SUM(AllocatedGcpStorageArchiveGb),2) AS AllocatedGcpStorageArchiveGb


  , ROUND(SUM(AllocatedGcpMiscCosts),2) AS AllocatedGcpMiscCosts

 FROM
     `pennbrain-center.BillingAllocation.TempAllocatedGroupProjectGearsV4_5` 
 WHERE
     InvoiceMonth = @InvoiceMonth
 ;

DROP TABLE IF EXISTS
        `'"${Project}.${Dataset}"'.TempTotalOverheadMetricsV4_5`
    ;

CREATE TABLE IF NOT EXISTS
        `'"${Project}.${Dataset}"'.TempTotalOverheadMetricsV4_5`
    (
         InvoiceMonth				STRING

       , AllocatedGearComputeCosts		FLOAT64
       , AllocatedGearComputeCpuHours		FLOAT64

       , AllocatedGearComputeDynamicCpuHours	FLOAT64
       , AllocatedGearComputeDynamicCosts	FLOAT64

       , AllocatedGearComputeStaticCpuHours	FLOAT64
       , AllocatedGearComputeStaticCosts	FLOAT64

       , AllocatedGearComputeLabeledCosts	FLOAT64
       , AllocatedGearComputeUnLabeledCosts	FLOAT64

       , AllocatedGcpStorageCosts		FLOAT64
       , AllocatedGcpStorageStandardCosts	FLOAT64
       , AllocatedGcpStorageStandardGb		FLOAT64
       , AllocatedGcpStorageColdlineCosts	FLOAT64
       , AllocatedGcpStorageColdlineGb		FLOAT64
       , AllocatedGcpStorageArchiveCosts	FLOAT64
       , AllocatedGcpStorageArchiveGb		FLOAT64

       , AllocatedGcpMiscCosts			FLOAT64
    );

DELETE FROM 
        `'"${Project}.${Dataset}"'.TempTotalOverheadMetricsV4_5`
    WHERE
        InvoiceMonth = @InvoiceMonth
    ;

INSERT
    `'"${Project}.${Dataset}"'.TempTotalOverheadMetricsV4_5`
    (
        SELECT 
            InvoiceMonth
          , SUM(AllocatedGearComputeCosts) AS TotalOverheadComputeCosts
          , SUM(AllocatedGearComputeCpuHours) AS TotalOverheadComputeCpuHours
          , SUM(AllocatedGearComputeDynamicCpuHours) AS TotalOverheadComputeDynamicCpuHours
          , SUM(AllocatedGearComputeDynamicCosts) AS TotalOverheadComputeDynamicCosts
        
          , SUM(AllocatedGearComputeStaticCpuHours) AS TotalOverheadComputeStaticCpuHours
          , SUM(AllocatedGearComputeStaticCosts) AS TotalOverheadComputeStaticCosts
        
          , SUM(AllocatedGearComputeLabeledCosts) AS TotalOverheadComputeLabeledCosts
          , SUM(AllocatedGearComputeUnLabeledCosts) AS TotalOverheadComputeUnLabeledCosts
          , SUM(AllocatedGcpStorageCosts) AS TotalOverhedStorageCosts
          , SUM(AllocatedGcpStorageStandardCosts) AS TotalOverheadStorageStandardCosts
          , SUM(AllocatedGcpStorageStandardGb) AS TotalOverheadStandardGb
          , SUM(AllocatedGcpStorageColdlineCosts) AS TotalOverheadStorageColdlineCosts
          , SUM(AllocatedGcpStorageColdlineGb) AS TotalOverheadStorageColdlineGb
          , SUM(AllocatedGcpStorageArchiveCosts) AS TotalOverheadStorageArchiveCosts
          , SUM(AllocatedGcpStorageArchiveGb) AS TotalOverheadStorageArchiveGb
        
        
          , SUM(AllocatedGcpMiscCosts) AS TotalOverheadMiscCosts
        
         FROM
             `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearsV4_5` 
         WHERE
             InvoiceMonth = @InvoiceMonth
	     AND (
	     	    FwGroup IS NULL 
		 OR FwGroup = "flywheel-static"
		 )
	 GROUP BY
	     InvoiceMonth
    );

SELECT 
    ROUND(SUM(AllocatedGearComputeCosts),2) AS AllocatedGearComputeCosts
  , ROUND(SUM(AllocatedGearComputeCpuHours),2) AS AllocatedGearComputeCpuHours
  , ROUND(SUM(AllocatedGearComputeDynamicCpuHours),2) AS AllocatedGearComputeDynamicCpuHours
  , ROUND(SUM(AllocatedGearComputeDynamicCosts),2) AS AllocatedGearComputeDynamicCosts

  , ROUND(SUM(AllocatedGearComputeStaticCpuHours),2) AS AllocatedGearComputeStaticCpuHours
  , ROUND(SUM(AllocatedGearComputeStaticCosts),2) AS AllocatedGearComputeStaticCosts

  , ROUND(SUM(AllocatedGearComputeLabeledCosts),2) AS AllocatedGearComputeLabeledCosts
  , ROUND(SUM(AllocatedGearComputeUnLabeledCosts),2) AS AllocatedGearComputeUnLabeledCosts
  , ROUND(SUM(AllocatedGcpStorageCosts),2) AS AllocatedGcpStorageCosts
  , ROUND(SUM(AllocatedGcpStorageStandardCosts),2) AS AllocatedGcpStorageStandardCosts
  , ROUND(SUM(AllocatedGcpStorageStandardGb),2) AS AllocatedGcpStorageStandardGb
  , ROUND(SUM(AllocatedGcpStorageColdlineCosts),2) AS AllocatedGcpStorageColdlineCosts
  , ROUND(SUM(AllocatedGcpStorageColdlineGb),2) AS AllocatedGcpStorageColdlineGb
  , ROUND(SUM(AllocatedGcpStorageArchiveCosts),2) AS AllocatedGcpStorageArchiveCosts
  , ROUND(SUM(AllocatedGcpStorageArchiveGb),2) AS AllocatedGcpStorageArchiveGb

  , ROUND(SUM(AllocatedGcpMiscCosts),2) AS AllocatedGcpMiscCosts

         FROM
             `'"${Project}.${Dataset}"'.TempTotalOverheadMetricsV4_5` 
  ;


# *** Delete after everything is working
DROP TABLE IF EXISTS
    `'"${Project}.${Dataset}"'.TempAllocatedOverheadMetricsV4_5`
    ;

CREATE TABLE IF NOT EXISTS
        `'"${Project}.${Dataset}"'.TempAllocatedOverheadMetricsV4_5`
    (
         InvoiceMonth				STRING

       , FwGroup				STRING
    
       , FwProject				STRING
       , FwGearName				STRING
       , FwGearCategory				STRING


       , AllocatedGearComputeCosts		FLOAT64
       , AllocatedGearComputeCpuHours		FLOAT64

       , AllocatedGearComputeDynamicCpuHours	FLOAT64
       , AllocatedGearComputeDynamicCosts	FLOAT64

       , AllocatedGearComputeStaticCpuHours	FLOAT64
       , AllocatedGearComputeStaticCosts	FLOAT64

       , AllocatedGearComputeLabeledCosts	FLOAT64
       , AllocatedGearComputeUnLabeledCosts	FLOAT64

       , AllocatedGcpStorageCosts		FLOAT64
       , AllocatedGcpStorageStandardCosts	FLOAT64
       , AllocatedGcpStorageStandardGb		FLOAT64
       , AllocatedGcpStorageColdlineCosts	FLOAT64

       , AllocatedGcpStorageColdlineGb		FLOAT64
       , AllocatedGcpStorageArchiveCosts	FLOAT64
       , AllocatedGcpStorageArchiveGb		FLOAT64

       , AllocatedGcpMiscCosts			FLOAT64
    );

DELETE FROM 
    `'"${Project}.${Dataset}"'.TempAllocatedOverheadMetricsV4_5`
WHERE
    InvoiceMonth = @InvoiceMonth
    ;

INSERT
    `'"${Project}.${Dataset}"'.TempAllocatedOverheadMetricsV4_5`
    (

	SELECT
              t1.InvoiceMonth
            , t1.FwGroup
    
	    , IF (FwProject IS NULL, "BogusGearProject", FwProject) AS FwProject
	    , IF (FwGearName IS NULL, "BogusGearName", FwGearName) AS FwGearName
	    , IF (FwGearCategory IS NULL, "BogusGearCategory", FwGearCategory) AS FwGearCategory

            , AllocateGcpMetrics(t2.AllocatedGearComputeCosts,FwGearDynamicCpuHours,TotalFwGearDynamicCpuHours, FwGearGroupTotalProjectCount) AS AllocatedGearComputeCosts
            , AllocateGcpMetrics(t2.AllocatedGearComputeCpuHours,FwGearDynamicCpuHours,TotalFwGearDynamicCpuHours, FwGearGroupTotalProjectCount) AS AllocatedGearComputeCpuHours

            , AllocateGcpMetrics(t2.AllocatedGearComputeDynamicCpuHours,FwGearDynamicCpuHours,TotalFwGearDynamicCpuHours, FwGearGroupTotalProjectCount) AS AllocatedGearComputeDynamicCpuHours
            , AllocateGcpMetrics(t2.AllocatedGearComputeDynamicCosts,FwGearDynamicCpuHours,TotalFwGearDynamicCpuHours, FwGearGroupTotalProjectCount) AS AllocatedGearComputeDynamicCosts

            , AllocateGcpMetrics(t2.AllocatedGearComputeStaticCpuHours,FwGearDynamicCpuHours,TotalFwGearDynamicCpuHours, FwGearGroupTotalProjectCount) AS AllocatedGearComputeStaticCpuHours
            , AllocateGcpMetrics(t2.AllocatedGearComputeStaticCosts,FwGearStaticCpuHours,TotalFwGearStaticCpuHours, FwGearGroupTotalProjectCount) AS AllocatedGearComputeStaticCosts

            , AllocateGcpMetrics(t2.AllocatedGearComputeLabeledCosts,FwGearDynamicCpuHours,TotalFwGearDynamicCpuHours, FwGearGroupTotalProjectCount) AS AllocatedGearComputeLabeledCosts
            , AllocateGcpMetrics(t2.AllocatedGearComputeUnLabeledCosts,FwGearDynamicCpuHours,TotalFwGearDynamicCpuHours, FwGearGroupTotalProjectCount) AS AllocatedGearComputeUnLabeledCosts

            , AllocateGcpMetrics(t2.AllocatedGcpStorageCosts,FwProjectStorageActiveGb,TotalFwProjectStorageActiveGb, FwGearGroupTotalProjectCount) AS AllocatedGcpStorageCosts

            , AllocateGcpMetrics(t2.AllocatedGcpStorageStandardCosts,FwProjectStorageActiveGb,TotalFwProjectStorageActiveGb, FwGearGroupTotalProjectCount) AS AllocatedGcpStorageStandardCosts
            , AllocateGcpMetrics(t2.AllocatedGcpStorageStandardGb,FwProjectStorageActiveGb,TotalFwProjectStorageActiveGb, FwGearGroupTotalProjectCount) AS AllocatedGcpStorageStandardGb

            , AllocateGcpMetrics(t2.AllocatedGcpStorageColdlineGb,FwProjectStorageActiveGb,TotalFwProjectStorageActiveGb, FwGearGroupTotalProjectCount) AS AllocatedGcpStorageColdlineCosts
            , AllocateGcpMetrics(t2.AllocatedGcpStorageColdlineCosts,FwProjectStorageActiveGb,TotalFwProjectStorageActiveGb, FwGearGroupTotalProjectCount) AS AllocatedGcpStorageColdlineGb

            , AllocateGcpMetrics(t2.AllocatedGcpStorageArchiveCosts,FwProjectStorageActiveGb,TotalFwProjectStorageActiveGb, FwGearGroupTotalProjectCount) AS AllocatedGcpStorageArchiveCosts
            , AllocateGcpMetrics(t2.AllocatedGcpStorageArchiveGb,FwProjectStorageActiveGb,TotalFwProjectStorageActiveGb, FwGearGroupTotalProjectCount) AS AllocatedGcpStorageArchiveGb

            , AllocateGcpMetrics(t2.AllocatedGcpMiscCosts,FwGearDynamicCpuHours,TotalFwGearDynamicCpuHours, FwGearGroupTotalProjectCount) AS AllocatedGcpMiscCosts

	FROM
            `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearsV4_5` t1
        LEFT JOIN (
            SELECT
		*
            FROM
               `'"${Project}.${Dataset}"'.TempTotalOverheadMetricsV4_5`
            WHERE
                InvoiceMonth = @InvoiceMonth

        ) t2
	ON
	        t1.InvoiceMonth = t2.InvoiceMonth
        WHERE
               t1.InvoiceMonth = @InvoiceMonth
	   AND t1.FwGroup IS NOT NULL
	   AND t1.FwGroup != "flywheel-static"
	ORDER BY
	    t1.InvoiceMonth
            , t1.FwGroup
     ) ORDER BY InvoiceMonth, FwGroup, FwProject, FwGearName

     ;

SELECT 
  ROUND(SUM(AllocatedGearComputeCosts),2) AS AllocatedGearComputeCosts
  , ROUND(SUM(AllocatedGearComputeCpuHours),2) AS AllocatedGearComputeCpuHours
  , ROUND(SUM(AllocatedGearComputeDynamicCpuHours),2) AS AllocatedGearComputeDynamicCpuHours
  , ROUND(SUM(AllocatedGearComputeDynamicCosts),2) AS AllocatedGearComputeDynamicCosts

  , ROUND(SUM(AllocatedGearComputeStaticCpuHours),2) AS AllocatedGearComputeStaticCpuHours
  , ROUND(SUM(AllocatedGearComputeStaticCosts),2) AS AllocatedGearComputeStaticCosts

  , ROUND(SUM(AllocatedGearComputeLabeledCosts),2) AS AllocatedGearComputeLabeledCosts
  , ROUND(SUM(AllocatedGearComputeUnLabeledCosts),2) AS AllocatedGearComputeUnLabeledCosts
  , ROUND(SUM(AllocatedGcpStorageCosts),2) AS AllocatedGcpStorageCosts
  , ROUND(SUM(AllocatedGcpStorageStandardCosts),2) AS AllocatedGcpStorageStandardCosts
  , ROUND(SUM(AllocatedGcpStorageStandardGb),2) AS AllocatedGcpStorageStandardGb
  , ROUND(SUM(AllocatedGcpStorageColdlineCosts),2) AS AllocatedGcpStorageColdlineCosts
  , ROUND(SUM(AllocatedGcpStorageColdlineGb),2) AS AllocatedGcpStorageColdlineGb
  , ROUND(SUM(AllocatedGcpStorageArchiveCosts),2) AS AllocatedGcpStorageArchiveCosts
  , ROUND(SUM(AllocatedGcpStorageArchiveGb),2) AS AllocatedGcpStorageArchiveGb

  , ROUND(SUM(AllocatedGcpMiscCosts),2) AS AllocatedGcpMiscCosts

         FROM
             `'"${Project}.${Dataset}"'.TempAllocatedOverheadMetricsV4_5` 
;

DROP TABLE IF EXISTS
    `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearsOverheadV4_5`
    ;

CREATE TABLE IF NOT EXISTS
    `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearsOverheadV4_5`
    (
         InvoiceMonth				STRING
       , FwGroup				STRING

       , FwProject				STRING
       , FwGearName				STRING
       , FwGearCategory				STRING

       , AllocatedGearComputeCosts		FLOAT64
       , AllocatedGearComputeCpuHours		FLOAT64

       , AllocatedGearComputeDynamicCpuHours	FLOAT64
       , AllocatedGearComputeDynamicCosts	FLOAT64

       , AllocatedGearComputeStaticCpuHours	FLOAT64
       , AllocatedGearComputeStaticCosts	FLOAT64

       , AllocatedGearComputeLabeledCosts	FLOAT64
       , AllocatedGearComputeUnLabeledCosts	FLOAT64

       , AllocatedGcpStorageCosts		FLOAT64

       , AllocatedGcpStorageStandardCosts	FLOAT64
       , AllocatedGcpStorageStandardGb		FLOAT64
       , AllocatedGcpStorageColdlineCosts	FLOAT64
       , AllocatedGcpStorageColdlineGb		FLOAT64
       , AllocatedGcpStorageArchiveCosts	FLOAT64
       , AllocatedGcpStorageArchiveGb		FLOAT64

       , AllocatedGcpMiscCosts			FLOAT64

       , GcpGroupComputeCosts			FLOAT64

       , GcpGroupComputeCpuHours		FLOAT64
       , GcpGroupComputeDynamicCpuHours		FLOAT64
       , GcpGroupComputeDynamicCosts		FLOAT64
       , GcpGroupComputeStaticCpuHours		FLOAT64
       , GcpGroupComputeStaticCosts		FLOAT64
       , GcpGroupComputeLabeledCosts		FLOAT64
       , GcpGroupComputeUnLabeledCosts		FLOAT64

       , GcpGroupStorageCosts			FLOAT64

       , FwGearRunCount				FLOAT64
       , FwInitialAnalysisCount			FLOAT64

       , FwGearDynamicCpuHours			FLOAT64
       , FwGearStaticCpuHours			FLOAT64
       , FwProjectStorageGb			FLOAT64
       , FwProjectStorageActiveGb		FLOAT64
       , FwProjectStorageDeleteGb		FLOAT64

       , FwGearGroupTotalDynamicCpuHours	FLOAT64
       , FwGearGroupTotalStaticCpuHours		FLOAT64
       , FwGearGroupTotalStorageGb		FLOAT64
       , FwGearGroupTotalProjectCount		FLOAT64

    );


DELETE FROM 
    `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearsOverheadV4_5`
WHERE
    InvoiceMonth = @InvoiceMonth
    ;

INSERT
    `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearsOverheadV4_5`
    (

	SELECT
              t1.InvoiceMonth
            , t1.FwGroup
    
	    , IF (t1.FwProject IS NULL, "BogusGearProject", t1.FwProject) AS FwProject
	    , IF (t1.FwGearName IS NULL, "BogusGearName", t1.FwGearName) AS FwGearName
	    , IF (t1.FwGearCategory IS NULL, "BogusGearCategory", t1.FwGearCategory) AS FwGearCategory

            , t1.AllocatedGearComputeCosts + t2.AllocatedGearComputeCosts AS AllocatedGearComputeCosts
            , t1.AllocatedGearComputeCpuHours + t2.AllocatedGearComputeCpuHours AS AllocatedGearComputeCpuHours

            , t1.AllocatedGearComputeDynamicCpuHours + t2.AllocatedGearComputeDynamicCpuHours AS AllocatedGearComputeDynamicCpuHours
            , t1.AllocatedGearComputeDynamicCosts + t2.AllocatedGearComputeDynamicCosts AS AllocatedGearComputeDynamicCosts

            , t1.AllocatedGearComputeStaticCpuHours + t2.AllocatedGearComputeStaticCpuHours AS AllocatedGearComputeStaticCpuHours
            , t1.AllocatedGearComputeStaticCosts + t2.AllocatedGearComputeStaticCosts AS AllocatedGearComputeStaticCosts

            , t1.AllocatedGearComputeLabeledCosts + t2.AllocatedGearComputeLabeledCosts AS AllocatedGearComputeLabeledCosts
            , t1.AllocatedGearComputeUnLabeledCosts + t2.AllocatedGearComputeUnLabeledCosts AS AllocatedGearComputeUnLabeledCosts

            , t1.AllocatedGcpStorageCosts + t2.AllocatedGcpStorageCosts AS AllocatedGcpStorageCosts

            , t1.AllocatedGcpStorageStandardCosts + t2.AllocatedGcpStorageStandardCosts AS AllocatedGcpStorageStandardCosts
            , t1.AllocatedGcpStorageStandardGb + t2.AllocatedGcpStorageStandardGb AS AllocatedGcpStorageStandardGb

            , t1.AllocatedGcpStorageColdlineCosts + t2.AllocatedGcpStorageColdlineCosts AS AllocatedGcpStorageColdlineCosts
            , t1.AllocatedGcpStorageColdlineGb + t2.AllocatedGcpStorageColdlineGb AS AllocatedGcpStorageColdlineGb

            , t1.AllocatedGcpStorageArchiveCosts + t2.AllocatedGcpStorageArchiveCosts AS AllocatedGcpStorageArchiveCosts
            , t1.AllocatedGcpStorageArchiveGb + t2.AllocatedGcpStorageArchiveGb AS AllocatedGcpStorageArchiveGb

            , t1.AllocatedGcpMiscCosts + t2.AllocatedGcpMiscCosts AS AllocatedGcpMiscCosts

	    , t1.GcpGroupComputeCosts

	    , t1.GcpGroupComputeCpuHours
	    , t1.GcpGroupComputeDynamicCpuHours
	    , t1.GcpGroupComputeDynamicCosts
	    , t1.GcpGroupComputeStaticCpuHours
	    , t1.GcpGroupComputeStaticCosts
	    , t1.GcpGroupComputeLabeledCosts
	    , t1.GcpGroupComputeUnLabeledCosts

	    , t1.GcpGroupStorageCosts

	    , t1.FwGearRunCount
	    , t1.FwInitialAnalysisCount

	    , t1.FwGearDynamicCpuHours
	    , t1.FwGearStaticCpuHours
	    , t1.FwProjectStorageGb
	    , t1.FwProjectStorageActiveGb
	    , t1.FwProjectStorageDeletedGb

	    , t1.FwGearGroupTotalDynamicCpuHours
	    , t1.FwGearGroupTotalStaticCpuHours
	    , t1.FwGearGroupTotalStorageGb
	    , t1.FwGearGroupTotalProjectCount

	FROM
            `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearsV4_5` t1
        LEFT JOIN (
            SELECT
		*
            FROM
               `'"${Project}.${Dataset}"'.TempAllocatedOverheadMetricsV4_5`
            WHERE
                InvoiceMonth = @InvoiceMonth
		AND FwGroup IS NOT NULL
		AND FwGroup != "flywheel-static"

        ) t2
	ON
	        t1.InvoiceMonth = t2.InvoiceMonth
            AND t1.FwGroup = t2.FwGroup
	    AND t1.FwProject = t2.FwProject
	    AND t1.FwGearName = t2.FwGearName
#	    AND t1.FwGearCategory = t2.FwGearCategory
        WHERE
               t1.InvoiceMonth = @InvoiceMonth
	   AND t1.FwGroup IS NOT NULL
	   AND t1.FwGroup != "flywheel-static"
	ORDER BY
	    t1.InvoiceMonth
            , t1.FwGroup
	    , t1.FwProject
	    , t1.FwGearName
	    
     ) ORDER BY InvoiceMonth, FwGroup, FwProject, FwGearName

     ;

SELECT 
    FwGroup
         FROM
             `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearsOverheadV4_5` 
         WHERE
             InvoiceMonth = @InvoiceMonth

GROUP BY
      FwGroup
ORDER BY 
      FWGroup
    ;

SELECT
      ROUND(SUM(AllocatedGcpStorageArchiveCosts),2) AS AllocatedGcpStorageArchiveCosts
    , ROUND(SUM(AllocatedGcpStorageArchiveGb),2) AS AllocatedGcpStorageArchiveGb
FROM
    `'"${Project}.${Dataset}"'.TempAllocatedOverheadMetricsV4_5`
    ;

SELECT
      ROUND(SUM(AllocatedGcpStorageArchiveCosts),2) AS AllocatedGcpStorageArchiveCosts
    , ROUND(SUM(AllocatedGcpStorageArchiveGb),2) AS AllocatedGcpStorageArchiveGb
FROM
    `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearsV4_5`
WHERE
             InvoiceMonth = @InvoiceMonth
		AND FwGroup IS NOT NULL
		AND FwGroup != "flywheel-static"
    ;


SELECT 

  ROUND(SUM(AllocatedGearComputeCosts),2) AS AllocatedGearComputeCosts
  , ROUND(SUM(AllocatedGearComputeCpuHours),2) AS AllocatedGearComputeCpuHours
  , ROUND(SUM(AllocatedGearComputeDynamicCpuHours),2) AS AllocatedGearComputeDynamicCpuHours
  , ROUND(SUM(AllocatedGearComputeDynamicCosts),2) AS AllocatedGearComputeDynamicCosts

  , ROUND(SUM(AllocatedGearComputeStaticCpuHours),2) AS AllocatedGearComputeStaticCpuHours
  , ROUND(SUM(AllocatedGearComputeStaticCosts),2) AS AllocatedGearComputeStaticCosts

  , ROUND(SUM(AllocatedGearComputeLabeledCosts),2) AS AllocatedGearComputeLabeledCosts
  , ROUND(SUM(AllocatedGearComputeUnLabeledCosts),2) AS AllocatedGearComputeUnLabeledCosts
  , ROUND(SUM(AllocatedGcpStorageCosts),2) AS AllocatedGcpStorageCosts
  , ROUND(SUM(AllocatedGcpStorageStandardCosts),2) AS AllocatedGcpStorageStandardCosts
  , ROUND(SUM(AllocatedGcpStorageStandardGb),2) AS AllocatedGcpStorageStandardGb
  , ROUND(SUM(AllocatedGcpStorageColdlineCosts),2) AS AllocatedGcpStorageColdlineCosts
  , ROUND(SUM(AllocatedGcpStorageColdlineGb),2) AS AllocatedGcpStorageColdlineGb
  , ROUND(SUM(AllocatedGcpStorageArchiveCosts),2) AS AllocatedGcpStorageArchiveCosts
  , ROUND(SUM(AllocatedGcpStorageArchiveGb),2) AS AllocatedGcpStorageArchiveGb


  , ROUND(SUM(AllocatedGcpMiscCosts),2) AS AllocatedGcpMiscCosts

        
         FROM
             `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearsOverheadV4_5` 
         WHERE
             InvoiceMonth = @InvoiceMonth
	 GROUP BY
	     InvoiceMonth
    ;

DELETE FROM 
       `'"${Project}.${Dataset}.FwProjectAllocatedChargesV4"'`
    WHERE
        InvoiceMonth = @InvoiceMonth
;

INSERT
     `'"${Project}.${Dataset}"'.FwProjectAllocatedChargesV4`
    SELECT
          *
        , GcpAllocatedCosts + BscProjectTotalCharges AS ProjectTotalCharges
    FROM ( #1
        SELECT
              *
	      # *** these probably shoul be done before the overhead is allocated
            , IF (   FwGearRunCount = 0
    	          OR FwGearName LIKE "%Bogus%" 
    	        , 0.0
    	        , AllocatedGearComputeDynamicCosts / FwGearRunCount
    	      ) AS GcpAllocatedAvgRuntimeCosts
    
            , IF (   FwGearRunCount = 0
    	            OR FwGearName LIKE "%Bogus%" 
    	            , 0.0 
    	            , AllocatedGearComputeDynamicCpuHours / FwGearRunCount
    	        ) AS GcpAllocatedAvgRuntimeCpuHours
            , BscInitialAnalysisCharge + BscStorageCharge + BscProjectCharges AS BscProjectTotalCharges
        
        FROM ( #2
            SELECT
                  *
         	, calculateBscInitialAnalysisCharge(BscInitialAnalysisCount) AS BscInitialAnalysisCharge
         	, calculateBscProjectCharge(AllocatedGcpStorageStandardGb, AllocatedGcpStorageCosts) AS BscProjectCharges
         	, calculateBscStorageCharge(AllocatedGcpStorageCosts) AS BscStorageCharge


		FROM ( #3
    SELECT
          InvoiceMonth
        , FwGroup
        , FwProject
        , FwGearName
        , FwGearCategory

        , myZeroIfNull(FwGearRunCount) AS FwGearRunCount
        , myZeroIfNull(FwInitialAnalysisCount)	AS BscInitialAnalysisCount
        , myZeroIfNull(FwProjectStorageGb) AS FwProjectStorageGb

        , myZeroIfNull(AllocatedGcpStorageCosts) AS AllocatedGcpStorageCosts
        , myZeroIfNull(AllocatedGcpStorageStandardGb) AS AllocatedGcpStorageStandardGb

	, myZeroIfNull(AllocatedGearComputeCosts) AS AllocatedGearComputeCosts
        , myZeroIfNull(AllocatedGearComputeDynamicCosts) AS AllocatedGearComputeDynamicCosts
        , myZeroIfNull(AllocatedGearComputeDynamicCpuHours) AS AllocatedGearComputeDynamicCpuHours
        , myZeroIfNull(AllocatedGearComputeStaticCosts) AS AllocatedGearComputeStaticCosts
        , myZeroIfNull(AllocatedGearComputeStaticCpuHours) AS AllocatedGearComputeStaticCpuHours

        , myZeroIfNull(AllocatedGearComputeStaticCosts)	AS AllocatedGearComputeStaticGearCosts
        , myZeroIfNull(AllocatedGearComputeStaticCpuHours) AS AllocatedGearComputeStaticGearCpuHours
        , myZeroIfNull(NULL) AS AllocatedGearComputeStaticNonGearCosts
        , myZeroIfNull(NULL) AS AllocatedGearComputeStaticNonGearCpuHours

#        , myZeroIfNull(AllocatedComputeLabeledCosts) AS AllocatedComputeLabeledCosts
        , myZeroIfNull(AllocatedGearComputeUnLabeledCosts) AS AllocatedComputeUnlabeledCosts

        , myZeroIfNull(AllocatedGcpMiscCosts) AS AllocatedGcpMiscCosts

        , myZeroIfNull(AllocatedGearComputeCosts) 
	  + myZeroIfNull(AllocatedGcpStorageCosts)
	  + myZeroIfNull(AllocatedGcpMiscCosts) AS GcpAllocatedCosts


    FROM
             `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearsOverheadV4_5` 
         WHERE
             InvoiceMonth = @InvoiceMonth

	)
       )
       )

    ;

SELECT 

    ROUND(SUM(GcpAllocatedComputeCosts),2) AS AllocatedGearComputeCosts
#  , ROUND(SUM(GcpAllocatedComputeCpuHours),2) AS AllocatedGearComputeCpuHours

  , ROUND(SUM(GcpAllocatedComputeDynamicCpuHours),2) AS AllocatedGearComputeDynamicCpuHours
  , ROUND(SUM(GcpAllocatedComputeDynamicCosts),2) AS AllocatedGearComputeDynamicCosts

  , ROUND(SUM(GcpAllocatedComputeStaticCpuHours),2) AS AllocatedGearComputeStaticCpuHours
  , ROUND(SUM(GcpAllocatedComputeStaticCosts),2) AS AllocatedGearComputeStaticCosts

#  , ROUND(SUM(GcpAllocatedComputeLabeledCosts),2) AS AllocatedGearComputeLabeledCosts
  , ROUND(SUM(GcpAllocatedComputeUnlabeledCosts),2) AS AllocatedGearComputeUnLabeledCosts

  , ROUND(SUM(GcpAllocatedStorageCosts),2) AS AllocatedGcpStorageCosts

#  , ROUND(SUM(GcpAllocatedStorageStandardCosts),2) AS AllocatedGcpStorageStandardCosts
  , ROUND(SUM(GcpAllocatedStorageStandardGb),2) AS AllocatedGcpStorageStandardGb
#  , ROUND(SUM(GcpAllocatedStorageColdlineCosts),2) AS AllocatedGcpStorageColdlineCosts
#  , ROUND(SUM(GcpAllocatedStorageColdlineGb),2) AS AllocatedGcpStorageColdlineGb
#  , ROUND(SUM(GcpAllocatedStorageArchiveCosts),2) AS AllocatedGcpStorageArchiveCosts
#  , ROUND(SUM(GcpAllocatedStorageArchiveGb),2) AS AllocatedGcpStorageArchiveGb


  , ROUND(SUM(GcpAllocatedMiscCosts),2) AS AllocatedGcpMiscCosts

        , ROUND(SUM(BscInitialAnalysisCharge)) AS BscInitialAnalysisCharge

        , ROUND(SUM(BscProjectCharges)) AS BscProjectCharges
        , ROUND(SUM(BscStorageCharge)) AS BscStorageCharge
        , ROUND(SUM(GcpAllocatedAvgRuntimeCosts)) AS GcpAllocatedAvgRuntimeCosts
        , ROUND(SUM(GcpAllocatedAvgRuntimeCpuHours)) AS GcpAllocatedAvgRuntimeCpuHours

        , ROUND(SUM(BscProjectTotalCharges)) AS BscProjectTotalCharges
        , ROUND(SUM(ProjectTotalCharges)) AS ProjectTotalCharges
        
         FROM
	      `'"${Project}.${Dataset}"'.FwProjectAllocatedChargesV4`
         WHERE
             InvoiceMonth = @InvoiceMonth
	 GROUP BY
	     InvoiceMonth

    ;


'


