#!/bin/bash

#
# 2 input tables - FwUsageReport and FwJobsReport, containing the storage and job information for each
# invoice month
#
# TempGcpFwClassifiedCosts
#     All the charges from the current invoice month classified along
#     This table contains all the classifications we need from Gcp.
#
# Costs are what google charges us
# Charges are what we bill labs and PIs
#
# Classify all the GCP costs into
# Compute
#  Dynamic Gear Compute
#  Static Compute
#  Misc Compute
#  Non-Gear Related Dynamic compute - This is for groups which have compute costs and no gears run, so the compute costs 
#     distributed differently
#  Total Dynamic Costs
# Storage
#   Standard Cost/Hours
#   Coldline Cost/Hours
#   Archival Cost/Hours
#   Misc Costs
# Misc Costs - All the Costs which is not either Compute or Storage

# TempFwGroupProjectComputeMetrics
#     Cleanup of all the flywheel Job information for the current invoice month, grouped by group/project/gear

# TempFwGroupProjectStorageMetrics
#     Cleanup of all the flywheel Storage infomration for the current invoice month, grouped by group/project

# TempFwAllocatedGroupProjectComputeStorageMetrics
#     Join of TempFwGroupProjectComputeMetrics and TempFwGroupProjectStorageMetrics with BogusGears generated for
#     Group/Projects in storage to carry the storage metrics for the Group/Project/Gear
#     Includes group totals for gear metrics

# TempGcpFwAllocatedGroupProjectGearMetricsCosts
#     Join of TempFwAllocatedGroupProjectComputeStorageMetrics and TempGcpFwClassifiedCosts
#     Use functions to allocate costs across the Group/Project/Gears
#     Should be allocate costs per compute metric, allocate costs by storage metric
#     Does not assign charges -- only allocates costs

# BscAllocatedCharges
#     Use functions to allocate charges from TempGcpFwAllocatedGroupProjectGearMetricsCosts to drive the data studio reports
#     and iLab billling CSV

#
# BscGearCharges
#

# There is a basic problem of joining the storage and compute metrics across different levels of organization.  If you join on
#     Group/Project/Gear the storage metrics will be duplicated for each gear.  If you do not break it down to the gear level, you 
#     need another table to hold the gear costs information.
#     Really want all the storage to go the the Bogus gear, and not copied to the all the 
#
# Gcp - Data orginated from Gcp
# Fw - Dat originated from Flywheel
# Costs - What Google charged us
# Charges - What we're going to charge a fund
# AllocatedCosts - Costs we allocated to group/project/gear
# AllocatedCharges - Charges that were allocated to group/project/gear -- probably not really used
# Compute/Storage/Misc - Three main types of costs/charges
# TotalColumn - Totals for a column for prorating

# *** Should get rid of group level prorating.  Gcp group costs are a good check, but prorating should be across
#     the total metrics to simplify the tables and reduce the chance of getting the prorating wrong

# *** How do we deal with entire groups which have been deleted by the time we run the reports?

# *** Have to make sure every table is filtered through InvoiceMonth including the joined tables


CmdName=$(basename "$0")

syntax="${CmdName} [-d Dataset][-p Project][-v] {-m Month} {-y Year}"

function OutputControl {
    if [ -n "$opt_v" ]
    then
	cat
    else
	cat > /dev/null
    fi
}

while getopts d:m:p:vy: arg
do
	case "$arg" in
		d|m|p|v|y)
			eval "opt_${arg}=${OPTARG:=1}"
			;;
	esac
done

shift $(($OPTIND - 1))

if [ -z "$opt_y" ] || [ -z "$opt_m" ]
then
	echo "$syntax" 1>&2
	exit 1
fi

Dataset=BillingAllocation

[ -n "$opt_d" ] && Dataset="$opt_d"

Project=pennbrain-center
[ -n "$opt_p" ] && Project="$opt_p"

bq query --use_legacy_sql=false --format=csv --allow_large_results --max_rows=1000000 --parameter="InvoiceMonth:STRING:${opt_y}${opt_m}" '

DECLARE TotalFwStorageGb FLOAT64;

DECLARE TotalFwGearAnalysisCpuHours FLOAT64;
DECLARE TotalFwGearUtilityCpuHours FLOAT64;
DECLARE TotalFwGearGenericCpuHours FLOAT64;
DECLARE TotalFwGearDynamicCpuHours FLOAT64;
DECLARE TotalFwGearStaticCpuHours FLOAT64;

DECLARE TotalGcpComputeDynamicCpuHours FLOAT64;
DECLARE TotalGcpComputeStaticCpuHours FLOAT64;
DECLARE TotalGcpComputeGenericCpuHours FLOAT64;

DECLARE TotalGcpComputeUnlabeledCosts FLOAT64;
DECLARE TotalGcpComputeLabeledCosts FLOAT64;
DECLARE TotalGcpMiscCosts FLOAT64;
DECLARE TotalGcpMiscStaticCosts FLOAT64;
DECLARE TotalGcpMiscDynamicCosts FLOAT64;
DECLARE TotalGcpMiscLabeledCosts FLOAT64;
DECLARE TotalGcpMiscUnlabeledCosts FLOAT64;

DECLARE TotalGcpComputeStaticCosts FLOAT64;
DECLARE TotalGcpComputeDynamicCosts FLOAT64;
DECLARE FwComputeDefaultSsdSize FLOAT64 DEFAULT 200.0; # GibiBytes
DECLARE TotalGcpFwComputeNonGearCosts FLOAT64;

DECLARE TotalGcpStorageStandardCosts FLOAT64;
DECLARE TotalGcpStorageColdlineCosts FLOAT64;
DECLARE TotalGcpStorageArchiveCosts FLOAT64;
DECLARE TotalGcpStorageMiscCosts FLOAT64;

DECLARE TotalGcpStorageStandardGb FLOAT64;
DECLARE TotalGcpStorageColdlineGb FLOAT64;
DECLARE TotalGcpStorageArchiveGb FLOAT64;

DECLARE TotalGcpStaticStorageMiscCosts FLOAT64;

DECLARE GcpFwStaticStorageStandardCosts FLOAT64;
DECLARE GcpFwStaticStorageColdlineCosts FLOAT64;
DECLARE GcpFwStaticStorageArchiveCosts FLOAT64;
DECLARE TotalFwProjectStorageGb FLOAT64;


DECLARE TotalGcpFwMiscLabeledCosts FLOAT64;
DECLARE TotalGcpFwMiscUnlabeledCosts FLOAT64;
DECLARE TotalGcpFwMiscStaticCosts FLOAT64;

CREATE TEMP FUNCTION zeroIfNull(Value FLOAT64) RETURNS FLOAT64 AS (
  IF (Value IS NOT NULL, Value, 0.0)
  )
  ;

CREATE TEMP FUNCTION fwCpuMsToCpuHours(CpuMs FLOAT64) RETURNS FLOAT64 AS (
      CpuMs / 1000.0 / 3600.0
    );

CREATE TEMP FUNCTION isComputeCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
      IF (ServiceDescription = "Compute Engine", TRUE, FALSE)
    );

CREATE TEMP FUNCTION isComputeDynamicCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
    IF (    ServiceDescription = "Compute Engine"
        AND FwGroup IS NOT NULL
        AND FwGroup != "flywheel-static"
      , TRUE
      , FALSE)
    );

CREATE TEMP FUNCTION isComputeStaticCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
    IF (    ServiceDescription = "Compute Engine"
        AND FwGroup IS NOT NULL
        AND FwGroup = "flywheel-static"
      , TRUE 
      , FALSE)
    );

CREATE TEMP FUNCTION isComputeLabeledCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (    ServiceDescription = "Compute Engine"
      AND FwGroup IS NOT NULL
      , TRUE
      , FALSE)
  );

CREATE TEMP FUNCTION isComputeUnlabeledCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (    ServiceDescription = "Compute Engine"
        AND FwGroup IS NULL
      , TRUE
      , FALSE)
  );

CREATE TEMP FUNCTION isComputeDynamicCpuHours(ServiceDescription STRING, SkuDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     ServiceDescription = "Compute Engine"
       AND SkuDescription LIKE "%Instance Core%"
       AND FwGroup IS NOT NULL
       AND FwGroup != "flywheel-static"
    ,
    TRUE,
    FALSE)
  );

CREATE TEMP FUNCTION isComputeStaticCpuHours(ServiceDescription STRING, SkuDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     ServiceDescription = "Compute Engine"
       AND SkuDescription LIKE "%Instance Core%"
       AND FwGroup IS NOT NULL
       AND FwGroup = "flywheel-static"
    ,
    TRUE,
    FALSE)
  );

CREATE TEMP FUNCTION isSsdPdCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Compute Engine"
       AND
	   SkuDescription = "SSD backed PD Capacity"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isAnalysisGear(GearCategory STRING) RETURNS BOOLEAN AS (
  IF (GearCategory = "analysis", TRUE, FALSE)
  );

CREATE TEMP FUNCTION isGroupComputeNode(ComputeNode STRING) RETURNS BOOLEAN AS (
  IF (regexp_contains(ComputeNode,"^compute[^-][^-]*-"), TRUE, FALSE)
  );

CREATE TEMP FUNCTION isUtilityGear(GearCategory STRING) RETURNS BOOLEAN AS (
  IF (isAnalysisGear(GearCategory),FALSE,TRUE)
  );


CREATE TEMP FUNCTION isStorageStandardCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND
	   SkuDescription LIKE "Standard Storage%"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isStorageColdlineCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND
	   SkuDescription LIKE "Coldline Storage%"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isStorageArchiveCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND
	   SkuDescription LIKE "Archive Storage%"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isStorageMiscCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND SkuDescription NOT LIKE "Standard Storage%"
       AND SkuDescription NOT LIKE "Coldline Storage%"
       AND SkuDescription NOT LIKE "Archive Storage%"

  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscLabeledCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup IS NOT NULL
       AND FwGroup != "flywheel-static"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscUnlabeledCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup IS NULL
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscStaticCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup = "flywheel-static"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscDynamicCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup IS NOT NULL
       AND FwGroup != "flywheel-static"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription NOT LIKE "Compute Engine%"
       AND ServiceDescription NOT LIKE "Cloud Storage"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION OneTeraByte() RETURNS FLOAT64 AS (1024.0); # in Gibibytes

CREATE TEMP FUNCTION isTbOrMore(StorageUsage FLOAT64) RETURNS BOOL AS (
       IF ((StorageUsage > OneTeraByte()),
       	  TRUE,
	  FALSE
       )
);

CREATE TEMP FUNCTION BscStorageOverheadRate() RETURNS FLOAT64 AS (0.25);
CREATE TEMP FUNCTION BscInitialAnalysisRate() RETURNS FLOAT64 AS (25);
CREATE TEMP FUNCTION BscSmallProjectCharge() RETURNS FLOAT64 AS (8.33);
CREATE TEMP FUNCTION BscLargeProjectCharge() RETURNS FLOAT64 AS (20.66);
CREATE TEMP FUNCTION OneCent() RETURNS FLOAT64 AS (0.01);

CREATE TEMP FUNCTION calculateBscStorageCharge(StorageCharge FLOAT64) RETURNS FLOAT64 AS (
	  StorageCharge * BscStorageOverheadRate()
);

CREATE TEMP FUNCTION calculateBscInitialAnalysisCharge(InitialAnalysisCount FLOAT64) RETURNS FLOAT64 AS (
       InitialAnalysisCount * BscInitialAnalysisRate()
);


CREATE TEMP FUNCTION calculateBscProjectCharge(StorageStandardUsage FLOAT64, StorageCharge FLOAT64) RETURNS FLOAT64 AS (
        IF (round(StorageCharge,2) >= OneCent(),
	        IF (isTbOrMore(StorageStandardUsage),
		      BscLargeProjectCharge(),
		      BscSmallProjectCharge()
		),
		0.0
       )
);

CREATE TEMP FUNCTION prorate(x FLOAT64, y FLOAT64) RETURNS FLOAT64 AS (
       IF (y IS NULL OR y = 0.0, 0.0, x / y)
);

#
# 1 TempGcpClassifiedCostsV4
# 
#   Classify all the costs from Gcp
#
CREATE TABLE IF NOT EXISTS
       `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`
    (
	InvoiceMonth				STRING,
	FwGroup					STRING,
	GcpGroupComputeCosts			FLOAT64,
	GcpGroupComputeDynamicCpuHours		FLOAT64,
	GcpGroupComputeDynamicCosts		FLOAT64,
	GcpGroupComputeStaticCpuHours		FLOAT64,
	GcpGroupComputeStaticCosts		FLOAT64,
	GcpGroupComputeLabeledCosts		FLOAT64,
	GcpGroupComputeUnlabeledCosts		FLOAT64,
	GcpGroupStorageStandardCosts		FLOAT64,
	GcpGroupStorageStandardGb		FLOAT64,
	GcpGroupStorageColdlineCosts		FLOAT64,
	GcpGroupStorageColdlineGb		FLOAT64,
	GcpGroupStorageArchiveCosts		FLOAT64,
	GcpGroupStorageArchiveGb		FLOAT64,
	GcpGroupStorageMiscCosts		FLOAT64,
	GcpGroupMiscCosts			FLOAT64,
	GcpGroupMiscStaticCosts			FLOAT64,
	GcpGroupMiscDynamicCosts		FLOAT64,
	GcpGroupMiscUnlabeledCosts		FLOAT64,
	GcpGroupMiscLabeledCosts		FLOAT64,
	GcpGroupComputeCpuHours			FLOAT64,
	GcpComputeCostPerCpuHour		FLOAT64,
	GcpStorageStandarCostPerGbPerMonth	FLOAT64,
	GcpStorageColdlineCostPerGbPerMonth	FLOAT64,
	GcpStorageArchiveCostPerGbPerMonth	FLOAT64,
	GcpGroupStorageCosts			FLOAT64,
	GcpGroupStorageCostPerStandardGb	FLOAT64,
	GcpGroupCosts				FLOAT64,
    );

DELETE FROM
       `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth
;

INSERT
       `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`
    SELECT
        *
	, prorate(GcpGroupStorageCosts, GcpGroupStorageStandardGb) AS GcpGroupStorageCostPerStandardGb
	, zeroIfNull(GcpGroupComputeCosts) + zeroIfNull(GcpGroupStorageCosts) + zeroIfNull(GcpGroupMiscCosts) AS GcpGroupCosts
    FROM ( # A
        SELECT
            *
	  , zeroIfNull(GcpGroupComputeDynamicCpuHours) + zeroIfNull(GcpGroupComputeStaticCpuHours) as GcpGroupComputeCpuHours
    	  , prorate(GcpGroupComputeDynamicCosts, GcpGroupComputeDynamicCpuHours) AS GcpComputeCostPerCpuHour
    	  , prorate(GcpGroupStorageStandardCosts, GcpGroupStorageStandardGb) AS GcpStorageStandarCostPerGbPerMonth
    	  , prorate(GcpGroupStorageColdlineCosts, GcpGroupStorageColdlineGb) AS GcpStorageColdlineCostPerGbPerMonth
    	  , prorate(GcpGroupStorageArchiveCosts, GcpGroupStorageArchiveGb) AS GcpStorageArchiveCostPerGbPerMonth
    	  , (
    	      + zeroIfNull(GcpGroupStorageStandardCosts)
    	      + zeroIfNull(GcpGroupStorageColdlineCosts)
    	      + zeroIfNull(GcpGroupStorageArchiveCosts)
    	      + zeroIfNull(GcpGroupStorageMiscCosts)
    	    ) AS GcpGroupStorageCosts
    
        FROM ( # B
            SELECT
        	  InvoiceMonth
        	, FwGroup
        
        	#
        	# Compute
        	#   Core Hours Used
        	#   Total
        	#   $/CPU hour
        	#
        	, SUM(IF (isComputeCost(ServiceDescription,SkuDescription),
                       DiscountedCosts,
        	       0.0)) AS GcpGroupComputeCosts
        
                , SUM(IF (isComputeDynamicCpuHours(ServiceDescription,SkuDescription, FwGroup),
                       UsageAmount,
                       0.0)) AS GcpGroupComputeDynamicCpuHours
        
                , SUM(IF (isComputeDynamicCost(ServiceDescription,FwGroup),
                       DiscountedCosts,
        	       0.0)) AS GcpGroupComputeDynamicCosts
        
                , SUM(IF (isComputeStaticCpuHours(ServiceDescription,SkuDescription, FwGroup),
                       UsageAmount,
                       0.0)) AS GcpGroupComputeStaticCpuHours
        
                , SUM(IF (isComputeStaticCost(ServiceDescription,FwGroup),
                       DiscountedCosts,
        	       0.0)) AS GcpGroupComputeStaticCosts
        
                , SUM(IF (isComputeLabeledCost(ServiceDescription,FwGroup),
                       DiscountedCosts,
        	       0.0)) AS GcpGroupComputeLabeledCosts
        
                , SUM(IF (isComputeUnlabeledCost(ServiceDescription,FwGroup),
                       DiscountedCosts,
        	       0.0)) AS GcpGroupComputeUnlabeledCosts
        
                #
                # As of 2022-08-15 all storage is under flywheel static and none is grouped.
                #
                , SUM(IF (isStorageStandardCost(ServiceDescription,SkuDescription),
                    DiscountedCosts,
                    0.0)) AS GcpGroupStorageStandardCosts
           
                , SUM(IF (isStorageStandardCost(ServiceDescription,SkuDescription),
                    UsageAmount,
                    0.0)) AS GcpGroupStorageStandardGb
           
                , SUM(IF (isStorageColdlineCost(ServiceDescription,SkuDescription),
                    DiscountedCosts,
                    0.0)) AS GcpGroupStorageColdlineCosts
           
                , SUM(IF (isStorageColdlineCost(ServiceDescription,SkuDescription),
                    UsageAmount,
                    0.0)) AS GcpGroupStorageColdlineGb
           
                , SUM(IF (isStorageArchiveCost(ServiceDescription,SkuDescription),
                    DiscountedCosts,
                    0.0)) AS GcpGroupStorageArchiveCosts
           
                , SUM(IF (isStorageArchiveCost(ServiceDescription,SkuDescription),
                    UsageAmount,
                    0.0)) AS GcpGroupStorageArchiveGb
           
                , SUM(IF (isStorageMiscCost(ServiceDescription,SkuDescription),
                    DiscountedCosts,
                    0.0)) AS GcpGroupStorageMiscCosts
           
                #
                # Misc Costs
                #
                , SUM(IF (isMiscCost(ServiceDescription,SkuDescription),
                    DiscountedCosts,
                    0.0)) AS GcpGroupMiscCosts
   
                ,  SUM(IF (isMiscStaticCosts(ServiceDescription,FwGroup),
                    DiscountedCosts,
   	      	    0.0)) AS GcpGroupMiscStaticCosts
   
                ,  SUM(IF (isMiscDynamicCosts(ServiceDescription,FwGroup),
                    DiscountedCosts,
   	      	    0.0)) AS GcpGroupMiscDynamicCosts
   
   	        , SUM(IF (isMiscUnlabeledCosts(ServiceDescription,FwGroup),
                    DiscountedCosts,
   	            0.0)) AS GcpGroupMiscUnlabeledCosts
   
   	        , SUM(IF (isMiscLabeledCosts(ServiceDescription,FwGroup),
                    DiscountedCosts,
   		    0.0)) AS GcpGroupMiscLabeledCosts
   
             FROM (
   	         SELECT
   	               InvoiceMonth
   		     , FlywheelGroupName AS FwGroup
   		     , GcpProjectName
   		     , ServiceDescription
   		     , SkuDescription
   		     , UsageAmountInPricingUnits AS UsageAmount
   		     , UsagePricingUnit
   		     , zeroIfNull(Costs) + zeroIfNull(Discounts) AS DiscountedCosts
   		     , Discounts
   		     , Promotions
   	      	 FROM
                     `pennbrain-center.BillingAllocation.FlywheelCosts`
   
                 WHERE
		     InvoiceMonth = @InvoiceMonth

           
   	     )
           
             GROUP BY
                   InvoiceMonth
                 , FwGroup
           
             ORDER BY
                   InvoiceMonth
                 , FwGroup
       )
   )
   ORDER BY
         InvoiceMonth
       , FwGroup
   ;

#
# 2   `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeMetricsV4`
#
#	Sorts gear hours into utility and analysis hours
#	Sum everything else up into fwgroup/project/gear bins
CREATE TABLE IF NOT EXISTS
         `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeMetricsV4`
     (
         InvoiceMonth		STRING,
	 FwGroup		STRING,
	 FwProject		STRING,
	 FwGearName		STRING,
	 FwGearCategory		STRING,
	 FwGearRunCount		INTEGER,
	 FwGearAnalysisCpuHours	FLOAT64,
	 FwGearUtilityCpuHours	FLOAT64,
	 FwGearGenericCpuHours	FLOAT64,
	 FwGearDynamicCpuHours	FLOAT64,
	 FwGearStaticCpuHours	FLOAT64,
	 FwInitialAnalysisCount	INTEGER,
     );

DELETE FROM
         `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeMetricsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth
;

INSERT
         `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeMetricsV4`
    SELECT
        InvoiceMonth
      , FwGroup
      , FwProject
      , FwGearName
      , FwGearCategory
      , COUNT(FwGearName) AS FwGearRunCount
      , SUM(IF (isAnalysisGear(FwGearCategory), FwGearCpuHours, 0.0)) AS FwGearAnalysisCpuHours
      , SUM(IF (isAnalysisGear(FwGearCategory), 0.0, FwGearCpuHours)) AS FwGearUtilityCpuHours
      , SUM(FwGearCpuHours) AS FwGearGenericCpuHours
      , SUM(IF (isGroupComputeNode(job_compute_node_name), FwGearCpuHours, 0.0)) AS FwGearDynamicCpuHours
      , SUM(IF (isGroupComputeNode(job_compute_node_name), 0.0, FwGearCpuHours)) AS FwGearStaticCpuHours
      , SUM(FwGearInitialAnalysis) AS FwInitialAnalysisCount
    
    FROM (
        SELECT 
          
              invoice_month AS InvoiceMonth
            , REPLACE(`group`,"_","-") AS FwGroup
            , project AS FwProject
            , gear_name AS FwGearName
            , gear_category AS FwGearCategory
            #
            # Many more job cpu hours can be recorded than billed for
            # A 1 core compute node generates 1 cpu hour (and disk, ram, etc)
            # 24 jobs can be run on the single compute node and if they each take 10 minutes to run, that is 240 minutes of runtime,
            # but not an accurate reflection of what we are being billed for.
            #
            # We allocate the compute costs based on how much cpu hours flywheel records for each job
            # If flywheel says dicom2niix takes 3 cpu hours and ashsharpicv takes 1 cpu hour, then 3/4 of the cost is attributed
            # to dicom2niix and 1/4 to ashsharpicv
            #
            , fwCpuMsToCpuHours(job_runtime_ms * gcp_cpus) AS FwGearCpuHours
            , IF(initial_analysis,1,0) AS FwGearInitialAnalysis
   	    , job_compute_node_name
       
        FROM
	    `pennbrain-center.BillingAllocation.FwJobsReport` 
          
        WHERE
	     invoice_month = @InvoiceMonth
        
    )

    GROUP BY
        InvoiceMonth
        , FwGroup
        , FwProject
        , FwGearName
        , FwGearCategory

  ;

SET TotalGcpComputeStaticCpuHours = (
    SELECT
	SUM(GcpGroupComputeStaticCpuHours)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth        
    );

SET TotalGcpComputeStaticCosts = (
    SELECT
	SUM(GcpGroupComputeStaticCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth        
    );

SET TotalGcpComputeDynamicCosts = (
    SELECT
	SUM(GcpGroupComputeDynamicCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth        
    );

SET TotalGcpComputeUnlabeledCosts = (
    SELECT
	SUM(GcpGroupComputeUnlabeledCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth        
    ); 	

SET TotalGcpComputeLabeledCosts = (
    SELECT
	SUM(GcpGroupComputeLabeledCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth        
    ); 	

SET TotalGcpMiscCosts = (
    SELECT
	SUM(GcpGroupMiscCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`

    WHERE
        InvoiceMonth = @InvoiceMonth        
    );

SET TotalGcpMiscDynamicCosts = (
    SELECT
	SUM(GcpGroupMiscDynamicCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`

    WHERE
        InvoiceMonth = @InvoiceMonth        
    );

SET TotalGcpMiscStaticCosts = (
    SELECT
	SUM(GcpGroupMiscStaticCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`

    WHERE
        InvoiceMonth = @InvoiceMonth        

    );

SET TotalGcpMiscLabeledCosts = (
    SELECT
	SUM(GcpGroupMiscLabeledCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`

    WHERE
        InvoiceMonth = @InvoiceMonth        

    );

SET TotalGcpMiscUnlabeledCosts = (
    SELECT
	SUM(GcpGroupMiscUnlabeledCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`

    WHERE
        InvoiceMonth = @InvoiceMonth        

    );



SET TotalFwGearAnalysisCpuHours = (
    SELECT
        SUM(FwGearAnalysisCpuHours)
    FROM
        `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeMetricsV4`
    WHERE
        FwGroup IS NOT NULL
    AND FWGroup != "flywheel-static"
    AND InvoiceMonth = @InvoiceMonth        
)
;

SET TotalFwGearUtilityCpuHours = (
    SELECT
        SUM(FwGearUtilityCpuHours)
    FROM
        `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeMetricsV4`
    WHERE
        FwGroup IS NOT NULL
    AND FWGroup != "flywheel-static"
    AND InvoiceMonth = @InvoiceMonth        
)
;

SET TotalFwGearGenericCpuHours = (
    SELECT
        SUM(FwGearGenericCpuHours)
    FROM
        `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeMetricsV4`
    WHERE
        FwGroup IS NOT NULL
    AND FWGroup != "flywheel-static"
    AND InvoiceMonth = @InvoiceMonth        
)
;

SET TotalFwGearDynamicCpuHours = (
    SELECT
        SUM(FwGearDynamicCpuHours)
    FROM
        `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeMetricsV4`
    WHERE
        FwGroup IS NOT NULL
    AND InvoiceMonth = @InvoiceMonth        
)
;

SET TotalFwGearStaticCpuHours = (
    SELECT
        SUM(FwGearStaticCpuHours)
    FROM
        `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeMetricsV4`
    WHERE
        FwGroup IS NOT NULL
    AND InvoiceMonth = @InvoiceMonth        
)
;

SELECT FwComputeDefaultSsdSize;
SELECT TotalFwGearAnalysisCpuHours;
SELECT TotalFwGearUtilityCpuHours;
SELECT TotalGcpComputeStaticCosts;
SELECT TotalGcpComputeDynamicCosts;
SELECT TotalGcpComputeUnlabeledCosts;
SELECT TotalGcpComputeLabeledCosts;
SELECT TotalGcpMiscCosts;

#
# 3  `'"${Project}.${Dataset}"'.TempProjectStorageMetricsV4`
#
#    Gcp charges us for 106TB of Standard storage, flwheel can account for 79 of them
#
#    The Bogus gear name column is inserted so the join in the next table does not wind up duplicating all the storage
#    metrics across each gear  Solves a lot of problems
#
#

CREATE TABLE IF NOT EXISTS
       `'"${Project}.${Dataset}"'.TempFwGroupProjectStorageMetricsV4` 
    (
	InvoiceMonth			STRING,
	FwGroup				STRING,
	FwProject			STRING,
	FwGearName			STRING,
	FwProjectStorageSessionCount	INTEGER,
	FwProjectStorageGb		FLOAT64,
	FwProjectStorageDeletedGb	FLOAT64,
	FwProjectStorageActiveGb	FLOAT64,
    );

DELETE
       `'"${Project}.${Dataset}"'.TempFwGroupProjectStorageMetricsV4` 
    WHERE
        InvoiceMonth = @InvoiceMonth
;

INSERT
       `'"${Project}.${Dataset}"'.TempFwGroupProjectStorageMetricsV4` 
    SELECT
          InvoiceMonth
        , FwGroup
        , FwProject
	, "BogusStorageGear" AS FwGearName
	, SUM(FwProjectStorageSessionCount) AS FwProjectStorageSessionCount
	, SUM(FwProjectStorageGb) AS FwProjectStorageGb
	, SUM(FwProjectStorageDeletedGb) AS FwProjectStorageDeletedGb
	, SUM(FwProjectStorageActiveGb) AS FwProjectStorageActiveGb
    FROM (
        SELECT
            invoice_month AS InvoiceMonth
          , REPLACE(`group`,"_","-") AS FwGroup
          , project_label AS FwProject
	  , SUM(session_count) AS FwProjectStorageSessionCount
          , SUM(total_storage_byte_day / days / 1024.0 / 1024.0 / 1024.0) AS FwProjectStorageGb
          , IF (deleted, SUM(total_storage_byte_day / days / 1024.0 / 1024.0 / 1024.0), 0.0) AS FwProjectStorageDeletedGb
          , IF (NOT deleted, SUM(total_storage_byte_day / days / 1024.0 / 1024.0 / 1024.0), 0.0) AS FwProjectStorageActiveGb
        FROM
          `pennbrain-center.BillingAllocation.FwUsageReport`

        WHERE
          invoice_month = @InvoiceMonth
          AND project_label IS NOT NULL

        GROUP BY
            InvoiceMonth,
            FwGroup,
            FwProject,
	    deleted

        ORDER BY
            InvoiceMonth,
            FwGroup,
            FwProject
    )
    GROUP BY
            InvoiceMonth,
            FwGroup,
            FwProject
    ORDER BY
            InvoiceMonth,
            FwGroup,
            FwProject

;

SET TotalFwProjectStorageGb = (
    SELECT
        SUM(FwProjectStorageGb)
    FROM
        `'"${Project}.${Dataset}"'.TempFwGroupProjectStorageMetricsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth

)
;

SET TotalGcpStorageStandardCosts = (
    SELECT
        SUM(GcpGroupStorageStandardCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4` 
    WHERE
        InvoiceMonth = @InvoiceMonth
)
;

SET TotalGcpStorageColdlineCosts = (
    SELECT
        SUM(GcpGroupStorageColdLineCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4` 
    WHERE
        InvoiceMonth = @InvoiceMonth
)
;

SET TotalGcpStorageArchiveCosts = (
    SELECT
        SUM(GcpGroupStorageArchiveCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4` 
    WHERE
        InvoiceMonth = @InvoiceMonth
)
;

SET TotalGcpStorageMiscCosts = (
    SELECT
        SUM(GcpGroupStorageMiscCosts)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4` 
    WHERE
        InvoiceMonth = @InvoiceMonth
)
;

SET TotalGcpStorageStandardGb = (
    SELECT
        SUM(GcpGroupStorageStandardGb)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4` 
    WHERE
        InvoiceMonth = @InvoiceMonth
)
;

SET TotalGcpStorageColdlineGb = (
    SELECT
        SUM(GcpGroupStorageColdLineGb)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4` 
    WHERE
        InvoiceMonth = @InvoiceMonth
)
;

SET TotalGcpStorageArchiveGb = (
    SELECT
        SUM(GcpGroupStorageArchiveGb)
    FROM
        `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4` 
    WHERE
        InvoiceMonth = @InvoiceMonth
)
;

SELECT
	  TotalFwProjectStorageGb
	, TotalGcpStorageStandardCosts
	, TotalGcpStorageColdlineCosts
	, TotalGcpStorageArchiveCosts
	, TotalGcpStorageMiscCosts
;

#
# TempFwAllocatedGroupProjectComputeStorageMetrics
#
CREATE TABLE IF NOT EXISTS
        `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeStorageMetricsV4`
    (
        InvoiceMonth				STRING,
        FwGroup					STRING,
        FwProject				STRING,
        FwGearName				STRING,
        FwGearCategory				STRING,
        FwGearRunCount				FLOAT64,

        FwGearAnalysisCpuHours			FLOAT64,
        FwGearUtilityCpuHours			FLOAT64,
        FwGearGenericCpuHours			FLOAT64,
        FwGearDynamicCpuHours			FLOAT64,
        FwGearStaticCpuHours			FLOAT64,

        FwInitialAnalysisCount			FLOAT64,

        FwGearGroupTotalAnalysisCpuHours	FLOAT64,
        FwGearGroupTotalUtilityCpuHours		FLOAT64,
        FwGearGroupTotalGenericCpuHours		FLOAT64,
        FwGearGroupTotalDynamicCpuHours		FLOAT64,
        FwGearGroupTotalStaticCpuHours		FLOAT64,

        FwProjectStorageGb			FLOAT64,
        FwProjectStorageActiveGb		FLOAT64,
        FwProjectStorageDeletedGb		FLOAT64,

        FwProjectGroupTotalStorageGb		FLOAT64,
        FwProjectGroupTotalStorageActiveGb	FLOAT64,
        FwProjectGroupTotalStorageDeletedGb	FLOAT64,

    );


DELETE FROM 
        `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeStorageMetricsV4`
    WHERE
        InvoiceMonth = @InvoiceMonth
;

INSERT
        `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeStorageMetricsV4`
    SELECT
          IF (t1.InvoiceMonth IS NULL, t2.InvoiceMonth, t1.InvoiceMonth) AS InvoiceMonth
	, IF (t1.FwGroup IS NULL, t2.FwGroup, t1.FwGroup) AS FwGroup
	, IF (t1.FwProject IS NULL, t2.FwProject, t1.FwProject) AS FwProject
	, IF (t1.FwGearName IS NULL, t2.FwGearName, t1.FwGearName) AS FwGearName
	, FwGearCategory
	, SUM(IF (t1.FwGearRunCount IS NULL, 0.0, t1.FwGearRunCount)) AS FwGearRunCount

	, SUM(IF (t1.FwGearAnalysisCpuHours IS NULL, 0.0, t1.FwGearAnalysisCpuHours)) AS FwGearAnalysisCpuHours
	, SUM(IF (t1.FwGearUtilityCpuHours IS NULL, 0.0, t1.FwGearUtilityCpuHours)) AS FwGearUtilityCpuHours
	, SUM(IF (t1.FwGearGenericCpuHours IS NULL, 0.0, t1.FwGearGenericCpuHours)) AS FwGearGenericCpuHours
	, SUM(IF (t1.FwGearDynamicCpuHours IS NULL, 0.0, t1.FwGearDynamicCpuHours)) AS FwGearDynamicCpuHours
	, SUM(IF (t1.FwGearStaticCpuHours IS NULL, 0.0, t1.FwGearStaticCpuHours)) AS FwGearStaticCpuHours
	, SUM(IF (t1.FwInitialAnalysisCount IS NULL, 0.0, t1.FwInitialAnalysisCount)) AS FwInitialAnalysisCount

	, SUM(IF (t1.FwGearGroupTotalAnalysisCpuHours IS NULL, 0.0, t1.FwGearGroupTotalAnalysisCpuHours)) AS FwGearGroupTotalAnalysisCpuHours
	, SUM(IF (t1.FwGearGroupTotalUtilityCpuHours IS NULL, 0.0, t1.FwGearGroupTotalUtilityCpuHours)) AS FwGearGroupTotalUtilityCpuHours
	, SUM(IF (t1.FwGearGroupTotalGenericCpuHours IS NULL, 0.0, t1.FwGearGroupTotalGenericCpuHours)) AS FwGearGroupTotalGenericCpuHours
	, SUM(IF (t1.FwGearGroupTotalDynamicCpuHours IS NULL, 0.0, t1.FwGearGroupTotalDynamicCpuHours)) AS FwGearGroupTotalDynamicCpuHours
	, SUM(IF (t1.FwGearGroupTotalStaticCpuHours IS NULL, 0.0, t1.FwGearGroupTotalStaticCpuHours)) AS FwGearGroupTotalStaticCpuHours

	, SUM(IF (t2.FwProjectStorageGb IS NULL, 0.0, t2.FwProjectStorageGb)) AS FwProjectStorageGb
	, SUM(IF (t2.FwProjectStorageActiveGb IS NULL, 0.0, t2.FwProjectStorageActiveGb)) AS FwProjectStorageActiveGb
	, SUM(IF (t2.FwProjectStorageDeletedGb IS NULL, 0.0, t2.FwProjectStorageDeletedGb)) AS FwProjectStorageDeletedGb

	, SUM(IF (t2.FwProjectGroupTotalStorageGb IS NULL, 0.0, t2.FwProjectGroupTotalStorageGb)) AS FwProjectGroupTotalStorageGb
	, SUM(IF (t2.FwProjectGroupTotalStorageActiveGb IS NULL, 0.0, t2.FwProjectGroupTotalStorageActiveGb)) AS FwProjectGroupTotalStorageActiveGb
	, SUM(IF (t2.FwProjectGroupTotalStorageDeletedGb IS NULL, 0.0, t2.FwProjectGroupTotalStorageDeletedGb)) AS FwProjectGroupTotalStorageDeletedGb

    FROM (
        SELECT 
            t3.*
          , t4.FwGearGroupTotalAnalysisCpuHours
          , t4.FwGearGroupTotalUtilityCpuHours
          , t4.FwGearGroupTotalGenericCpuHours
          , t4.FwGearGroupTotalDynamicCpuHours
          , t4.FwGearGroupTotalStaticCpuHours
	FROM (
	    SELECT
	        *
            FROM 
                `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeMetricsV4`
            WHERE
                InvoiceMonth = @InvoiceMonth
	) t3
# *** Why is this a left join?
        LEFT JOIN (
          SELECT
              InvoiceMonth
            , FwGroup
#            , FwProject
#            , FwGearName
            , SUM(FwGearAnalysisCpuHours) AS FwGearGroupTotalAnalysisCpuHours
            , SUM(FwGearUtilityCpuHours) AS FwGearGroupTotalUtilityCpuHours
            , SUM(FwGearGenericCpuHours) AS FwGearGroupTotalGenericCpuHours
            , SUM(FwGearDynamicCpuHours) AS FwGearGroupTotalDynamicCpuHours
            , SUM(FwGearStaticCpuHours) AS FwGearGroupTotalStaticCpuHours
          FROM
              `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeMetricsV4` 
          WHERE
              InvoiceMonth = @InvoiceMonth

          GROUP BY
              InvoiceMonth
            , FwGroup
#            , FwProject
#            , FwGearName
        ) t4

        ON
              t3.InvoiceMonth = t4.InvoiceMonth
          AND t3.FwGroup = t4.FwGroup
#          AND t3.FwProject = t4.FwProject
#          AND t3.FwGearName = t4.FwGearName
    ) t1
    FULL OUTER JOIN (
    	 # Storage is allocated by all flywheel totals - not by group totals

        SELECT 
            t5.*
          , t6.FwProjectGroupTotalStorageGb
          , t6.FwProjectGroupTotalStorageActiveGb
          , t6.FwProjectGroupTotalStorageDeletedGb
        FROM (
	    SELECT
	        *
	    FROM	
                `'"${Project}.${Dataset}"'.TempFwGroupProjectStorageMetricsV4` 
            WHERE
                InvoiceMonth = @InvoiceMonth
	) t5
        LEFT JOIN (
          SELECT
              InvoiceMonth
            , FwGroup
#            , FwProject
#            , FwGearName
            , SUM(FwProjectStorageGb) AS FwProjectGroupTotalStorageGb
            , SUM(FwProjectStorageActiveGb) AS FwProjectGroupTotalStorageActiveGb
            , SUM(FwProjectStorageDeletedGb) AS FwProjectGroupTotalStorageDeletedGb
          FROM
            `'"${Project}.${Dataset}"'.TempFwGroupProjectStorageMetricsV4`  
        WHERE
            InvoiceMonth = @InvoiceMonth
          GROUP BY
              InvoiceMonth
            , FwGroup
        ) t6
        ON
              t5.InvoiceMonth = t5.InvoiceMonth
          AND t5.FwGroup = t6.FwGroup
#          AND t5.FwProject = t6.FwProject
#          AND t5.FwGearName = t6.FwGearName
    ) t2
    
    ON
	    t1.InvoiceMonth = t2.InvoiceMonth
	AND t1.FwGroup = t2.FwGroup
	AND t1.FwProject = t2.FwProject
	AND t1.FwGearName = t2.FwGearName

    GROUP BY
          InvoiceMonth
        , FwGroup
        , FwProject
        , FwGearName
        , FwGearCategory

    ORDER BY
          InvoiceMonth
	, FwGroup
	, FwProject
	, FwGearName
        , FwGearCategory

;


SELECT
     SUM(FwGearRunCount) AS FwGearRunCount
   , SUM(FwInitialAnalysisCount) AS FwInitialAnalysisCount

   #
   # Summing the GroupTotal does not make sense.  You would be counting the group totals 
   # for each gear in the group/project
   #
   , SUM(FwGearAnalysisCpuHours) AS FwGearAnalysisCpuHours
   , SUM(FwGearUtilityCpuHours) AS FwGearUtilityCpuHours
   , SUM(FwGearGenericCpuHours) AS FwGearGenericCpuHours

   , SUM(FwProjectStorageGb) AS FwProjectStorageGb
   , SUM(FwProjectStorageActiveGb) AS FwProjectStorageActiveGb
   , SUM(FwProjectStorageDeletedGb) AS FwProjectStorageDeletedGb

FROM
  `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeStorageMetricsV4`
        WHERE
            InvoiceMonth = @InvoiceMonth
;


#
# 5 `'"${Project}.${Dataset}"'.TempGcpFwAllocatedGroupProjectGearMetricsCostsV4`
#
#   This is where all group only metrics and costs get allocated to the gear level
#
CREATE TABLE IF NOT EXISTS
        `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearMetricCostsV4`
    (
        InvoiceMonth				STRING,
        FwGroup					STRING,
        GcpGroupComputeCosts			FLOAT64,
        GcpGroupComputeDynamicCosts		FLOAT64,
        GcpGroupComputeStaticCosts		FLOAT64,
        GcpGroupComputeLabeledCosts		FLOAT64,
        GcpGroupComputeUnlabeledCosts		FLOAT64,
        GcpGroupStorageStandardCosts		FLOAT64,
        GcpGroupStorageStandardGb		FLOAT64,
        GcpGroupStorageColdlineCosts		FLOAT64,
        GcpGroupStorageColdlineGb		FLOAT64,
        GcpGroupStorageArchiveCosts		FLOAT64,
        GcpGroupStorageArchiveGb		FLOAT64,
        GcpGroupStorageMiscCosts		FLOAT64,
        GcpGroupMiscCosts			FLOAT64,
        GcpGroupMiscStaticCosts			FLOAT64,
        FwProject				STRING,
        FwGearName				STRING,
        FwGearCategory				STRING,
        FwGearRunCount				FLOAT64,
        FwGearAnalysisCpuHours			FLOAT64,
        FwGearUtilityCpuHours			FLOAT64,
        FwGearGenericCpuHours			FLOAT64,
        FwInitialAnalysisCount			FLOAT64,
        FwGearGroupTotalAnalysisCpuHours	FLOAT64,
        FwGearGroupTotalUtilityCpuHours		FLOAT64,
        FwGearGroupTotalGenericCpuHours		FLOAT64,
        FwProjectStorageGb			FLOAT64,
        FwProjectStorageActiveGb		FLOAT64,
        FwProjectStorageDeletedGb		FLOAT64,
        FwProjectGroupTotalStorageGb		FLOAT64,
        FwProjectGroupTotalStorageActiveGb	FLOAT64,
        FwProjectGroupTotalStorageDeletedGb	FLOAT64,
        GcpAllocatedComputeDynamicCpuHours	FLOAT64,
        GcpAllocatedComputeDynamicCosts		FLOAT64,
        GcpAllocatedComputeLabeledCosts		FLOAT64,
        GcpAllocatedComputeUnlabeledCosts	FLOAT64,
        GcpAllocatedComputeStaticCpuHours	FLOAT64,
        GcpAllocatedComputeStaticCosts		FLOAT64,
        GcpAllocatedMiscCosts			FLOAT64,
        GcpAllocatedMiscStaticCosts		FLOAT64,
        GcpAllocatedMiscDynamicCosts		FLOAT64,
        GcpAllocatedMiscLabeledCosts		FLOAT64,
        GcpAllocatedMiscUnlabeledCosts		FLOAT64,
        GcpAllocatedStorageStandardCosts	FLOAT64,
        GcpAllocatedStorageStandardGb		FLOAT64,
        GcpAllocatedStorageColdlineCosts	FLOAT64,
        GcpAllocatedStorageColdlineGb		FLOAT64,
        GcpAllocatedStorageArchiveCosts		FLOAT64,
        GcpAllocatedStorageArchiveGb		FLOAT64,
        GcpAllocatedStorageMiscCosts		FLOAT64,
        GcpAllocatedComputeCosts		FLOAT64,
        GcpAllocatedStorageCosts		FLOAT64,
        GcpAllocatedCosts			FLOAT64,
    );

DELETE FROM 
       `'"${Project}.${Dataset}.TempAllocatedGroupProjectGearMetricCostsV4"'`
    WHERE
        InvoiceMonth = @InvoiceMonth
;

INSERT

  `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearMetricCostsV4`

    SELECT
          *
	,   zeroIfNull(GcpAllocatedComputeCosts) 
	  + zeroIfNull(GcpAllocatedStorageCosts)
	  + zeroIfNull(GcpAllocatedMiscCosts) AS GcpAllocatedCosts
    FROM (
      SELECT
            *
	    # *** Would really like to split GcpAllocatedComputeDynamicCosts into GcpAllocatedComputeDynamicGearCosts and 
	    #     GcpAllocatedComputeDynamicNonGearCosts
	  ,   zeroIfNull(GcpAllocatedComputeDynamicCosts)
	    + zeroIfNull(GcpAllocatedComputeStaticCosts) 
	    + zeroIfNull(GcpAllocatedComputeUnlabeledCosts) AS GcpAllocatedComputeCosts

	  ,   zeroIfNull(GcpAllocatedStorageStandardCosts)
	    + zeroIfNull(GcpAllocatedStorageColdlineCosts)
	    + zeroIfNull(GcpAllocatedStorageArchiveCosts) 
	    + zeroIfNull(GcpAllocatedStorageMiscCosts) AS GcpAllocatedStorageCosts
      FROM (
          SELECT

 	      IF (t1.FwGroup IS NOT NULL, t1.InvoiceMonth, t2.InvoiceMonth) AS InvoiceMonth
	    , IF (t1.FwGroup IS NOT NULL, t1.FwGroup, t2.FwGroup) AS FwGroup

	    , GcpGroupComputeCosts	
	    , GcpGroupComputeDynamicCosts	
	    , GcpGroupComputeStaticCosts	
	    , GcpGroupComputeLabeledCosts	
	    , GcpGroupComputeUnlabeledCosts	

	    , GcpGroupStorageStandardCosts	
	    , GcpGroupStorageStandardGb	
	    , GcpGroupStorageColdlineCosts	
	    , GcpGroupStorageColdlineGb	
	    , GcpGroupStorageArchiveCosts	
	    , GcpGroupStorageArchiveGb	

	    , GcpGroupStorageMiscCosts	

	    , GcpGroupMiscCosts	
	    , GcpGroupMiscStaticCosts

	    , FwProject
	    , IF (FwGearName IS NULL, "BogusComputeGear", FwGearName) as FwGearName
	    , FwGearCategory	
	    , FwGearRunCount	

	    , FwGearAnalysisCpuHours	
	    , FwGearUtilityCpuHours	
	    , FwGearGenericCpuHours	
	    , FwInitialAnalysisCount	
	    , FwGearGroupTotalAnalysisCpuHours	
	    , FwGearGroupTotalUtilityCpuHours	
	    , FwGearGroupTotalGenericCpuHours	

	    , FwProjectStorageGb
	    , FwProjectStorageActiveGb
	    , FwProjectStorageDeletedGb	
	    , FwProjectGroupTotalStorageGb	
	    , FwProjectGroupTotalStorageActiveGb	
	    , FwProjectGroupTotalStorageDeletedGb

	    # 
	    # We need to allocate Dynamic/Static cpu hours to give accurate gear average runtimes 
	    # but real chargeable dynamic hours are only known by group and the static hours are all in flywheel static
	    #
	    # *** here is where costs are allocated according to Analysis/Utility hours, and they should be Group/Site
	    #

# *** This chunk prorates the gcp hours and costs according to the Flywheel analysis/utility gear cpu hour metrics.
#     going to try allocating on flywheel compute node cpu metrics
#     Still using flywheel metrics to distribute gcp numbers and costs across the group/project/gears but compute nodes metrics 
#     are arguably better proxies for which group/project/gear was using gcp resources than the analysis/utility divide
#     Also like the way the AllocatedComputeDynamic hours are derived from Dynamic metrics
#
	    , GcpGroupComputeDynamicCpuHours * prorate(FwGearDynamicCpuHours, FwGearGroupTotalDynamicCpuHours) AS GcpAllocatedComputeDynamicCpuHours
	    , GcpGroupComputeDynamicCosts * prorate(FwGearDynamicCpuHours, FwGearGroupTotalDynamicCpuHours) AS GcpAllocatedComputeDynamicCosts
	    , GcpGroupComputeLabeledCosts * prorate(FwGearDynamicCpuHours, FwGearGroupTotalDynamicCpuHours) AS GcpAllocatedComputeLabeledCosts
        
	    , TotalGcpComputeUnlabeledCosts * prorate(FwGearDynamicCpuHours, TotalFwGearDynamicCpuHours) AS GcpAllocatedComputeUnlabeledCosts

	    #
	    # Have to treat static costs special as all static compute costs are only in the flywheel-static group, so 
	    #     prorate from the TotalGcpComputeStaticCosts instead of from the group

	    , TotalGcpComputeStaticCpuHours * prorate(FwGearStaticCpuHours, TotalFwGearStaticCpuHours) AS GcpAllocatedComputeStaticCpuHours
	    , TotalGcpComputeStaticCosts * prorate(FwGearStaticCpuHours, TotalFwGearStaticCpuHours) AS GcpAllocatedComputeStaticCosts


# *** Older analysis/utility gear allocation
#	    , GcpGroupComputeDynamicCpuHours * prorate(FwGearAnalysisCpuHours, FwGearGroupTotalAnalysisCpuHours) AS GcpAllocatedComputeDynamicCpuHours
#	    , GcpGroupComputeDynamicCosts * prorate(FwGearAnalysisCpuHours, FwGearGroupTotalAnalysisCpuHours) AS GcpAllocatedComputeDynamicCosts
#	    , GcpGroupComputeLabeledCosts * prorate(FwGearAnalysisCpuHours, FwGearGroupTotalAnalysisCpuHours) AS GcpAllocatedComputeLabeledCosts
#        
#	    , TotalGcpComputeUnlabeledCosts * prorate(FwGearAnalysisCpuHours, TotalFwGearAnalysisCpuHours) AS GcpAllocatedComputeUnlabeledCosts
#
#	    #
#	    # Have to treat static costs special as all static compute costs are only in the flywheel-static group, so 
#	    #     prorate from the TotalGcpComputeStaticCosts instead of from the group
#
#	    , TotalGcpComputeStaticCpuHours * prorate(FwGearUtilityCpuHours, TotalFwGearUtilityCpuHours) AS GcpAllocatedComputeStaticCpuHours
#	    , TotalGcpComputeStaticCosts * prorate(FwGearUtilityCpuHours, TotalFwGearUtilityCpuHours) AS GcpAllocatedComputeStaticCosts

	    #
	    #  Have to prorate from the Totals since misc costs span non-group costs
	    #
            , TotalGcpMiscCosts * prorate(FwGearGenericCpuHours, TotalFwGearGenericCpuHours) AS GcpAllocatedMiscCosts
            , TotalGcpMiscStaticCosts * prorate(FwGearGenericCpuHours, FwGearGroupTotalGenericCpuHours) AS GcpAllocatedMiscStaticCosts
            , TotalGcpMiscDynamicCosts * prorate(FwGearGenericCpuHours, FwGearGroupTotalGenericCpuHours) AS GcpAllocatedMiscDynamicCosts
            , TotalGcpMiscLabeledCosts * prorate(FwGearGenericCpuHours, FwGearGroupTotalGenericCpuHours) AS GcpAllocatedMiscLabeledCosts
            , TotalGcpMiscUnlabeledCosts * prorate(FwGearGenericCpuHours, FwGearGroupTotalGenericCpuHours) AS GcpAllocatedMiscUnlabeledCosts

	    # 
	    # These costs and metrics are allocated by invoicemonth/group/project/gear
	    # 
	   , TotalGcpStorageStandardCosts * prorate(FwProjectStorageGb, TotalFwProjectStorageGb) AS GcpAllocatedStorageStandardCosts
	   , TotalGcpStorageStandardGb * prorate(FwProjectStorageGb, TotalFwProjectStorageGb) AS GcpAllocatedStorageStandardGb
	   , TotalGcpStorageColdlineCosts * prorate(FwProjectStorageGb, TotalFwProjectStorageGb) AS GcpAllocatedStorageColdlineCosts
	   , TotalGcpStorageColdlineGb * prorate(FwProjectStorageGb, TotalFwProjectStorageGb) AS GcpAllocatedStorageColdlineGb
	   , TotalGcpStorageArchiveCosts * prorate(FwProjectStorageGb, TotalFwProjectStorageGb) AS GcpAllocatedStorageArchiveCosts
	   , TotalGcpStorageArchiveGb * prorate(FwProjectStorageGb, TotalFwProjectStorageGb) AS GcpAllocatedStorageArchiveGb

	   , TotalGcpStorageMiscCosts * prorate(FwProjectStorageGb, TotalFwProjectStorageGb) AS GcpAllocatedStorageMiscCosts


          FROM (
            SELECT
              *
            FROM
               `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4` 
	    #
	    # The merged Gcp Costs and Flywheel Metrics do not include the null group or flywheel static
	    # so costs are only allocated real flywheel groups
	    #
	    WHERE
  	        InvoiceMonth = @InvoiceMonth
	    	AND FwGroup IS NOT NULL
		AND FwGroup != "flywheel-static"
        
          ) t1
          FULL OUTER JOIN (
               SELECT
	             *
	       FROM
	        `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeStorageMetricsV4`
        
          ) t2
	  ON
	          t1.InvoiceMonth = t2.InvoiceMonth
	      AND t1.FwGroup = t2.FwGroup
       )
	  ORDER BY
	        InvoiceMonth
	      , FwGroup
	      , FwProject
	      , FwGearName

    )
;

#
# There is a corner case where groups without analysis gears are being charged for compute resources
# Probably spinning a machine up or down across the invoice cutoff.  $4.24 in July 2022.  This table
# allocates those costs and hours to the BogusComputeGear so all the column summations match
#
INSERT INTO 
  `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearMetricCostsV4`

    SELECT
      InvoiceMonth
      , FwGroup

, GcpGroupComputeDynamicCosts AS GcpGroupComputeCosts
, GcpGroupComputeDynamicCosts AS GcpGroupComputeDynamicCosts
, NULL AS GcpGroupComputeStaticCosts
, NULL AS GcpGroupComputeLabeledCosts
, NULL AS GcpGroupComputeUnlabeledCosts

, NULL AS GcpGroupStorageStandardCosts
, NULL AS GcpGroupStorageStandardGb
, NULL AS GcpGroupStorageColdlineCosts
, NULL AS GcpGroupStorageColdlineGb
, NULL AS GcpGroupStorageArchiveCosts
, NULL AS GcpGroupStorageArchiveGb

, NULL AS GcpGroupStorageMiscCosts

, NULL AS GcpGroupMiscCosts
, NULL AS GcpGroupMiscStaticCosts

      , "BogusProject" AS FwProject
      , "BogusComputeGear" AS FwGearName
, NULL AS FwGearCategory
, NULL AS FwGearRunCount

, NULL AS FwGearAnalysisCpuHours
, NULL AS FwGearUtilityCpuHours
, NULL AS FwGearGenericCpuHours
, NULL AS FwInitialAnalysisCount
, NULL AS FwGearGroupTotalAnalysisCpuHours
, NULL AS FwGearGroupTotalUtilityCpuHours
, NULL AS FwGearGroupTotalGenericCpuHours

, NULL AS FwProjectStorageGb
, NULL AS FwProjectStorageActiveGb
, NULL AS FwProjectStorageDeletedGb
, NULL AS FwProjectGroupTotalStorageGb
, NULL AS FwProjectGroupTotalStorageActiveGb
, NULL AS FwProjectGroupTotalStorageDeletedGb

, GcpGroupComputeDynamicCpuHours AS GcpAllocatedComputeDynamicCpuHours
, NULL AS GcpAllocatedComputeStaticCpuHours

      ,  GcpGroupComputeDynamicCosts AS GcpAllocatedComputeDynamicCosts
, NULL AS GcpAllocatedComputeStaticCosts
, NULL AS GcpAllocatedComputeLabeledCosts
, NULL AS GcpAllocatedComputeUnlabeledCosts

, NULL AS GcpAllocatedMiscCosts
, NULL AS GcpAllocatedMiscStaticCosts
, NULL AS GcpAllocatedMiscDynamicCosts
, NULL AS GcpAllocatedMiscLabeledCosts
, NULL AS GcpAllocatedMiscUnlabeledCosts

, NULL AS GcpAllocatedStorageStandardCosts
, NULL AS GcpAllocatedStorageStandardGb
, NULL AS GcpAllocatedStorageColdlineCosts
, NULL AS GcpAllocatedStorageColdlineGb
, NULL AS GcpAllocatedStorageArchiveCosts
, NULL AS GcpAllocatedStorageArchiveGb

, NULL AS GcpAllocatedStorageMiscCosts

, GcpGroupComputeDynamicCosts AS GcpAllocatedComputeCosts
, NULL AS GcpAllocatedStorageCosts
, NULL AS GcpAllocatedCosts

    FROM (
      SELECT
          IF (t1.InvoiceMonth IS NOT NULL, t1.InvoiceMonth, t2.InvoiceMonth) AS InvoiceMonth
        , IF (t1.FwGroup IS NOT NULL, t1.FwGroup, t2.FwGroup) AS FwGroup
        , t2.FwTotalGearAnalysisCpuHours
        , t1.GcpGroupComputeDynamicCosts
        , t1.GcpGroupComputeDynamicCpuHours
        
      FROM (
        SELECT
          InvoiceMonth
          , FwGroup
          , GcpGroupComputeDynamicCosts
          , GcpGroupComputeDynamicCpuHours
        FROM
          `'"${Project}.${Dataset}"'.TempGcpClassifiedCostsV4`
          #
          # The merged Gcp Costs and Flywheel Metrics should not include the null group or flywheel static
          # so costs are only allocated real flywheel groups
          #
        WHERE
	  InvoiceMonth = @InvoiceMonth
          AND FwGroup IS NOT NULL
          AND FwGroup != "flywheel-static" ) t1
      FULL OUTER JOIN (
        SELECT
          InvoiceMonth
          , FwGroup
          , SUM(FwGearAnalysisCpuHours) AS FwTotalGearAnalysisCpuHours
        FROM
          `'"${Project}.${Dataset}"'.TempFwGroupProjectComputeStorageMetricsV4`
        WHERE
	  InvoiceMonth = @InvoiceMonth
        GROUP BY
          InvoiceMonth,
          FwGroup ) t2
      ON
        t1.InvoiceMonth = t2.InvoiceMonth
        AND t1.FwGroup = t2.FwGroup )
      WHERE
        FwTotalGearAnalysisCpuHours = 0.0
        AND GcpGroupComputeDynamicCosts > 0.0




;

SELECT
      SUM(FwInitialAnalysisCount) AS TotalGcpAllocatedInitialAnalysisCount
    , SUM(GcpAllocatedComputeDynamicCosts) AS TotalGcpAllocatedComputeDynamicCosts

    , SUM(GcpAllocatedStorageStandardGb) AS TotalGcpAllocatedStorageStandardGb
    , SUM(GcpAllocatedStorageStandardCosts) AS TotalGcpAllocatedStorageStandardCosts
    , SUM(GcpAllocatedStorageColdlineGb) AS TotalGcpAllocatedStorageColdlineGb
    , SUM(GcpAllocatedStorageColdlineCosts) AS TotalGcpAllocatedStorageColdlineCosts
    , SUM(GcpAllocatedStorageArchiveGb) AS TotalGcpAllocatedStorageArchiveGb
    , SUM(GcpAllocatedStorageArchiveCosts) AS TotalGcpAllocatedStorageArchiveCosts


FROM
    `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearMetricCostsV4`
       WHERE
	  InvoiceMonth = @InvoiceMonth
;


#
# This table calculates the BSC charges
#

CREATE TABLE IF NOT EXISTS
       `'"${Project}.${Dataset}."'FwProjectAllocatedChargesV4`
    (
	InvoiceMonth					STRING,
	FwGroup						STRING,
	FwProject					STRING,
	FwGearName					STRING,
	FwGearCategory					STRING,
	FwInitialAnalysisCount				FLOAT64,
	FwGearRunCount					FLOAT64,
	FwProjectStorageGb				FLOAT64,
	GcpAllocatedStorageCosts			FLOAT64,
	GcpAllocatedStorageStandardGb			FLOAT64,
	GcpAllocatedComputeDynamicCosts		       	FLOAT64,
	GcpAllocatedComputeStaticCosts			FLOAT64,
	GcpAllocatedComputeUnlabeledCosts		FLOAT64,
	GcpAllocatedMiscCosts				FLOAT64,
	GcpAllocatedComputeCosts			FLOAT64,
	GcpAllocatedCharges				FLOAT64,
	GcpAllocatedComputeDynamicCpuHours		FLOAT64,
	GcpAllocatedComputeDynamicCpuGearHours		FLOAT64,
	GcpAllocatedComputeStaticCpuHours		FLOAT64,
	GcpAllocatedComputeDynamicCpuNonGearHours	FLOAT64,
	BscInitialAnalysisCharge			FLOAT64,
	BscProjectCharges				FLOAT64,
	BscStorageCharge				FLOAT64,
	BscProjectTotalCharges				FLOAT64,
	ProjectTotalCharges				FLOAT64,
	GcpAllocatedAvgRunCost				FLOAT64,
	GcpAllocatedAvgRuntimeCpuHours			FLOAT64,
    );

DELETE FROM 
       `'"${Project}.${Dataset}.FwProjectAllocatedChargesV4"'`
    WHERE
        InvoiceMonth = @InvoiceMonth
;

INSERT
    `'"${Project}.${Dataset}"'.FwProjectAllocatedChargesV4` 

    SELECT
	  *
        , zeroIfNull(GcpAllocatedCharges) + zeroIfNull(BscProjectTotalCharges) AS ProjectTotalCharges
       	    , IF ( FwGearRunCount > 0
	         , zeroIfNull(GcpAllocatedComputeCosts) / zeroIFNull(FwGearRunCount)
		 , 0.0 ) AS GcpAllocatedAvgRunCost

       	    , IF ( FwGearRunCount > 0
	      	 , IF ( isAnalysisGear(FwGearCategory)
		      , GcpAllocatedComputeDynamicCpuHours
		      , GcpAllocatedComputeStaticCpuHours) / zeroIFNull(FwGearRunCount)
		 , 0.0 ) AS GcpAllocatedAvgRuntimeCpuHours
    

    FROM (
        SELECT
    	  *
            , zeroIfNull(BscInitialAnalysisCharge) + zeroIfNull(BscStorageCharge) + zeroIfNull(BscProjectCharges) AS BscProjectTotalCharges
        FROM (
            SELECT
        	          *
        	 	, calculateBscInitialAnalysisCharge(FwInitialAnalysisCount) AS BscInitialAnalysisCharge
        	 	, calculateBscProjectCharge(GcpAllocatedStorageStandardGb, GcpAllocatedStorageCosts) AS BscProjectCharges
        	 	, calculateBscStorageCharge(GcpAllocatedStorageCosts) AS BscStorageCharge
            FROM (
                SELECT
                       IF (t1.InvoiceMonth IS NOT NULL, t1.InvoiceMonth, t4.InvoiceMonth) AS InvoiceMonth
                     , IF (t1.FwGroup IS NOT NULL, t1.FwGroup, t4.FwGroup) AS FwGroup
                     , IF (t1.FwProject IS NOT NULL, t1.FwProject, t4.FwProject) AS FwProject
                     , IF (t1.FwGearName IS NOT NULL, t1.FwGearName, t4.FwGearName) AS FwGearName
            
              	     , FwGearCategory
                     , FwInitialAnalysisCount
              	     , FwGearRunCount
              	     , FwProjectStorageGb
        	     , GcpAllocatedStorageCosts
                     , GcpAllocatedStorageStandardGb
                     , GcpAllocatedComputeDynamicCosts
                     , GcpAllocatedComputeStaticCosts
                     , GcpAllocatedComputeUnlabeledCosts
                     , GcpAllocatedMiscCosts
                     , GcpAllocatedComputeCosts
                     , zeroIfNull(GcpAllocatedStorageCosts) + zeroIfNull(GcpAllocatedMiscCosts) + zeroIfNull(GcpAllocatedComputeCosts) AS GcpAllocatedCharges
    		 #
    		 # *** the dynamic cpu hours should be handled in the allocatecomputestoragemetrics table
    		 #
            	 , zeroIfNull(GcpAllocatedComputeDynamicCpuGearHours) + zeroIfNull(GcpAllocatedComputeDynamicCpuNonGearHours) AS GcpAllocatedComputeDynamicCpuHours
                     , GcpAllocatedComputeDynamicCpuGearHours
                     , GcpAllocatedComputeStaticCpuHours
                     , GcpAllocatedComputeDynamicCpuNonGearHours
            
                FROM (
		    SELECT
		        *
		    FROM  		
                       `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearMetricCostsV4` 
                    WHERE
                       InvoiceMonth = @InvoiceMonth
		) t1
                FULL OUTER JOIN (
                      SELECT
                            IF (t2.InvoiceMonth IS NOT NULL, t2.InvoiceMonth, t3.InvoiceMonth) AS InvoiceMonth
                          , IF (t2.FwGroup IS NOT NULL, t2.FwGroup, t3.FwGroup) AS FwGroup
                          , IF (t2.FwProject IS NOT NULL, t2.FwProject, t3.FwProject) AS FwProject
                          , IF (t2.FwGearName IS NOT NULL, t2.FwGearName, t3.FwGearName) AS FwGearName
                          , GcpAllocatedComputeDynamicCpuGearHours
                          , GcpAllocatedComputeDynamicCpuNonGearHours
                      FROM (
                          SELECT
                                InvoiceMonth
                     	      , FwGroup
                              , FwProject
                              , FwGearName
                              , GcpAllocatedComputeDynamicCpuHours AS GcpAllocatedComputeDynamicCpuGearHours
                          FROM
			      `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearMetricCostsV4`
                          WHERE
			      InvoiceMonth = @InvoiceMonth
			      AND FwGearName NOT LIKE "%Bogus%" 
              	      ) t2
                      FULL OUTER JOIN (
                          SELECT
			       InvoiceMonth
                              , FwGroup
                              , FwProject
                              , FwGearName
                              , GcpAllocatedComputeDynamicCpuHours AS GcpAllocatedComputeDynamicCpuNonGearHours
                          FROM
            		      `'"${Project}.${Dataset}"'.TempAllocatedGroupProjectGearMetricCostsV4`
                          WHERE
			      InvoiceMonth = @InvoiceMonth
              	              AND FwGearName LIKE "%Bogus%" 
                          ) t3
                          ON
              	                  t2.InvoiceMonth = t3.InvoiceMonth
                              AND t2.FwGroup = t3.FwGroup
                              AND t2.FwProject = t3.FwProject
                              AND t2.FwGearName = t3.FwGearName
                ) t4
                ON
                        t1.InvoiceMonth = t4.InvoiceMonth
                    AND t1.FwGroup = t4.FwGroup
                    AND t1.FwProject = t4.FwProject
                    AND t1.FwGearName = t4.FwGearName 
            )
        )
    );



'


