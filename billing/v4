#!/bin/bash

#
# 2 input tables - FwUsageReport and FwJobsReport, containing the storage and job information for each
# invoice month
#
# TempGcpFwClassifiedCosts
#     All the charges from the current invoice month classified along
#     This table contains all the classifications we need from Gcp.
#
# Costs are what google charges us
# Charges are what we bill labs and PIs
#
# Classify all the GCP costs into
# Compute
#  Dynamic Gear Compute
#  Static Compute
#  Misc Compute
#  Non-Gear Related Dynamic compute - This is for groups which have compute costs and no gears run, so the compute costs 
#     distributed differently
#  Total Dynamic Costs
# Storage
#   Standard Cost/Hours
#   Coldline Cost/Hours
#   Archival Cost/Hours
#   Misc Costs
# Misc Costs - All the Costs which is not either Compute or Storage

# TempFwGroupProjectComputeMetrics
#     Cleanup of all the flywheel Job information for the current invoice month, grouped by group/project/gear

# TempFwGroupProjectStorageMetrics
#     Cleanup of all the flywheel Storage infomration for the current invoice month, grouped by group/project

# TempFwAllocatedGroupProjectComputeStorageMetrics
#     Join of TempFwGroupProjectComputeMetrics and TempFwGroupProjectStorageMetrics with BogusGears generated for
#     Group/Projects in storage to carry the storage metrics for the Group/Project/Gear
#     Includes group totals for gear metrics

# TempGcpFwAllocatedGroupProjectGearMetricsCosts
#     Join of TempFwAllocatedGroupProjectComputeStorageMetrics and TempGcpFwClassifiedCosts
#     Use functions to allocate costs across the Group/Project/Gears
#     Should be allocate costs per compute metric, allocate costs by storage metric
#     Does not assign charges -- only allocates costs

# BscAllocatedCharges
#     Use functions to allocate charges from TempGcpFwAllocatedGroupProjectGearMetricsCosts to drive the data studio reports
#     and iLab billling CSV

#
# BscGearCharges
#

# *** There is a basic problem of joining the storage and compute metrics across different levels of organization.  If you join on
#     Group/Project/Gear the storage metrics will be duplicated for each gear.  If you do not break it down to the gear level, you 
#     need another table to hold the gear costs information.
#     Really want all the storage to go the the Bogus gear, and not copied to the all the 
#
# Gcp - Data orginated from Gcp
# Fw - Dat originated from Flywheel
# Costs - What Google charged us
# Charges - What we're going to charge a fund
# AllocatedCosts - Costs we allocated to group/project/gear
# AllocatedCharges - Charges that were allocated to group/project/gear -- probably not really used
# Compute/Storage/Misc - Three main types of costs/charges
# TotalColumn - Totals for a column for prorating

# *** Should get rid of group level prorating.  Gcp group costs are a good check, but prorating should be across
#     the total metrics to simplify the tables and reduce the chance of getting the prorating wrong

# *** How do we deal with entire groups which have been deleted by the time we run the reports?


CmdName=$(basename "$0")

syntax="${CmdName} [-d Dataset][-p Project][-v] {-m Month} {-y Year}"

function OutputControl {
    if [ -n "$opt_v" ]
    then
	cat
    else
	cat > /dev/null
    fi
}

while getopts d:m:p:vy: arg
do
	case "$arg" in
		d|m|p|v|y)
			eval "opt_${arg}=${OPTARG:=1}"
			;;
	esac
done

shift $(($OPTIND - 1))

if [ -z "$opt_y" ] || [ -z "$opt_m" ]
then
	echo "$syntax" 1>&2
	exit 1
fi

#Dataset=BillingAllocation
Dataset=Bob
[ -n "$opt_d" ] && Dataset="$opt_d"

Project=pennbrain-center
[ -n "$opt_p" ] && Project="$opt_p"

bq query --use_legacy_sql=false --format=csv --allow_large_results --max_rows=1000000 --parameter="InvoiceMonth:STRING:${opt_y}${opt_m}" '

DECLARE TotalFwGearAnalysisCpuHours FLOAT64;
DECLARE TotalFwGearUtilityCpuHours FLOAT64;
DECLARE TotalFwGearGenericCpuHours FLOAT64;
DECLARE TotalFwStorageGb FLOAT64;

DECLARE TotalGcpComputeUnlabeledHours FLOAT64;
DECLARE TotalGcpComputeUnlabeledCosts FLOAT64;
DECLARE TotalGcpComputeLabeledCosts FLOAT64;
DECLARE TotalGcpMiscCosts FLOAT64;
DECLARE TotalGcpMiscStaticCosts FLOAT64;
DECLARE TotalGcpMiscDynamicCosts FLOAT64;
DECLARE TotalGcpMiscLabeledCosts FLOAT64;
DECLARE TotalGcpMiscUnlabeledCosts FLOAT64;

DECLARE TotalGcpComputeStaticCosts FLOAT64;
DECLARE TotalGcpComputeDynamicCosts FLOAT64;
DECLARE FwComputeDefaultSsdSize FLOAT64 DEFAULT 200.0; # GibiBytes
DECLARE TotalGcpFwComputeNonGearCosts FLOAT64;

DECLARE TotalGcpStorageStandardCosts FLOAT64;
DECLARE TotalGcpStorageColdlineCosts FLOAT64;
DECLARE TotalGcpStorageArchiveCosts FLOAT64;
DECLARE TotalGcpStorageMiscCosts FLOAT64;

DECLARE TotalGcpStorageStandardGb FLOAT64;
DECLARE TotalGcpStorageColdlineGb FLOAT64;
DECLARE TotalGcpStorageArchiveGb FLOAT64;

DECLARE TotalGcpStaticStorageMiscCosts FLOAT64;

DECLARE GcpFwStaticStorageStandardCosts FLOAT64;
DECLARE GcpFwStaticStorageColdlineCosts FLOAT64;
DECLARE GcpFwStaticStorageArchiveCosts FLOAT64;
DECLARE TotalFwProjectStorageGb FLOAT64;


DECLARE TotalGcpFwMiscLabeledCosts FLOAT64;
DECLARE TotalGcpFwMiscUnlabeledCosts FLOAT64;
DECLARE TotalGcpFwMiscStaticCosts FLOAT64;

CREATE TEMP FUNCTION zeroIfNull(Value FLOAT64) RETURNS FLOAT64 AS (
  IF (Value IS NOT NULL, Value, 0.0)
  )
  ;

CREATE TEMP FUNCTION fwCpuMsToCpuHours(CpuMs FLOAT64) RETURNS FLOAT64 AS (
      CpuMs / 1000.0 / 3600.0
    );

CREATE TEMP FUNCTION isComputeCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
      IF (ServiceDescription = "Compute Engine", TRUE, FALSE)
    );

CREATE TEMP FUNCTION isComputeDynamicCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
    IF (    ServiceDescription = "Compute Engine"
        AND FwGroup IS NOT NULL
        AND FwGroup != "flywheel-static"
      , TRUE
      , FALSE)
    );

CREATE TEMP FUNCTION isComputeStaticCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
    IF (    ServiceDescription = "Compute Engine"
        AND FwGroup IS NOT NULL
        AND FwGroup = "flywheel-static"
      , TRUE 
      , FALSE)
    );

CREATE TEMP FUNCTION isComputeLabeledCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (    ServiceDescription = "Compute Engine"
      AND FwGroup IS NOT NULL
      , TRUE
      , FALSE)
  );

CREATE TEMP FUNCTION isComputeUnlabeledCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (    ServiceDescription = "Compute Engine"
        AND FwGroup IS NULL
      , TRUE
      , FALSE)
  );

CREATE TEMP FUNCTION isComputeCoreHours(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     ServiceDescription = "Compute Engine"
       AND
	   SkuDescription LIKE "%Instance Core%"
    ,
    TRUE,
    FALSE)
  );

CREATE TEMP FUNCTION isSsdPdCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Compute Engine"
       AND
	   SkuDescription = "SSD backed PD Capacity"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isAnalysisGear(GearCategory STRING) RETURNS BOOLEAN AS (
  IF (GearCategory = "analysis", TRUE, FALSE)
  );

CREATE TEMP FUNCTION isUtilityGear(GearCategory STRING) RETURNS BOOLEAN AS (
  IF (isAnalysisGear(GearCategory),FALSE,TRUE)
  );


CREATE TEMP FUNCTION isStorageStandardCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND
	   SkuDescription LIKE "Standard Storage%"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isStorageColdlineCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND
	   SkuDescription LIKE "Coldline Storage%"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isStorageArchiveCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND
	   SkuDescription LIKE "Archive Storage%"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isStorageMiscCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND SkuDescription NOT LIKE "Standard Storage%"
       AND SkuDescription NOT LIKE "Coldline Storage%"
       AND SkuDescription NOT LIKE "Archive Storage%"

  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscLabeledCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup IS NOT NULL
       AND FwGroup != "flywheel-static"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscUnlabeledCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup IS NULL
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscStaticCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup = "flywheel-static"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscDynamicCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup IS NOT NULL
       AND FwGroup != "flywheel-static"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription NOT LIKE "Compute Engine%"
       AND ServiceDescription NOT LIKE "Cloud Storage"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION OneTeraByte() RETURNS FLOAT64 AS (1024.0); # in Gibibytes

CREATE TEMP FUNCTION isTbOrMore(StorageUsage FLOAT64) RETURNS BOOL AS (
       IF ((StorageUsage > OneTeraByte()),
       	  TRUE,
	  FALSE
       )
);

CREATE TEMP FUNCTION BscStorageOverheadRate() RETURNS FLOAT64 AS (0.25);
CREATE TEMP FUNCTION BscInitialAnalysisRate() RETURNS FLOAT64 AS (25);
CREATE TEMP FUNCTION BscSmallProjectCharge() RETURNS FLOAT64 AS (8.33);
CREATE TEMP FUNCTION BscLargeProjectCharge() RETURNS FLOAT64 AS (20.66);
CREATE TEMP FUNCTION OneCent() RETURNS FLOAT64 AS (0.01);

CREATE TEMP FUNCTION calculateBscStorageCharge(StorageCharge FLOAT64) RETURNS FLOAT64 AS (
	  StorageCharge * BscStorageOverheadRate()
);

CREATE TEMP FUNCTION calculateBscInitialAnalysisCharge(InitialAnalysisCount FLOAT64) RETURNS FLOAT64 AS (
       InitialAnalysisCount * BscInitialAnalysisRate()
);


CREATE TEMP FUNCTION calculateBscProjectCharge(StorageStandardUsage FLOAT64, StorageCharge FLOAT64) RETURNS FLOAT64 AS (
        IF (round(StorageCharge,2) >= OneCent(),
	        IF (isTbOrMore(StorageStandardUsage),
		      BscLargeProjectCharge(),
		      BscSmallProjectCharge()
		),
		0.0
       )
);

CREATE TEMP FUNCTION prorate(x FLOAT64, y FLOAT64) RETURNS FLOAT64 AS (
       IF (y IS NULL OR y = 0.0, 0.0, x / y)
);

#
# 1 TempGcpClassifiedCostsV4
# 
#   Classify all the costs from Gcp
#
CREATE OR REPLACE TABLE
  `pennbrain-center.Alice.TempGcpClassifiedCostsV4`
AS
    SELECT
        *
	, prorate(GcpGroupStorageCosts, GcpGroupStorageStandardGb) AS GcpGroupStorageCostPerStandardGb
	, zeroIfNull(GcpGroupComputeCosts) + zeroIfNull(GcpGroupStorageCosts) + zeroIfNull(GcpGroupMiscCosts) AS GcpGroupCosts
    FROM ( # A
        SELECT
            *
    	  , prorate(GcpGroupComputeCoreCpuHours, GcpGroupComputeCoreCpuHours) AS GcpComputeCostPerCpuHour
    	  , prorate(GcpGroupStorageStandardCosts, GcpGroupStorageStandardGb) AS GcpStorageStandarCostPerGbPerMonth
    	  , prorate(GcpGroupStorageColdlineCosts, GcpGroupStorageColdlineGb) AS GcpStorageColdlineCostPerGbPerMonth
    	  , prorate(GcpGroupStorageArchiveCosts, GcpGroupStorageArchiveGb) AS GcpStorageArchiveCostPerGbPerMonth
    	  , (
    	      + zeroIfNull(GcpGroupStorageStandardCosts)
    	      + zeroIfNull(GcpGroupStorageColdlineCosts)
    	      + zeroIfNull(GcpGroupStorageArchiveCosts)
    	      + zeroIfNull(GcpGroupStorageMiscCosts)
    	    ) AS GcpGroupStorageCosts
    
        FROM ( # B
            SELECT
        	  InvoiceMonth
        	, FwGroup
        
        	#
        	# Compute
        	#   Core Hours Used
        	#   Total
        	#   $/CPU hour
        	#
        	, SUM(IF (isComputeCost(ServiceDescription,SkuDescription),
                       DiscountedCosts,
        	       0.0)) AS GcpGroupComputeCosts
        
                , SUM(IF (isComputeCoreHours(ServiceDescription,SkuDescription),
                       UsageAmount,
                       0.0)) AS GcpGroupComputeCoreCpuHours
        
                , SUM(IF (isComputeDynamicCost(ServiceDescription,FwGroup),
                       DiscountedCosts,
        	       0.0)) AS GcpGroupComputeDynamicCosts
        
                , SUM(IF (isComputeStaticCost(ServiceDescription,FwGroup),
                       DiscountedCosts,
        	       0.0)) AS GcpGroupComputeStaticCosts
        
                , SUM(IF (isComputeLabeledCost(ServiceDescription,FwGroup),
                       DiscountedCosts,
        	       0.0)) AS GcpGroupComputeLabeledCosts
        
                , SUM(IF (isComputeUnlabeledCost(ServiceDescription,FwGroup),
                       DiscountedCosts,
        	       0.0)) AS GcpGroupComputeUnlabeledCosts
        
                #
                # *** As of 2022-08-15 all storage is under flywheel static and none is grouped.
                #
                , SUM(IF (isStorageStandardCost(ServiceDescription,SkuDescription),
                    DiscountedCosts,
                    0.0)) AS GcpGroupStorageStandardCosts
           
                , SUM(IF (isStorageStandardCost(ServiceDescription,SkuDescription),
                    UsageAmount,
                    0.0)) AS GcpGroupStorageStandardGb
           
                , SUM(IF (isStorageColdlineCost(ServiceDescription,SkuDescription),
                    DiscountedCosts,
                    0.0)) AS GcpGroupStorageColdlineCosts
           
                , SUM(IF (isStorageColdlineCost(ServiceDescription,SkuDescription),
                    UsageAmount,
                    0.0)) AS GcpGroupStorageColdlineGb
           
                , SUM(IF (isStorageArchiveCost(ServiceDescription,SkuDescription),
                    DiscountedCosts,
                    0.0)) AS GcpGroupStorageArchiveCosts
           
                , SUM(IF (isStorageArchiveCost(ServiceDescription,SkuDescription),
                    UsageAmount,
                    0.0)) AS GcpGroupStorageArchiveGb
           
                , SUM(IF (isStorageMiscCost(ServiceDescription,SkuDescription),
                    DiscountedCosts,
                    0.0)) AS GcpGroupStorageMiscCosts
           
                #
                # Misc Costs
                #
                , SUM(IF (isMiscCost(ServiceDescription,SkuDescription),
                    DiscountedCosts,
                    0.0)) AS GcpGroupMiscCosts
   
                ,  SUM(IF (isMiscStaticCosts(ServiceDescription,FwGroup),
                    DiscountedCosts,
   	      	    0.0)) AS GcpGroupMiscStaticCosts
   
                ,  SUM(IF (isMiscDynamicCosts(ServiceDescription,FwGroup),
                    DiscountedCosts,
   	      	    0.0)) AS GcpGroupMiscDynamicCosts
   
   	        , SUM(IF (isMiscUnlabeledCosts(ServiceDescription,FwGroup),
                    DiscountedCosts,
   	            0.0)) AS GcpGroupMiscUnlabeledCosts
   
   	        , SUM(IF (isMiscLabeledCosts(ServiceDescription,FwGroup),
                    DiscountedCosts,
   		    0.0)) AS GcpGroupMiscLabeledCosts
   
             FROM (
   	         SELECT
   	               InvoiceMonth
   		     , FlywheelGroupName AS FwGroup
   		     , GcpProjectName
   		     , ServiceDescription
   		     , SkuDescription
   		     , UsageAmountInPricingUnits AS UsageAmount
   		     , UsagePricingUnit
   		     , zeroIfNull(Costs) + zeroIfNull(Discounts) AS DiscountedCosts
   		     , Discounts
   		     , Promotions
   	      	 FROM
                     `pennbrain-center.BillingAllocation.FlywheelCosts`
   
                 WHERE
                     InvoiceMonth = "202207"
           
   	     )
           
             GROUP BY
                   InvoiceMonth
                 , FwGroup
           
             ORDER BY
                   InvoiceMonth
                 , FwGroup
       )
   )
   ORDER BY
         InvoiceMonth
       , FwGroup
   ;

#
# *** Will want to have the group totals
#
# 2   `pennbrain-center.Alice.TempFwGroupProjectComputeMetricsV4`
#
#	Sorts gear hours into utility and analysis hours
#	Sum everything else up into fwgroup/project/gear bins
CREATE OR REPLACE TABLE

  `pennbrain-center.Alice.TempFwGroupProjectComputeMetricsV4`

AS
    SELECT
        InvoiceMonth
      , FwGroup
      , FwProject
      , FwGearName
      , FwGearCategory
      , COUNT(FwGearName) AS FwGearRunCount
      , SUM(IF (isAnalysisGear(FwGearCategory), FwGearCpuHours, 0.0)) AS FwGearAnalysisCpuHours
      , SUM(IF (isAnalysisGear(FwGearCategory), 0.0, FwGearCpuHours)) AS FwGearUtilityCpuHours
      , SUM(FwGearCpuHours) AS FwGearGenericCpuHours
      , SUM(FwGearInitialAnalysis) AS FwInitialAnalysisCount
    
    FROM (
        SELECT 
          
              invoice_month AS InvoiceMonth
            , REPLACE(`group`,"_","-") AS FwGroup
            , project AS FwProject
            , gear_name AS FwGearName
            , gear_category AS FwGearCategory
            #
            # Many more job cpu hours can be recorded than billed for
            # A 1 core compute node generates 1 cpu hour (and disk, ram, etc)
            # 24 jobs can be run on the single compute node and if they each take 10 minutes to run, that is 240 minutes of runtime,
            # but not an accurate reflection of what we are being billed for.
            #
            # We allocate the compute costs based on how much cpu hours flywheel records for each job
            # If flywheel says dicom2niix takes 3 cpu hours and ashsharpicv takes 1 cpu hour, then 3/4 of the cost is attributed
            # to dicom2niix and 1/4 to ashsharpicv
            #
            , fwCpuMsToCpuHours(job_runtime_ms * gcp_cpus) AS FwGearCpuHours
            , IF(initial_analysis,1,0) AS FwGearInitialAnalysis
          
        FROM
	    `pennbrain-center.BillingAllocation.FwJobsReport` 
          
        WHERE
            invoice_month = "202207"
        
    )

    GROUP BY
        InvoiceMonth
        , FwGroup
        , FwProject
        , FwGearName
        , FwGearCategory

  ;

SET TotalGcpComputeStaticCosts = (
    SELECT
	SUM(GcpGroupComputeStaticCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4`
    );

SET TotalGcpComputeDynamicCosts = (
    SELECT
	SUM(GcpGroupComputeDynamicCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4`
    );

SET TotalGcpComputeUnlabeledCosts = (
    SELECT
	SUM(GcpGroupComputeUnlabeledCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4`
    ); 	

SET TotalGcpComputeLabeledCosts = (
    SELECT
	SUM(GcpGroupComputeLabeledCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4`
    ); 	

SET TotalGcpMiscCosts = (
    SELECT
	SUM(GcpGroupMiscCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4`

    WHERE
        InvoiceMonth = "202207"
    );

SET TotalGcpMiscDynamicCosts = (
    SELECT
	SUM(GcpGroupMiscDynamicCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4`

    WHERE
        InvoiceMonth = "202207"
    );

SET TotalGcpMiscStaticCosts = (
    SELECT
	SUM(GcpGroupMiscStaticCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4`

    WHERE
        InvoiceMonth = "202207"
    );

SET TotalGcpMiscLabeledCosts = (
    SELECT
	SUM(GcpGroupMiscLabeledCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4`

    WHERE
        InvoiceMonth = "202207"
    );

SET TotalGcpMiscUnlabeledCosts = (
    SELECT
	SUM(GcpGroupMiscUnlabeledCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4`

    WHERE
        InvoiceMonth = "202207"
    );



SET TotalFwGearAnalysisCpuHours = (
    SELECT
        SUM(FwGearAnalysisCpuHours)
    FROM
        `pennbrain-center.Alice.TempFwGroupProjectComputeMetricsV4`
    WHERE
        FwGroup IS NOT NULL
    AND
        FWGroup != "flywheel-static"
)
;

SET TotalFwGearUtilityCpuHours = (
    SELECT
        SUM(FwGearUtilityCpuHours)
    FROM
        `pennbrain-center.Alice.TempFwGroupProjectComputeMetricsV4`
    WHERE
        FwGroup IS NOT NULL
    AND
        FWGroup != "flywheel-static"
)
;

SET TotalFwGearGenericCpuHours = (
    SELECT
        SUM(FwGearGenericCpuHours)
    FROM
        `pennbrain-center.Alice.TempFwGroupProjectComputeMetricsV4`
    WHERE
        FwGroup IS NOT NULL
    AND
        FWGroup != "flywheel-static"
)
;

SELECT FwComputeDefaultSsdSize;
SELECT TotalFwGearAnalysisCpuHours;
SELECT TotalFwGearUtilityCpuHours;
SELECT TotalGcpComputeStaticCosts;
SELECT TotalGcpComputeDynamicCosts;
SELECT TotalGcpComputeUnlabeledCosts;
SELECT TotalGcpComputeLabeledCosts;
SELECT TotalGcpMiscCosts;

#
# 3  `pennbrain-center.Alice.TempProjectStorageMetricsV4`
#
#    Gcp charges us for 106TB of Standard storage, flwheel can account for 79 of them
#
#    The Bogus gear name column is inserted so the join in the next table does not wind up duplicating all the storage
#    metrics across each gear  Solves a lot of problems
#
#

CREATE OR REPLACE TABLE 
       `pennbrain-center.Alice.TempFwGroupProjectStorageMetricsV4` 

AS
    SELECT
          InvoiceMonth
        , FwGroup
        , FwProject
	, "StorageBogusGear" AS FwGearName
	, SUM(FwProjectStorageSessionCount) AS FwProjectStorageSessionCount
	, SUM(FwProjectStorageGb) AS FwProjectStorageGb
	, SUM(FwProjectStorageDeletedGb) AS FwProjectStorageDeletedGb
	, SUM(FwProjectStorageActiveGb) AS FwProjectStorageActiveGb
    FROM (
        SELECT
            invoice_month AS InvoiceMonth
          , REPLACE(`group`,"_","-") AS FwGroup
          , project_label AS FwProject
	  , SUM(session_count) AS FwProjectStorageSessionCount
          , SUM(total_storage_byte_day / days / 1024.0 / 1024.0 / 1024.0) AS FwProjectStorageGb
          , IF (deleted, SUM(total_storage_byte_day / days / 1024.0 / 1024.0 / 1024.0), 0.0) AS FwProjectStorageDeletedGb
          , IF (NOT deleted, SUM(total_storage_byte_day / days / 1024.0 / 1024.0 / 1024.0), 0.0) AS FwProjectStorageActiveGb
        FROM
          `pennbrain-center.BillingAllocation.FwUsageReport`

        WHERE
          invoice_month = "202207"
          AND project_label IS NOT NULL

        GROUP BY
            InvoiceMonth,
            FwGroup,
            FwProject,
	    deleted

        ORDER BY
            InvoiceMonth,
            FwGroup,
            FwProject
    )
    GROUP BY
            InvoiceMonth,
            FwGroup,
            FwProject
    ORDER BY
            InvoiceMonth,
            FwGroup,
            FwProject

;

SET TotalFwProjectStorageGb = (
    SELECT
        SUM(FwProjectStorageGb)
    FROM
        `pennbrain-center.Alice.TempFwGroupProjectStorageMetricsV4`
)
;

SET TotalGcpStorageStandardCosts = (
    SELECT
        SUM(GcpGroupStorageStandardCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4` 
)
;

SET TotalGcpStorageColdlineCosts = (
    SELECT
        SUM(GcpGroupStorageColdLineCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4` 
)
;

SET TotalGcpStorageArchiveCosts = (
    SELECT
        SUM(GcpGroupStorageArchiveCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4` 
)
;

SET TotalGcpStorageMiscCosts = (
    SELECT
        SUM(GcpGroupStorageMiscCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4` 
)
;

SET TotalGcpStorageStandardGb = (
    SELECT
        SUM(GcpGroupStorageStandardGb)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4` 
)
;

SET TotalGcpStorageColdlineGb = (
    SELECT
        SUM(GcpGroupStorageColdLineGb)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4` 
)
;

SET TotalGcpStorageArchiveGb = (
    SELECT
        SUM(GcpGroupStorageArchiveGb)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4` 
)
;

SELECT
	  TotalFwProjectStorageGb
	, TotalGcpStorageStandardCosts
	, TotalGcpStorageColdlineCosts
	, TotalGcpStorageArchiveCosts
	, TotalGcpStorageMiscCosts
;

#
# TempFwAllocatedGroupProjectComputeStorageMetrics
#
CREATE OR REPLACE TABLE

  `pennbrain-center.Alice.TempFwGroupProjectComputeStorageMetricsV4`

AS
    SELECT
          IF (t1.InvoiceMonth IS NULL, t2.InvoiceMonth, t1.InvoiceMonth) AS InvoiceMonth
	, IF (t1.FwGroup IS NULL, t2.FwGroup, t1.FwGroup) AS FwGroup
	, IF (t1.FwProject IS NULL, t2.FwProject, t1.FwProject) AS FwProject
	, IF (t1.FwGearName IS NULL, t2.FwGearName, t1.FwGearName) AS FwGearName
	, SUM(IF (t1.FwGearRunCount IS NULL, 0.0, t1.FwGearRunCount)) AS FwGearRunCount
	, SUM(IF (t1.FwGearAnalysisCpuHours IS NULL, 0.0, t1.FwGearAnalysisCpuHours)) AS FwGearAnalysisCpuHours
	, SUM(IF (t1.FwGearUtilityCpuHours IS NULL, 0.0, t1.FwGearUtilityCpuHours)) AS FwGearUtilityCpuHours
	, SUM(IF (t1.FwGearGenericCpuHours IS NULL, 0.0, t1.FwGearGenericCpuHours)) AS FwGearGenericCpuHours
	, SUM(IF (t1.FwInitialAnalysisCount IS NULL, 0.0, t1.FwInitialAnalysisCount)) AS FwInitialAnalysisCount
	, SUM(IF (t1.FwGearTotalGroupAnalysisCpuHours IS NULL, 0.0, t1.FwGearTotalGroupAnalysisCpuHours)) AS FwGearTotalGroupAnalysisCpuHours
	, SUM(IF (t1.FwGearTotalGroupUtilityCpuHours IS NULL, 0.0, t1.FwGearTotalGroupUtilityCpuHours)) AS FwGearTotalGroupUtilityCpuHours
	, SUM(IF (t1.FwGearTotalGroupGenericCpuHours IS NULL, 0.0, t1.FwGearTotalGroupGenericCpuHours)) AS FwGearTotalGroupGenericCpuHours
	, SUM(IF (t2.FwProjectStorageGb IS NULL, 0.0, t2.FwProjectStorageGb)) AS FwProjectStorageGb
	, SUM(IF (t2.FwProjectStorageActiveGb IS NULL, 0.0, t2.FwProjectStorageActiveGb)) AS FwProjectStorageActiveGb
	, SUM(IF (t2.FwProjectStorageDeletedGb IS NULL, 0.0, t2.FwProjectStorageDeletedGb)) AS FwProjectStorageDeletedGb
	, SUM(IF (t2.FwProjectTotalGroupStorageGb IS NULL, 0.0, t2.FwProjectTotalGroupStorageGb)) AS FwProjectTotalGroupStorageGb
	, SUM(IF (t2.FwProjectTotalGroupStorageActiveGb IS NULL, 0.0, t2.FwProjectTotalGroupStorageActiveGb)) AS FwProjectTotalGroupStorageActiveGb
	, SUM(IF (t2.FwProjectTotalGroupStorageDeletedGb IS NULL, 0.0, t2.FwProjectTotalGroupStorageDeletedGb)) AS FwProjectTotalGroupStorageDeletedGb

    FROM (
        SELECT 
            t3.*
          , t4.FwGearTotalGroupAnalysisCpuHours
          , t4.FwGearTotalGroupUtilityCpuHours
          , t4.FwGearTotalGroupGenericCpuHours
        FROM 
	    `pennbrain-center.Alice.TempFwGroupProjectComputeMetricsV4` t3
        LEFT JOIN (
          SELECT
              InvoiceMonth
            , FwGroup
#            , FwProject
#            , FwGearName
            , SUM(FwGearAnalysisCpuHours) AS FwGearTotalGroupAnalysisCpuHours
            , SUM(FwGearUtilityCpuHours) AS FwGearTotalGroupUtilityCpuHours
            , SUM(FwGearGenericCpuHours) AS FwGearTotalGroupGenericCpuHours
          FROM
	    `pennbrain-center.Alice.TempFwGroupProjectComputeMetricsV4` 
          GROUP BY
              InvoiceMonth
            , FwGroup
#            , FwProject
#            , FwGearName
        ) t4
        ON
              t3.InvoiceMonth = t4.InvoiceMonth
          AND t3.FwGroup = t4.FwGroup
#          AND t3.FwProject = t4.FwProject
#          AND t3.FwGearName = t4.FwGearName
    ) t1
    FULL OUTER JOIN (
    	 # *** Storage is allocated by all flywheel totals - not by group totals

        SELECT 
            t5.*
          , t6.FwProjectTotalGroupStorageGb
          , t6.FwProjectTotalGroupStorageActiveGb
          , t6.FwProjectTotalGroupStorageDeletedGb
        FROM 
	    `pennbrain-center.Alice.TempFwGroupProjectStorageMetricsV4` t5
        LEFT JOIN (
          SELECT
              InvoiceMonth
            , FwGroup
#            , FwProject
#            , FwGearName
            , SUM(FwProjectStorageGb) AS FwProjectTotalGroupStorageGb
            , SUM(FwProjectStorageActiveGb) AS FwProjectTotalGroupStorageActiveGb
            , SUM(FwProjectStorageDeletedGb) AS FwProjectTotalGroupStorageDeletedGb
          FROM
            `pennbrain-center.Alice.TempFwGroupProjectStorageMetricsV4`  
          GROUP BY
              InvoiceMonth
            , FwGroup
        ) t6
        ON
              t5.InvoiceMonth = t5.InvoiceMonth
          AND t5.FwGroup = t6.FwGroup
#          AND t5.FwProject = t6.FwProject
#          AND t5.FwGearName = t6.FwGearName
    ) t2
    
    ON
	    t1.InvoiceMonth = t2.InvoiceMonth
	AND t1.FwGroup = t2.FwGroup
	AND t1.FwProject = t2.FwProject
	AND t1.FwGearName = t2.FwGearName

    GROUP BY
          InvoiceMonth
        , FwGroup
        , FwProject
        , FwGearName

    ORDER BY
          InvoiceMonth
	, FwGroup
	, FwProject
	, FwGearName

;

SELECT
     SUM(FwGearRunCount) AS FwGearRunCount
   , SUM(FwInitialAnalysisCount) AS FwInitialAnalysisCount

   #
   # Summing the TotalGroup does not make sense.  You would be counting the group totals 
   # for each gear in the group/project
   #
   , SUM(FwGearAnalysisCpuHours) AS FwGearAnalysisCpuHours
   , SUM(FwGearUtilityCpuHours) AS FwGearUtilityCpuHours
   , SUM(FwGearGenericCpuHours) AS FwGearGenericCpuHours

   , SUM(FwProjectStorageGb) AS FwProjectStorageGb
   , SUM(FwProjectStorageActiveGb) AS FwProjectStorageActiveGb
   , SUM(FwProjectStorageDeletedGb) AS FwProjectStorageDeletedGb

FROM
  `pennbrain-center.Alice.TempFwGroupProjectComputeStorageMetricsV4`
;


#
# 5 `pennbrain-center.Alice.TempGcpFwAllocatedGroupProjectGearMetricsCostsV4`
#
#   Add gear metrics in to costs
#   *** This leave $4.24 on the table because it does not capture compute costs for groups which have not 
#       run any analysis gears
#
CREATE OR REPLACE TABLE

  `pennbrain-center.Alice.TempAllocatedGroupProjectGearMetricCostsV4`

AS
    SELECT
          *
	,   zeroIfNull(GcpAllocatedComputeCosts) 
	  + zeroIfNull(GcpAllocatedStorageCosts)
	  + zeroIfNull(GcpAllocatedMiscCosts) AS GcpAllocatedCosts
    FROM (
      SELECT
            *
	  ,   zeroIfNull(GcpAllocatedComputeDynamicCosts)
	    + zeroIfNull(GcpAllocatedComputeStaticCosts) 
	    + zeroIfNull(GcpAllocatedComputeUnlabeledCosts) AS GcpAllocatedComputeCosts

	  ,   zeroIfNull(GcpAllocatedStorageStandardCosts)
	    + zeroIfNull(GcpAllocatedStorageColdlineCosts)
	    + zeroIfNull(GcpAllocatedStorageArchiveCosts) 
	    + zeroIfNull(GcpAllocatedStorageMiscCosts) AS GcpAllocatedStorageCosts
      FROM (
          SELECT
              t1.*
            , t2.FwProject
            , t2.FwGearName
            , t2.FwInitialAnalysisCount
            , t2.FwGearRunCount
            , t2.FwGearAnalysisCpuHours
            , t2.FwGearUtilityCpuHours
            , t2.FwGearGenericCpuHours

            , t2.FwGearTotalGroupAnalysisCpuHours
            , t2.FwGearTotalGroupUtilityCpuHours
            , t2.FwGearTotalGroupGenericCpuHours

	    , t2.FwProjectStorageGb

	    , GcpGroupComputeCosts * prorate(FwGearGenericCpuHours, FwGearTotalGroupGenericCpuHours) AS GcpAllocatedGroupComputeCosts
	    , GcpGroupComputeCoreCpuHours * prorate(FwGearAnalysisCpuHours, FwGearTotalGroupAnalysisCpuHours) AS GcpAllocatedComputeCoreCpuHours
	    , GcpGroupComputeDynamicCosts * prorate(FwGearAnalysisCpuHours, FwGearTotalGroupAnalysisCpuHours) AS GcpAllocatedComputeDynamicCosts

	    # *** Have to treat static costs special as all static compute costs are only in the flywheel-static group, so 
	    #     prorate from the TotalGcpComputeStaticCosts instead of from the group
	    , TotalGcpComputeStaticCosts * prorate(FwGearUtilityCpuHours, TotalFwGearUtilityCpuHours) AS GcpAllocatedComputeStaticCosts
	    , GcpGroupComputeLabeledCosts * prorate(FwGearAnalysisCpuHours, FwGearTotalGroupAnalysisCpuHours) AS GcpAllocatedComputeLabeledCosts
	    , TotalGcpComputeUnlabeledCosts * prorate(FwGearAnalysisCpuHours, TotalFwGearAnalysisCpuHours) AS GcpAllocatedComputeUnlabeledCosts
        
	    # *** Have to prorate from the Totals since misc costs span non-group costs
            , TotalGcpMiscCosts * prorate(FwGearGenericCpuHours, TotalFwGearGenericCpuHours) AS GcpAllocatedMiscCosts

            , TotalGcpMiscStaticCosts * prorate(FwGearGenericCpuHours, FwGearTotalGroupGenericCpuHours) AS GcpAllocatedMiscStaticCosts
            , TotalGcpMiscDynamicCosts * prorate(FwGearGenericCpuHours, FwGearTotalGroupGenericCpuHours) AS GcpAllocatedMiscDynamicCosts
            , TotalGcpMiscLabeledCosts * prorate(FwGearGenericCpuHours, FwGearTotalGroupGenericCpuHours) AS GcpAllocatedMiscLabeledCosts
            , TotalGcpMiscUnlabeledCosts * prorate(FwGearGenericCpuHours, FwGearTotalGroupGenericCpuHours) AS GcpAllocatedMiscUnlabeledCosts

	    # *** Need to allocate storage costs to individual project/gears
	    # *** Also undealt with are cost per cpu hour and cost per gb
	    # *** Have not allocated the storage costs from flywheel-static to the actual projects -- do not want to use the GroupGb, but TotalGb
	   , TotalGcpStorageStandardCosts * prorate(FwProjectStorageGb, TotalFwProjectStorageGb) AS GcpAllocatedStorageStandardCosts
	   , TotalGcpStorageStandardGb * prorate(FwProjectStorageGb, TotalFwProjectStorageGb) AS GcpAllocatedStorageStandardGb
	   , TotalGcpStorageColdlineCosts * prorate(FwProjectStorageGb, TotalFwProjectStorageGb) AS GcpAllocatedStorageColdlineCosts
	   , TotalGcpStorageColdlineGb * prorate(FwProjectStorageGb, TotalFwProjectStorageGb) AS GcpAllocatedStorageColdlineGb
	   , TotalGcpStorageArchiveCosts * prorate(FwProjectStorageGb, TotalFwProjectStorageGb) AS GcpAllocatedStorageArchiveCosts
	   , TotalGcpStorageArchiveGb * prorate(FwProjectStorageGb, TotalFwProjectStorageGb) AS GcpAllocatedStorageArchiveGb

	   , TotalGcpStorageMiscCosts * prorate(FwProjectStorageGb, TotalFwProjectStorageGb) AS GcpAllocatedStorageMiscCosts


          FROM (
            SELECT
              *
            FROM
               `pennbrain-center.Alice.TempGcpClassifiedCostsV4` 
	    #
	    # *** The merged Gcp Costs and Flywheel Metrics should not include the null group or flywheel static
	    # so costs are only allocated real flywheel groups
	    #
	    WHERE
		FwGroup IS NOT NULL
		AND FwGroup != "flywheel-static"
        
          ) t1
          FULL OUTER JOIN (
               SELECT
	             *
	       FROM
	        `pennbrain-center.Alice.TempFwGroupProjectComputeStorageMetricsV4`
        
          ) t2
	  ON
	          t1.InvoiceMonth = t2.InvoiceMonth
	      AND t1.FwGroup = t2.FwGroup
       )
	  ORDER BY
	        InvoiceMonth
	      , FwGroup
	      , FwProject
	      , FwGearName

    )
;

SELECT
      SUM(FwInitialAnalysisCount) AS TotalGcpAllocatedInitialAnalysisCount
    , SUM(GcpAllocatedComputeDynamicCosts) AS TotalGcpAllocatedComputeDynamicCosts

    , SUM(GcpAllocatedStorageStandardGb) AS TotalGcpAllocatedStorageStandardGb
    , SUM(GcpAllocatedStorageStandardCosts) AS TotalGcpAllocatedStorageStandardCosts
    , SUM(GcpAllocatedStorageColdlineGb) AS TotalGcpAllocatedStorageColdlineGb
    , SUM(GcpAllocatedStorageColdlineCosts) AS TotalGcpAllocatedStorageColdlineCosts
    , SUM(GcpAllocatedStorageArchiveGb) AS TotalGcpAllocatedStorageArchiveGb
    , SUM(GcpAllocatedStorageArchiveCosts) AS TotalGcpAllocatedStorageArchiveCosts


FROM
    `pennbrain-center.Alice.TempAllocatedGroupProjectGearMetricCostsV4`
;


#
# *** There are scads of null/projects in this table which should not be there.
#     Null resources should be allocated to billable projects.  BSC should absorbe tech dev and our own projects (holder flywheel-dev)

CREATE OR REPLACE TABLE 
       `pennbrain-center.Alice.FwProjectAllocatedChargesV4` 

AS
    SELECT
          *
	, zeroIfNull(GcpAllocatedCharges) + zeroIfNull(BscProjectTotalCharges) AS ProjectTotalCharges
    FROM (
        SELECT
              *
    	, zeroIfNull(BscInitialAnalysisCharge) + zeroIfNull(BscStorageCharge) + zeroIfNull(BscProjectCharges) AS BscProjectTotalCharges
    
        FROM (
          SELECT 	
                InvoiceMonth
              , FwGroup
              , FwProject
              , FwInitialAnalysisCount
              , calculateBscInitialAnalysisCharge(FwInitialAnalysisCount) AS BscInitialAnalysisCharge
              , GcpAllocatedStorageCosts
              , GcpAllocatedStorageStandardGb
              , calculateBscStorageCharge(GcpAllocatedStorageCosts) AS BscStorageCharge

	      , GcpAllocatedComputeDynamicCosts
	      , GcpAllocatedComputeStaticCosts
	      , GcpAllocatedComputeUnlabeledCosts
	      , GcpAllocatedMiscCosts

              , GcpAllocatedComputeCosts
              ,   zeroIfNull(GcpAllocatedStorageCosts)
                + zeroIfNull(GcpAllocatedMiscCosts)
                + zeroIfNull(GcpAllocatedComputeCosts) AS GcpAllocatedCharges
              , calculateBscProjectCharge(GcpAllocatedStorageStandardGb, GcpAllocatedStorageCosts) AS BscProjectCharges
           FROM
	      `pennbrain-center.Alice.TempAllocatedGroupProjectGearMetricCostsV4`

    )
);

'
