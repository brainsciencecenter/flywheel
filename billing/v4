#!/bin/bash

#
# 2 input tables - FwUsageReport and FwJobsReport, containing the storage and job information for each
# invoice month
#
# TempGcpFwClassifiedCosts
#     All the charges from the current invoice month classified along
#     This table contains all the classifications we need from Gcp.
#
# Classify all the GCP costs into
# Compute
#  Dynamic Gear Compute
#  Static Compute
#  Misc Compute
#  Non-Gear Related Dynamic compute - This is for groups which have compute costs and no gears run, so the compute costs 
#     distributed differently
#  Total Dynamic Costs
# Storage
#   Standard Cost/Hours
#   Coldline Cost/Hours
#   Archival Cost/Hours
#   Misc Costs
# Misc Costs - All the Costs which is not either Compute or Storage

# TempFwGroupProjectComputeMetrics
#     Cleanup of all the flywheel Job information for the current invoice month, grouped by group/project/gear

# TempFwGroupProjectStorageMetrics
#     Cleanup of all the flywheel Storage infomration for the current invoice month, grouped by group/project

# TempFwAllocatedGroupProjectComputeStorageMetrics
#     Join of TempFwGroupProjectComputeMetrics and TempFwGroupProjectStorageMetrics with BogusGears generated for
#     Group/Projects in storage to carry the storage metrics for the Group/Project
#     Creating this table should use a set of functions to allocate the job, and storage metrics 
#     across the Group/Project/Gears

# TempGcpFwAllocatedGroupProjectGearMetricsCosts
#     Join of TempFwAllocatedGroupProjectComputeStorageMetrics and TempGcpFwClassifiedCosts
#     Use functions to allocate costs across the Group/Project/Gears

# BscAllocatedCharges
#     Use functions to allocate charges from TempGcpFwAllocatedGroupProjectGearMetricsCosts to drive the data studio reports
#     and iLab billling CSV

#
# BscGearCharges
#

# *** There is a basic problem of joining the storage and compute metrics across different levels of organization.  If you join on
#     Group/Project/Gear the storage metrics will be duplicated for each gear.  If you do not break it down to the gear level, you 
#     need another table to hold the gear costs information.
#     Really want all the storage to go the the Bogus gear, and not copied to the all the 
#
# Gcp - Data orginated from Gcp
# Fw - Dat originated from Flywheel
# Costs - What Google charged us
# Charges - What we're going to charge a fund
# AllocatedCosts - Costs we allocated to group/project/gear
# AllocatedCharges - Charges that were allocated to group/project/gear -- probably not really used
# Compute/Storage/Misc - Three main types of costs/charges
# 


CmdName=$(basename "$0")

syntax="${CmdName} [-d Dataset][-p Project][-v] {-m Month} {-y Year}"

function OutputControl {
    if [ -n "$opt_v" ]
    then
	cat
    else
	cat > /dev/null
    fi
}

while getopts d:m:p:vy: arg
do
	case "$arg" in
		d|m|p|v|y)
			eval "opt_${arg}=${OPTARG:=1}"
			;;
	esac
done

shift $(($OPTIND - 1))

if [ -z "$opt_y" ] || [ -z "$opt_m" ]
then
	echo "$syntax" 1>&2
	exit 1
fi

#Dataset=BillingAllocation
Dataset=Bob
[ -n "$opt_d" ] && Dataset="$opt_d"

Project=pennbrain-center
[ -n "$opt_p" ] && Project="$opt_p"

bq query --use_legacy_sql=false --format=csv --allow_large_results --max_rows=1000000 --parameter="InvoiceMonth:STRING:${opt_y}${opt_m}" '

DECLARE FwTotalGearAnalysisCpuHours FLOAT64;
DECLARE FwTotalGearUtilityCpuHours FLOAT64;
DECLARE GcpTotalComputeUnlabeledHours FLOAT64;
DECLARE GcpTotalComputeUnlabeledCosts FLOAT64;
DECLARE GcpTotalComputeLabeledCosts FLOAT64;
DECLARE GcpTotalMiscCosts FLOAT64;

DECLARE GcpTotalComputeStaticCosts FLOAT64;
DECLARE GcpTotalComputeDynamicCosts FLOAT64;
DECLARE FwComputeDefaultSsdSize FLOAT64 DEFAULT 200.0; # GibiBytes
DECLARE GcpFwTotalComputeNonGearCosts FLOAT64;

DECLARE GcpFwStaticStorageStandardCosts FLOAT64;
DECLARE GcpFwStaticStorageColdlineCosts FLOAT64;
DECLARE GcpFwStaticStorageArchiveCosts FLOAT64;
DECLARE GcpFwStaticStorageMiscCosts FLOAT64;
DECLARE FwTotalProjectStorageGb FLOAT64;


DECLARE GcpFwTotalMiscLabeledCosts FLOAT64;
DECLARE GcpFwTotalMiscUnlabeledCosts FLOAT64;
DECLARE GcpFwTotalMiscStaticCosts FLOAT64;

CREATE TEMP FUNCTION zeroIfNull(Value FLOAT64) RETURNS FLOAT64 AS (
  IF (Value IS NOT NULL, Value, 0.0)
  )
  ;

CREATE TEMP FUNCTION fwCpuMsToCpuHours(CpuMs FLOAT64) RETURNS FLOAT64 AS (
      CpuMs / 1000.0 / 3600.0
    );

CREATE TEMP FUNCTION isComputeCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
      IF (ServiceDescription = "Compute Engine", TRUE, FALSE)
    );

CREATE TEMP FUNCTION isComputeDynamicCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
    IF (    ServiceDescription = "Compute Engine"
        AND FwGroup IS NOT NULL
        AND FwGroup != "flywheel-static"
      , TRUE
      , FALSE)
    );

CREATE TEMP FUNCTION isComputeStaticCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
    IF (    ServiceDescription = "Compute Engine"
        AND FwGroup IS NOT NULL
        AND FwGroup = "flywheel-static"
      , TRUE 
      , FALSE)
    );

CREATE TEMP FUNCTION isComputeLabeledCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (    ServiceDescription = "Compute Engine"
      AND FwGroup IS NOT NULL
      , TRUE
      , FALSE)
  );

CREATE TEMP FUNCTION isComputeUnlabeledCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (    ServiceDescription = "Compute Engine"
        AND FwGroup IS NULL
      , TRUE
      , FALSE)
  );

CREATE TEMP FUNCTION isComputeCoreHours(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     ServiceDescription = "Compute Engine"
       AND
	   SkuDescription LIKE "%Instance Core%"
    ,
    TRUE,
    FALSE)
  );

CREATE TEMP FUNCTION isSsdPdCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Compute Engine"
       AND
	   SkuDescription = "SSD backed PD Capacity"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isAnalysisGear(GearCategory STRING) RETURNS BOOLEAN AS (
  IF (GearCategory = "analysis", TRUE, FALSE)
  );

CREATE TEMP FUNCTION isUtilityGear(GearCategory STRING) RETURNS BOOLEAN AS (
  IF (isAnalysisGear(GearCategory),FALSE,TRUE)
  );


CREATE TEMP FUNCTION isStorageStandardCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND
	   SkuDescription LIKE "Standard Storage%"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isStorageColdlineCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND
	   SkuDescription LIKE "Coldline Storage%"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isStorageArchiveCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND
	   SkuDescription LIKE "Archive Storage%"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isStorageMiscCost(ServiceDescription STRING, SkuDescription STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription = "Cloud Storage"
       AND SkuDescription NOT LIKE "Standard Storage%"
       AND SkuDescription NOT LIKE "Coldline Storage%"
       AND SkuDescription NOT LIKE "Archive Storage%"

  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscLabeledCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup IS NOT NULL
       AND FwGroup != "flywheel-static"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscUnlabeledCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup IS NULL
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscStaticCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup = "flywheel-static"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscDynamicCosts(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription != "Compute Engine"
       AND ServiceDescription != "Cloud Storage"
       AND FwGroup IS NOT NULL
       AND FwGroup != "flywheel-static"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION isMiscCost(ServiceDescription STRING, FwGroup STRING) RETURNS BOOLEAN AS (
  IF (     
           ServiceDescription NOT LIKE "Compute Engine%"
       AND ServiceDescription NOT LIKE "Cloud Storage"
  , TRUE, FALSE)
  );

CREATE TEMP FUNCTION OneTeraByte() RETURNS FLOAT64 AS (1024.0); # in Gibibytes

CREATE TEMP FUNCTION isTbOrMore(StorageUsage FLOAT64) RETURNS BOOL AS (
       IF ((StorageUsage > OneTeraByte()),
       	  TRUE,
	  FALSE
       )
);

CREATE TEMP FUNCTION BscStorageOverheadRate() RETURNS FLOAT64 AS (0.25);
CREATE TEMP FUNCTION BscInitialAnalysisRate() RETURNS FLOAT64 AS (25);
CREATE TEMP FUNCTION BscSmallProjectCharge() RETURNS FLOAT64 AS (8.33);
CREATE TEMP FUNCTION BscLargeProjectCharge() RETURNS FLOAT64 AS (20.66);
CREATE TEMP FUNCTION OneCent() RETURNS FLOAT64 AS (0.01);

CREATE TEMP FUNCTION calculateBscStorageCharge(StorageCharge FLOAT64) RETURNS FLOAT64 AS (
	  StorageCharge * BscStorageOverheadRate()
);

CREATE TEMP FUNCTION calculateBscInitialAnalysisCharge(InitialAnalysisCount FLOAT64) RETURNS FLOAT64 AS (
       InitialAnalysisCount * BscInitialAnalysisRate()
);


CREATE TEMP FUNCTION calculateBscProjectCharge(StorageStandardUsage FLOAT64, StorageCharge FLOAT64) RETURNS FLOAT64 AS (
        IF (round(StorageCharge,2) >= OneCent(),
	        IF (isTbOrMore(StorageStandardUsage),
		      BscLargeProjectCharge(),
		      BscSmallProjectCharge()
		),
		0.0
       )
);

CREATE TEMP FUNCTION prorate(x FLOAT64, y FLOAT64) RETURNS FLOAT64 AS (
       IF (y IS NULL OR y = 0.0, 0.0, x / y)
);

#
# 1 TempGcpClassifiedCostsV4
# 
#   Classify all the costs from Gcp
#
CREATE OR REPLACE TABLE
  `pennbrain-center.Alice.TempGcpClassifiedCostsV4`
AS
    SELECT
        *
	, prorate(GcpGroupStorageCosts, GcpGroupStorageStandardGb) AS GcpGroupStorageCostPerStandardGb
	, zeroIfNull(GcpGroupComputeCosts) + zeroIfNull(GcpGroupStorageCosts) + zeroIfNull(GcpGroupMiscCosts) AS GcpGroupCosts
    FROM ( # A
        SELECT
            *
    	  , prorate(GcpGroupComputeCoreCpuHours, GcpGroupComputeCoreCpuHours) AS GcpComputeCostPerCpuHour
    	  , prorate(GcpGroupStorageStandardCosts, GcpGroupStorageStandardGb) AS GcpStorageStandarCostPerGbPerMonth
    	  , prorate(GcpGroupStorageColdlineCosts, GcpGroupStorageColdlineGb) AS GcpStorageColdlineCostPerGbPerMonth
    	  , prorate(GcpGroupStorageArchiveCosts, GcpGroupStorageArchiveGb) AS GcpStorageArchiveCostPerGbPerMonth
    	  , (
    	      + zeroIfNull(GcpGroupStorageStandardCosts)
    	      + zeroIfNull(GcpGroupStorageColdlineCosts)
    	      + zeroIfNull(GcpGroupStorageArchiveCosts)
    	      + zeroIfNull(GcpGroupStorageMiscCosts)
    	    ) AS GcpGroupStorageCosts
    
        FROM ( # B
            SELECT
        	  InvoiceMonth
        	, FwGroup
        
        	#
        	# Compute
        	#   Core Hours Used
        	#   Total
        	#   $/CPU hour
        	#
        	, SUM(IF (isComputeCost(ServiceDescription,SkuDescription),
                       DiscountedCosts,
        	       0.0)) AS GcpGroupComputeCosts
        
                , SUM(IF (isComputeCoreHours(ServiceDescription,SkuDescription),
                       UsageAmount,
                       0.0)) AS GcpGroupComputeCoreCpuHours
        
                , SUM(IF (isComputeDynamicCost(ServiceDescription,FwGroup),
                       DiscountedCosts,
        	       0.0)) AS GcpGroupComputeDynamicCosts
        
                , SUM(IF (isComputeStaticCost(ServiceDescription,FwGroup),
                       DiscountedCosts,
        	       0.0)) AS GcpGroupComputeStaticCosts
        
                , SUM(IF (isComputeLabeledCost(ServiceDescription,FwGroup),
                       DiscountedCosts,
        	       0.0)) AS GcpGroupComputeLabeledCosts
        
                , SUM(IF (isComputeUnlabeledCost(ServiceDescription,FwGroup),
                       DiscountedCosts,
        	       0.0)) AS GcpGroupComputeUnlabeledCosts
        
                #
                # *** As of 2022-08-15 all storage is under flywheel static and none is grouped.
                #
                , SUM(IF (isStorageStandardCost(ServiceDescription,SkuDescription),
                    DiscountedCosts,
                    0.0)) AS GcpGroupStorageStandardCosts
           
                , SUM(IF (isStorageStandardCost(ServiceDescription,SkuDescription),
                    UsageAmount,
                    0.0)) AS GcpGroupStorageStandardGb
           
                , SUM(IF (isStorageColdlineCost(ServiceDescription,SkuDescription),
                    DiscountedCosts,
                    0.0)) AS GcpGroupStorageColdlineCosts
           
                , SUM(IF (isStorageColdlineCost(ServiceDescription,SkuDescription),
                    UsageAmount,
                    0.0)) AS GcpGroupStorageColdlineGb
           
                , SUM(IF (isStorageArchiveCost(ServiceDescription,SkuDescription),
                    DiscountedCosts,
                    0.0)) AS GcpGroupStorageArchiveCosts
           
                , SUM(IF (isStorageArchiveCost(ServiceDescription,SkuDescription),
                    UsageAmount,
                    0.0)) AS GcpGroupStorageArchiveGb
           
                , SUM(IF (isStorageMiscCost(ServiceDescription,SkuDescription),
                    DiscountedCosts,
                    0.0)) AS GcpGroupStorageMiscCosts
           
                #
                # Misc Costs
                #
                , SUM(IF (isMiscCost(ServiceDescription,SkuDescription),
                    DiscountedCosts,
                    0.0)) AS GcpGroupMiscCosts
   
                ,  SUM(IF (isMiscStaticCosts(ServiceDescription,FwGroup),
                    DiscountedCosts,
   	      	    0.0)) AS GcpGroupMiscStaticCosts
   
                ,  SUM(IF (isMiscDynamicCosts(ServiceDescription,FwGroup),
                    DiscountedCosts,
   	      	    0.0)) AS GcpGroupMiscDynamicCosts
   
   	        , SUM(IF (isMiscUnlabeledCosts(ServiceDescription,FwGroup),
                    DiscountedCosts,
   	            0.0)) AS GcpGroupMiscUnlabeledCosts
   
   	        , SUM(IF (isMiscLabeledCosts(ServiceDescription,FwGroup),
                    DiscountedCosts,
   		    0.0)) AS GcpGroupMiscLabeledCosts
   
             FROM (
   	         SELECT
   	               InvoiceMonth
   		     , FlywheelGroupName AS FwGroup
   		     , GcpProjectName
   		     , ServiceDescription
   		     , SkuDescription
   		     , UsageAmountInPricingUnits AS UsageAmount
   		     , UsagePricingUnit
   		     , zeroIfNull(Costs) + zeroIfNull(Discounts) AS DiscountedCosts
   		     , Discounts
   		     , Promotions
   	      	 FROM
                     `pennbrain-center.BillingAllocation.FlywheelCosts`
   
                 WHERE
                     InvoiceMonth = "202207"
           
   	     )
           
             GROUP BY
                   InvoiceMonth
                 , FwGroup
           
             ORDER BY
                   InvoiceMonth
                 , FwGroup
       )
   )
   ORDER BY
         InvoiceMonth
       , FwGroup
   ;

#
# *** Will want to have the group totals
#
# 2   `pennbrain-center.Alice.TempFwGroupProjectComputeMetricsV4`
#
#	Sorts gear hours into utility and analysis hours
#	Sum everything else up into fwgroup/project/gear bins
CREATE OR REPLACE TABLE

  `pennbrain-center.Alice.TempFwGroupProjectComputeMetricsV4`

AS
    SELECT
        InvoiceMonth
      , FwGroup
      , FwProject
      , FwGearName
      , FwGearCategory
      , COUNT(FwGearName) AS FwGearRunCount
      , SUM(IF (isAnalysisGear(FwGearCategory), FwGearCpuHours, 0.0)) AS FwGearAnalysisCpuHours
      , SUM(IF (isAnalysisGear(FwGearCategory), 0.0, FwGearCpuHours)) AS FwGearUtilityCpuHours
      , SUM(FwGearCpuHours) AS FwGearGenericCpuHours
      , SUM(FwGearInitialAnalysis) AS FwInitialAnalysisCount
    
    FROM (
        SELECT 
          
              invoice_month AS InvoiceMonth
            , REPLACE(`group`,"_","-") AS FwGroup
            , project AS FwProject
            , gear_name AS FwGearName
            , gear_category AS FwGearCategory
            #
            # Many more job cpu hours can be recorded than billed for
            # A 1 core compute node generates 1 cpu hour (and disk, ram, etc)
            # 24 jobs can be run on the single compute node and if they each take 10 minutes to run, that is 240 minutes of runtime,
            # but not an accurate reflection of what we are being billed for.
            #
            # We allocate the compute costs based on how much cpu hours flywheel records for each job
            # If flywheel says dicom2niix takes 3 cpu hours and ashsharpicv takes 1 cpu hour, then 3/4 of the cost is attributed
            # to dicom2niix and 1/4 to ashsharpicv
            #
            , fwCpuMsToCpuHours(job_runtime_ms * gcp_cpus) AS FwGearCpuHours
            , IF(initial_analysis,1,0) AS FwGearInitialAnalysis
          
        FROM
	    `pennbrain-center.BillingAllocation.FwJobsReport` 
          
        WHERE
            invoice_month = "202207"
        
    )

    GROUP BY
        InvoiceMonth
        , FwGroup
        , FwProject
        , FwGearName
        , FwGearCategory

  ;

SET GcpTotalComputeStaticCosts = (
    SELECT
	SUM(GcpGroupComputeStaticCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4`
    );

SET GcpTotalComputeDynamicCosts = (
    SELECT
	SUM(GcpGroupComputeDynamicCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4`
    );

SET GcpTotalComputeUnlabeledCosts = (
    SELECT
	SUM(GcpGroupComputeUnlabeledCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4`
    ); 	

SET GcpTotalComputeLabeledCosts = (
    SELECT
	SUM(GcpGroupComputeLabeledCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4`
    ); 	

SET GcpTotalMiscCosts = (
    SELECT
	SUM(GcpGroupMiscCosts)
    FROM
        `pennbrain-center.Alice.TempGcpClassifiedCostsV4`

    WHERE
        InvoiceMonth = "202207"
    );

SET FwTotalGearAnalysisCpuHours = (
    SELECT
        SUM(FwGearAnalysisCpuHours)
    FROM
        `pennbrain-center.Alice.TempFwGroupProjectComputeMetricsV4`
    WHERE
        FwGroup IS NOT NULL
    AND
        FWGroup != "flywheel-static"
)
;

SET FwTotalGearUtilityCpuHours = (
    SELECT
        SUM(FwGearUtilityCpuHours)
    FROM
        `pennbrain-center.Alice.TempFwGroupProjectComputeMetricsV4`
    WHERE
        FwGroup IS NOT NULL
    AND
        FWGroup != "flywheel-static"
)
;

SELECT FwComputeDefaultSsdSize;
SELECT FwTotalGearAnalysisCpuHours;
SELECT FwTotalGearUtilityCpuHours;
SELECT GcpTotalComputeStaticCosts;
SELECT GcpTotalComputeDynamicCosts;
SELECT GcpTotalComputeUnlabeledCosts;
SELECT GcpTotalComputeLabeledCosts;
SELECT GcpTotalMiscCosts;

#
# 3  `pennbrain-center.Alice.TempProjectStorageMetricsV4`
#
#    Gcp charges us for 106TB of Standard storage, flwheel can account for 79 of them
#
#    The Bogus gear name column is inserted so the join in the next table does not wind up duplicating all the storage
#    metrics across each gear  Solves a lot of problems
#

CREATE OR REPLACE TABLE 
       `pennbrain-center.Alice.TempFwGroupProjectStorageMetricsV4` 
#    `'"${Project}.${Dataset}.TempFwGroupProjectUsageReport"'`

AS
    SELECT
          InvoiceMonth
        , FwGroup
        , FwProject
	, "StorageBogusGear" AS FwGearName
	, SUM(FwProjectStorageGb) AS FwProjectStorageGb
	, SUM(FwProjectStorageDeletedGb) AS FwProjectStorageDeletedGb
	, SUM(FwProjectStorageActiveGb) AS FwProjectStorageActiveGb
    FROM (
        SELECT
            invoice_month AS InvoiceMonth
          , REPLACE(`group`,"_","-") AS FwGroup
          , project_label AS FwProject
          , SUM(total_storage_byte_day / days / 1024.0 / 1024.0 / 1024.0) AS FwProjectStorageGb
          , IF (deleted, SUM(total_storage_byte_day / days / 1024.0 / 1024.0 / 1024.0), 0.0) AS FwProjectStorageDeletedGb
          , IF (NOT deleted, SUM(total_storage_byte_day / days / 1024.0 / 1024.0 / 1024.0), 0.0) AS FwProjectStorageActiveGb
        FROM
          `pennbrain-center.BillingAllocation.FwUsageReport`
#          `'"${Project}.${Dataset}.FwUsageReport"'`

        WHERE
          invoice_month = "202207"
          AND project_label IS NOT NULL

        GROUP BY
            InvoiceMonth,
            FwGroup,
            FwProject,
	    deleted
        ORDER BY
            InvoiceMonth,
            FwGroup,
            FwProject
    )
    GROUP BY
            InvoiceMonth,
            FwGroup,
            FwProject
    ORDER BY
            InvoiceMonth,
            FwGroup,
            FwProject

;

#
# TempFwAllocatedGroupProjectComputeStorageMetrics
#
CREATE OR REPLACE TABLE

  `pennbrain-center.Alice.TempFwGroupProjectComputeStorageMetricsV4`

AS
    SELECT
          IF (t1.InvoiceMonth IS NULL, t2.InvoiceMonth, t1.InvoiceMonth) AS InvoiceMonth
	, IF (t1.FwGroup IS NULL, t2.FwGroup, t1.FwGroup) AS FwGroup
	, IF (t1.FwProject IS NULL, t2.FwProject, t1.FwProject) AS FwProject
	, IF (t1.FwGearName IS NULL, t2.FwGearName, t1.FwProject) AS FwGearName
	, SUM(IF (t1.FwGearRunCount IS NULL, 0.0, t1.FwGearRunCount)) AS FwGearRunCount
	, SUM(IF (t1.FwGearAnalysisCpuHours IS NULL, 0.0, t1.FwGearAnalysisCpuHours)) AS FwGearAnalysisCpuHours
	, SUM(IF (t1.FwGearUtilityCpuHours IS NULL, 0.0, t1.FwGearUtilityCpuHours)) AS FwGearUtilityCpuHours
	, SUM(IF (t1.FwGearGenericCpuHours IS NULL, 0.0, t1.FwGearGenericCpuHours)) AS FwGearGenericCpuHours
	, SUM(IF (t1.FwInitialAnalysisCount IS NULL, 0.0, t1.FwInitialAnalysisCount)) AS FwInitialAnalysisCount
	, SUM(IF (t2.FwProjectStorageGb IS NULL, 0.0, t2.FwProjectStorageGb)) AS FwProjectStorageGb
	, SUM(IF (t2.FwProjectStorageActiveGb IS NULL, 0.0, t2.FwProjectStorageActiveGb)) AS FwProjectStorageActiveGb
	, SUM(IF (t2.FwProjectStorageDeletedGb IS NULL, 0.0, t2.FwProjectStorageDeletedGb)) AS FwProjectStorageDeletedGb

    FROM
        `pennbrain-center.Alice.TempFwGroupProjectComputeMetricsV4` t1

    FULL OUTER JOIN 
        `pennbrain-center.Alice.TempFwGroupProjectStorageMetricsV4` t2
    ON
	    t1.InvoiceMonth = t2.InvoiceMonth
	AND t1.FwGroup = t2.FwGroup
	AND t1.FwProject = t2.FwProject
	AND t1.FwGearName = t2.FwGearName

    GROUP BY
          InvoiceMonth
        , FwGroup
        , FwProject
        , FwGearName

    ORDER BY
          InvoiceMonth
	, FwGroup
	, FwProject
	, FwGearName

;

SELECT
     SUM(FwGearRunCount) AS FwGearRunCount
   , SUM(FwGearAnalysisCpuHours) AS FwGearAnalysisCpuHours
   , SUM(FwGearUtilityCpuHours) AS FwGearUtilityCpuHours
   , SUM(FwGearGenericCpuHours) AS FwGearGenericCpuHours
   , SUM(FwInitialAnalysisCount) AS FwInitialAnalysisCount
   , SUM(FwProjectStorageGb) AS FwProjectStorageGb
   , SUM(FwProjectStorageActiveGb) AS FwProjectStorageActiveGb
   , SUM(FwProjectStorageDeletedGb) AS FwProjectStorageDeletedGb
FROM
  `pennbrain-center.Alice.TempFwGroupProjectComputeStorageMetricsV4`
;

'
exit

'

#
# 4
#
# This table is grouped by group/project/gear so you can not allocate storage costs by project
#
CREATE OR REPLACE TABLE

  `pennbrain-center.Alice.TempGcpFwAllocatedComputeCosts`

AS
    SELECT
          *
	, zeroIfNull(TotalComputeCosts) + zeroIfNull(GcpFwAllocatedMiscCosts) AS TotalMiscNComputeCosts
    FROM (

        SELECT
              *
            , zeroIfNull(GcpFwAllocatedDynamicComputeCosts) + zeroIfNull(GcpFwAllocatedStaticComputeCosts) + zeroIfNull(GcpFwAllocatedUnlabeledComputeCosts) AS TotalComputeCosts

        FROM (
          SELECT
            t3.InvoiceMonth,
            t3.FwGroup,
            t4.FwProject,
            t4.GearName,
            t4.GearRunCount,
            t4.AnalysisGearCpuHours,
            t4.UtilityGearCpuHours,
            t4.GenericGearCpuHours,
            t4.InitialAnalysisCount,
            t4.GroupAnalysisGearCpuHours,
            t4.GroupUtilityGearCpuHours,
            t3.GcpFwGroupComputeCosts,
            t3.GcpFwGroupComputeCoreCpuHours,
        
            IF (GroupAnalysisGearCpuHours > 0.0, GcpFwGroupComputeDynamicCosts * AnalysisGearCpuHours / GroupAnalysisGearCpuHours, 0.0) AS GcpFwAllocatedDynamicComputeCosts,
            IF (FwTotalUtilityGearCpuHours > 0.0, GcpFwTotalFlywheelStaticComputeCosts * UtilityGearCpuHours / FwTotalUtilityGearCpuHours, 0.0) AS GcpFwAllocatedStaticComputeCosts,
            IF (FwTotalAnalysisGearCpuHours > 0.0, GcpFwTotalUnlabeledComputeCosts * AnalysisGearCpuHours / FwTotalAnalysisGearCpuHours,0.0) AS GcpFwAllocatedUnlabeledComputeCosts,
        
           IF (GcpFwTotalMiscCosts > 0.0, GcpFwTotalMiscCosts * AnalysisGearCpuHours / FwTotalAnalysisGearCpuHours, 0.0) AS GcpFwAllocatedMiscCosts,

          FROM (
            SELECT
              *
            FROM
               `pennbrain-center.Alice.TempGcpFwClassifiedCosts` 
        
          ) t3
          LEFT OUTER JOIN (
         
            SELECT
                  t1.InvoiceMonth
                , t1.FwGroup
                , FwProject
                , GearName
                , GearRunCount
                , AnalysisGearCpuHours
                , UtilityGearCpuHours
                , GenericGearCpuHours
                , InitialAnalysisCount
                , t2.GroupAnalysisGearCpuHours
                , t2.GroupUtilityGearCpuHours
            From (
              SELECT
                InvoiceMonth,
                FwGroup,
                FwProject,
                GearName,
                SUM(GearRunCount) AS GearRunCount,
                SUM(AnalysisGearCpuHours) AS AnalysisGearCpuHours,
                SUM(UtilityGearCpuHours) AS UtilityGearCpuHours,
                SUM(GenericGearCpuHours) AS GenericGearCpuHours,
                SUM(InitialAnalysisCount) AS InitialAnalysisCount,
              FROM
                `pennbrain-center.Alice.TempFwGroupProjectComputeMetrics`
        
              GROUP BY
                InvoiceMonth,
                FwGroup,
                FwProject,
                GearName 
             ) t1
            FULL OUTER JOIN (
              SELECT
                InvoiceMonth,
                FwGroup,
                SUM(AnalysisGearCpuHours) AS GroupAnalysisGearCpuHours, 
                SUM(UtilityGearCpuHours) AS GroupUtilityGearCpuHours
              FROM
                `pennbrain-center.Alice.TempProjectJobReport`
              GROUP BY
                InvoiceMonth,
                  FwGroup
            ) t2
            ON
                  t1.InvoiceMonth = t2.InvoiceMonth
              AND t1.FwGroup = t2.FwGroup
          ) t4
          ON
                  t3.InvoiceMonth = t4.InvoiceMonth
              AND t3.FwGroup = t4.FwGroup
          ORDER BY
            InvoiceMonth
            , FwGroup
            , FwProject
            , GearName
        
        )
    )
;

#
# 6   `pennbrain-center.Alice.TempProjectAllocatedStorageCosts`
#


#
# *** There are a few groups which have compute costs and no analysis jobs
# For July, this works out to about $4.24, so we are still missing about $1.50 of compute costs
#
# There is another $1.47 missing from the flywheel-static/utility costs  do not know where that is hiding
#

SET GcpFwTotalComputeNonGearCosts = (
    SELECT
      SUM(GcpFwGroupComputeCosts)
    FROM (
      SELECT 
          InvoiceMonth
        , FwGroup
        , GcpFwGroupComputeCosts
        , SUM(AnalysisGearCpuHours) AS AnalysisGearCpuHours
      FROM `pennbrain-center.Alice.TempGcpFwAllocatedComputeCosts` 
     GROUP BY
        InvoiceMonth
        , FwGroup
        , GcpFwGroupComputeCosts
    
      
    )
    WHERE 
            AnalysisGearCpuHours = 0
	AND GcpFwGroupComputeCosts != 0
)
;

SET GcpFwStaticStorageStandardCosts = (
    SELECT
        SUM(DiscountedCosts)
    FROM
	`pennbrain-center.Alice.TempGcpFlywheelCosts`
    WHERE
       FwGroup = "flywheel-static"
       AND ServiceDescription = "Cloud Storage"	
       AND SkuDescription LIKE "Standard Storage%"
)
;

SET GcpFwStaticStorageColdlineCosts = (
    SELECT
        SUM(DiscountedCosts)
    FROM
	`pennbrain-center.Alice.TempGcpFlywheelCosts`
    WHERE
       FwGroup = "flywheel-static"
       AND ServiceDescription = "Cloud Storage"	
       AND SkuDescription LIKE "Coldline Storage%"
)
;

SET GcpFwStaticStorageArchiveCosts = (
    SELECT
        SUM(DiscountedCosts)
    FROM
	`pennbrain-center.Alice.TempGcpFlywheelCosts`
    WHERE
       FwGroup = "flywheel-static"
       AND ServiceDescription = "Cloud Storage"	
       AND SkuDescription LIKE "Archive Storage%"
)
;

SET GcpFwStaticStorageMiscCosts = (
    SELECT
        SUM(DiscountedCosts)
    FROM
	`pennbrain-center.Alice.TempGcpFlywheelCosts`
    WHERE
       FwGroup = "flywheel-static"
       AND ServiceDescription = "Cloud Storage"	
       AND SkuDescription NOT LIKE "Archive Storage%"
       AND SkuDescription NOT LIKE "Coldline Storage%"
       AND SkuDescription NOT LIKE "Standard Storage%"
)
;

SET FwTotalProjectStorageGb = (
    SELECT
        SUM(FwProjectStorageGb)
    FROM
	`pennbrain-center.Alice.TempFwGroupProjectUsageReportV3`
)
;

SELECT GcpFwTotalComputeNonGearCosts;
SELECT GcpFwStaticStorageStandardCosts;
SELECT GcpFwStaticStorageColdlineCosts;
SELECT GcpFwStaticStorageArchiveCosts;
SELECT GcpFwStaticStorageMiscCosts;
SELECT FwTotalProjectStorageGb;
	

#
# Putting the non gear costs here because they are have to be allocated by project -- there are no gears associated with
# these compute costs
#
# *** Still missing $1.47 in compute costs
#

# *** Want to calculate cost/gb metrics --- This is done in the Classified costs table skip

CREATE OR REPLACE TABLE 
       `pennbrain-center.Alice.TempFwGroupProjectAllocatedStorageCostsV3` 
#    `'"${Project}.${Dataset}.TempFwGroupProjectAllocatedStorageCostsV3"'`

AS
    SELECT
        *
	, zeroIfNull(FwProjectStorageCosts) + zeroIfNull(FwProjectComputeNonGearCosts) AS FwProjectStorageNonGearCosts
    FROM (
        SELECT
            *
    	    ,   zeroIfNull(FwProjectStorageStandardCosts)
	      + zeroIfNull(FwProjectStorageColdlineCosts)
	      + zeroIfNull(FwProjectStorageArchiveCosts)
	      + zeroIfNull(FwProjectStorageMiscCosts) AS FwProjectStorageCosts, 
    
        FROM (
            SELECT
                InvoiceMonth,
                FwGroup,
                FwProject,
        
    	    GcpFwTotalComputeNonGearCosts  * SUM(FwProjectStorageGb) / FwTotalProjectStorageGb AS FwProjectComputeNonGearCosts,
    
                SUM(FwProjectStorageGb) AS FwProjectStorageGb,
        
                #
                # *** All storage is in flywheel-static at the moment, but this does not handle the case where there are other
                # repositories of storage costs
                # These should be GcpFwStorage{Standard,Coldline,Archive,Misc}
                #
                GcpFwStaticStorageStandardCosts * SUM(FwProjectStorageGb) / FwTotalProjectStorageGb AS FwProjectStorageStandardCosts,
                GcpFwStaticStorageColdlineCosts * SUM(FwProjectStorageGb) / FwTotalProjectStorageGb AS FwProjectStorageColdlineCosts,
                GcpFwStaticStorageArchiveCosts * SUM(FwProjectStorageGb) / FwTotalProjectStorageGb AS FwProjectStorageArchiveCosts,
                GcpFwStaticStorageMiscCosts * SUM(FwProjectStorageGb) / FwTotalProjectStorageGb AS FwProjectStorageMiscCosts,
            
                Sum(FwProjectStorageGb) / FwTotalProjectStorageGb AS FwProjectStorageRatio,
            
                GcpFwStaticStorageStandardCosts,
                GcpFwStaticStorageColdlineCosts,
                GcpFwStaticStorageArchiveCosts,
            
                SUM(FwProjectDeletedStorageGb) AS FwProjectDeletedStorageGb,
                SUM(FwProjectActiveStorageGb) AS FwProjectActiveStorageGb,
            
            FROM 
                `pennbrain-center.Alice.TempFwGroupProjectUsageReportV3`
        
            GROUP BY
                  InvoiceMonth
        	    , FwGroup
        	    , FwProject
        
            ORDER BY
                  InvoiceMonth
        	    , FwGroup
        	    , FwProject
        )
   )
;

#
# *** Should combine storage and compute costs at the gear level and let the missing gear lines take a null 
#     Maybe introduce a bogusgear to hold the storage charges for all gears, and for projects without any gears
# *** GenericGearHours are flywheel runtimes -- not gcp allocated cpu hours
#
#

CREATE OR REPLACE TABLE 
       `pennbrain-center.Alice.TempFwGroupProjectAllocatedCostsV3` 
#    `'"${Project}.${Dataset}.TempFwGroupProjectAllocatedV3"'`

AS
  SELECT 
      t1.InvoiceMonth
    , t1.FwGroup
    , t1.FwProject
    , InitialAnalysisCount
    , FwProjectStorageAllocatedCosts
    , FwProjectStorageStandardGb
    , GcpFwProjectDynamicComputeCosts
    , GcpFwProjectStaticComputeCosts
    , ProjectComputeCosts
    , ProjectMiscCosts
    , FwProjectComputeNonGearCosts
    ,   zeroIfNull(FwProjectStorageAllocatedCosts)
      + zeroIfNull(ProjectComputeCosts)
      + zeroIfNull(ProjectMiscCosts)
      + zeroIfNull(FwProjectcomputeNonGearcosts) AS GcpProjectTotalAllocatedCosts
  FROM (
    SELECT
          InvoiceMonth
        , FwGroup
        , FwProject
        , SUM(FwProjectStorageGb) AS FwProjectStorageStandardGb
        , SUM(FwProjectStorageCosts) AS FwProjectStorageAllocatedCosts
	, SUM(FwProjectComputeNonGearCosts) AS FwProjectComputeNonGearCosts

    FROM
        `pennbrain-center.Alice.TempFwGroupProjectAllocatedStorageCostsV3`
    WHERE
      FwGroup IS NOT NULL
    GROUP BY
          InvoiceMonth
        , FwGroup
        , FwProject
  ) t1
  FULL OUTER JOIN (
    SELECT
          InvoiceMonth
        , FwGroup
        , FwProject
        , SUM(InitialAnalysisCount) AS InitialAnalysisCount
	, SUM(GcpFwAllocatedDynamicComputeCosts) AS GcpFwProjectDynamicComputeCosts
	, SUM(GcpFwAllocatedStaticComputeCosts) AS GcpFwProjectStaticComputeCosts
        , SUM(TotalComputeCosts) AS ProjectComputeCosts
        , SUM(GcpFwAllocatedMiscCosts) ProjectMiscCosts
    FROM
        `pennbrain-center.Alice.TempGcpFwAllocatedComputeCosts`

    GROUP BY
          InvoiceMonth
        , FwGroup
        , FwProject
  ) t2
  ON
        t1.InvoiceMonth = t2.InvoiceMonth
    AND t1.FwGroup = t2.FwGroup
    AND t1.FwProject = t2.FwProject
  ORDER BY
      t1.InvoiceMonth
    , t1.FwGroup
    , t1.FwProject
;


CREATE OR REPLACE TABLE 
       `pennbrain-center.Alice.FwProjectAllocatedCostsV3` 

AS
    SELECT
          *
	, zeroIfNull(GcpProjectTotalCharges) + zeroIfNull(TotalBscProjectCharges) AS TotalProjectCharges
    FROM (
        SELECT
              *
    	, zeroIfNull(FwProjectStorageAllocatedCosts) + zeroIfNull(GcpFwProjectDynamicComputeCosts) AS GcpProjectTotalCharges
    	, zeroIfNull(BscInitialAnalysisCharge) + zeroIfNull(BscStorageCharge) + zeroIfNull(BscProjectCharges) AS TotalBscProjectCharges
    
        FROM (
          SELECT 	
                InvoiceMonth
              , FwGroup
              , FwProject
              , InitialAnalysisCount
              , calculateBscInitialAnalysisCharge(InitialAnalysisCount) AS BscInitialAnalysisCharge
              , FwProjectStorageAllocatedCosts
              , FwProjectStorageStandardGb
              , calculateBscStorageCharge(FwProjectStorageAllocatedCosts) AS BscStorageCharge

	      , GcpFwProjectDynamicComputeCosts
	      , GcpFwProjectStaticComputeCosts
	      , ProjectMiscCosts

              , ProjectComputeCosts
              ,   zeroIfNull(GcpFwProjectDynamicComputeCosts)
                + zeroIfNull(ProjectMiscCosts)
                + zeroIfNull(FwProjectcomputeNonGearcosts) AS GcpAllocatedComputeDynamicCharges
              , calculateBscProjectCharge(FwProjectStorageStandardGb, FwProjectStorageAllocatedCosts) AS BscProjectCharges
           FROM
               `pennbrain-center.Alice.TempFwGroupProjectAllocatedCostsV3` 
    
    )
);

'
