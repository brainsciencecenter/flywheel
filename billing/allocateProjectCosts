#!/bin/bash

CmdName=$(basename "$0")

syntax="${CmdName} [-d Dataset][-p Project][-v] {-m Month} {-y Year}"

function OutputControl {
    if [ -n "$opt_v" ]
    then
	cat
    else
	cat > /dev/null
    fi
}

while getopts d:m:p:vy: arg
do
	case "$arg" in 
		d|m|p|v|y)
			eval "opt_${arg}=${OPTARG:=1}"
			;;
	esac
done

shift $(($OPTIND - 1))

if [ -z "$opt_y" ] || [ -z "$opt_m" ]
then
	echo "$syntax" 1>&2
	exit 1
fi

nowmonth=$(date +%Y-%m-15)
Year=$(date --date="$nowmonth -1 month" +'%Y')
[ -n "$opt_y" ] && Year="$opt_y"

Month=$(date --date="$nowmonth -1 month" +'%m')
[ -n "$opt_m" ] && Month="$opt_m"

Dataset=BillingAllocation
[ -n "$opt_d" ] && Dataset="$opt_d"

Project=pennbrain-center
[ -n "$opt_p" ] && Project="$opt_p"


bq query --use_legacy_sql=false --format=csv --allow_large_results --max_rows=1000000 --parameter="InvoiceMonth:STRING:${opt_y}${opt_m}" '

DECLARE TotalComputeDiscountedCosts float64;

DECLARE TotalVMCosts float64;
DECLARE TotalVMStaticCosts float64;
DECLARE TotalVMDynamicCosts float64;
DECLARE TotalVMCoreHours float64;
DECLARE TotalVMStaticCoreHours float64;
DECLARE TotalVMDynamicCoreHours float64;

DECLARE TotalFwProjectCpuHours FLOAT64;

DECLARE TotalStorageCosts float64;
DECLARE TotalGcpStorageStandardUsage float64;
DECLARE TotalFwStorageStandardUsage float64;
DECLARE TotalMiscCosts FLOAT64;
DECLARE TotalComputeCosts FLOAT64;
DECLARE TotalKubernetesCosts FLOAT64;

CREATE TEMP FUNCTION BscStorageOverheadRate() RETURNS FLOAT64 AS (0.25);
CREATE TEMP FUNCTION BscInitialAnalysisRate() RETURNS FLOAT64 AS (25);
CREATE TEMP FUNCTION BscSmallProjectCharge() RETURNS FLOAT64 AS (8.33);
CREATE TEMP FUNCTION BscLargeProjectCharge() RETURNS FLOAT64 AS (20.66);
CREATE TEMP FUNCTION OneTeraByte() RETURNS FLOAT64 AS (1024.0); # in Gibibytes
CREATE TEMP FUNCTION OneCent() RETURNS FLOAT64 AS (0.01);

CREATE TEMP FUNCTION mapNullToZero(v FLOAT64) RETURNS FLOAT64 AS (IF (v IS NULL, 0.0, v));

CREATE TEMP FUNCTION isTbOrMore(StorageUsage FLOAT64) RETURNS BOOL AS (
       IF ((StorageUsage > OneTeraByte()),
       	  TRUE,
	  FALSE)
);

CREATE TEMP FUNCTION calculateBscStorageCharge(StorageCharge FLOAT64) RETURNS FLOAT64 AS (
       StorageCharge * BscStorageOverheadRate()
);

CREATE TEMP FUNCTION calculateBscInitialAnalysisCharge(InitialAnalysisCount FLOAT64) RETURNS FLOAT64 AS (
       InitialAnalysisCount * BscInitialAnalysisRate()
);


CREATE TEMP FUNCTION calculateBscProjectCharge(StorageStandardUsage FLOAT64, StorageCharge FLOAT64) RETURNS FLOAT64 AS (
        IF (round(StorageCharge,2) >= OneCent(),
                IF (isTbOrMore(StorageStandardUsage),
		   BscLargeProjectCharge(),
		   BscSmallProjectCharge()
		),
		0.0
	)
);

SET TotalFwProjectCpuHours = (
    SELECT 
        SUM(FwProjectCpuHours)
    FROM 
        `'"${Project}.${Dataset}.TempGcpFwBillingAllocation"'` 
);
 

CREATE TABLE IF NOT EXISTS
       `'"${Project}.${Dataset}.FwProjectBilling"'`
  (
	InvoiceMonth			STRING,
	`Group`				STRING,	
	project				STRING,	
	IsTbOrMore			BOOLEAN,	
	ProjectStorageUsage		FLOAT64,	
	ProjectStorageCosts		FLOAT64,	
	ProjectGcpStorageStandardUsage	FLOAT64,	
	BscProjectStorageCharge		FLOAT64,	
	BscProjectCharge		FLOAT64,	
	ProjectVMCosts			FLOAT64,	
	ProjectVMDynamicCosts		FLOAT64,	
	ProjectVMStaticCosts		FLOAT64,	
	ProjectComputeCosts		FLOAT64,	
	ProjectKubernetesCosts		FLOAT64,	
	ProjectMiscCosts		FLOAT64,	
	InitialAnalysisCount		FLOAT64,	
	BscInitialAnalysisCharge	FLOAT64,	
	ProjectVMDynamicCoreHours	FLOAT64,	
	ProjectBscCharges		FLOAT64,	
	ProjectGcpCosts			FLOAT64,
	ProjectBscGcpCosts		FLOAT64,	
	TotalVMDynamicCoreHours		FLOAT64,
	FwProjectCpuHours		FLOAT64,
        TotalFwProjectCpuHours		FLOAT64,
	AllocatedGroupDiscountedCosts	FLOAT64,
  )
;

DELETE FROM 
       `'"${Project}.${Dataset}.FwProjectBilling"'`
    WHERE
        InvoiceMonth = @InvoiceMonth
;

INSERT 
       `'"${Project}.${Dataset}.FwProjectBilling"'`

    SELECT
        InvoiceMonth,
	`Group`,
	Project,

	IsTbOrMore,

	ProjectStorageUsage,
	ProjectStorageCosts,
	ProjectGcpStorageStandardUsage,
	BscProjectStorageCharge,
	BscProjectCharge,

	ProjectVMCosts,
	ProjectVMDynamicCosts,
	ProjectVMStaticCosts,
	ProjectComputeCosts,

	ProjectKubernetesCosts,
	ProjectMiscCosts,

	InitialAnalysisCount,
	BscInitialAnalysisCharge,

	ProjectVMDynamicCoreHours,

    	(BscProjectStorageCharge + BscProjectCharge + BscInitialAnalysisCharge) AS ProjectBscCharges,

        # *** Leaving out to match Julys billing ProjectKubernetesCosts + 
        (ProjectComputeCosts + ProjectStorageCosts + ProjectMiscCosts) AS ProjectGcpCosts,

        (ProjectComputeCosts + ProjectStorageCosts + ProjectMiscCosts +
            BscProjectStorageCharge + BscProjectCharge + BscInitialAnalysisCharge) AS ProjectBscGcpCosts,

	TotalVMDynamicCoreHours,
    
        FwProjectCpuHours,
        TotalFwProjectCpuHours,
	AllocatedGroupDiscountedCosts,

    FROM (
        SELECT
            InvoiceMonth,
            `Group`,
            Project,

	    mapNullToZero(FwProjectInitialAnalysis) AS InitialAnalysisCount,
	    mapNullToZero(calculateBscInitialAnalysisCharge(FwProjectInitialAnalysis)) AS BscInitialAnalysisCharge,

            isTbOrMore(AllocatedTotalStorageStandardGB) AS IsTbOrMore,

	    # Spreading the GCP costs across the project
#	    mapNullToZero(AllocatedTotalStorageGB) AS ProjectStorageUsage,
#	    mapNullToZero(AllocatedTotalStorageDiscountedCosts) AS ProjectStorageCosts,

#	    mapNullToZero(AllocatedTotalStorageStandardGB) AS ProjectGcpStorageStandardUsage,
#	    mapNullToZero(calculateBscStorageCharge(AllocatedTotalStorageDiscountedCosts)) AS BscProjectStorageCharge,
#	    mapNullToZero(calculateBscProjectCharge(AllocatedTotalStorageStandardGB,AllocatedTotalStorageDiscountedCosts)) AS BscProjectCharge,

	    # Using only the FwUsage Report numbers
	    mapNullToZero(FwProjectStorageGB) AS ProjectStorageUsage,
	    mapNullToZero(FwProjectStorageStandardCosts) AS ProjectStorageCosts,

	    mapNullToZero(FwProjectStorageGB) AS ProjectGcpStorageStandardUsage,
	    mapNullToZero(calculateBscStorageCharge(FwProjectStorageStandardCosts)) AS BscProjectStorageCharge,
	    mapNullToZero(calculateBscProjectCharge(FwProjectStorageGB,FwProjectStorageStandardCosts)) AS BscProjectCharge,

#	    mapNullToZero(AllocatedGroupComputeVmDiscountedCosts) AS ProjectVMCosts,
#	    mapNullToZero(AllocatedGroupDynamicComputeVmDiscountedCosts) AS ProjectVMDynamicCosts,

	    mapNullToZero(AllocatedGroupComputeDiscountedCosts) AS ProjectVMCosts,
	    mapNullToZero(AllocatedGroupDynamicComputeDiscountedCosts) AS ProjectVMDynamicCosts,
	    mapNullToZero(AllocatedGroupStaticComputeVmDiscountedCosts) AS ProjectVMStaticCosts,
	    mapNullToZero(AllocatedTotalComputeDiscountedCosts) AS ProjectComputeCosts,

	    mapNullToZero(AllocatedTotalKubernetesDiscountedCosts) AS ProjectKubernetesCosts,
	    mapNullToZero(AllocatedGroupMiscDiscountedCosts) AS ProjectMiscCosts,

	    # These hours are from GCP billing -- not from FwJobs
	    mapNullToZero(AllocatedGroupDynamicComputeCpuHours) AS ProjectVMDynamicCoreHours,

	    FwProjectCpuHours,
	    AllocatedGroupDiscountedCosts,

        FROM
            `'"${Project}.${Dataset}.TempGcpFwBillingAllocation"'` tgfba

        ORDER BY
            InvoiceMonth,
            `Group`,
            Project
    )

;


' | OutputControl
