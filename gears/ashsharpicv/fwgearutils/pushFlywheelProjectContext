#!/usr/bin/env python3

import sys
import re
import os
import flywheel
import json
import argparse
import fwgearutils

from os.path import expanduser

def updateNestedDict(d, keypath, ud):
    if (len(keypath) == 1):
        try:
            d[keypath[0]].update(ud)
        except KeyError:
            return(None)
    else:
        try:
            updateNestedDict(d[keypath[0]],keypath[1:],ud)
        except KeyError:
            return(None)


if __name__ == '__main__':
    import argparse
    import tempfile

    CmdName = os.path.basename(sys.argv[0])

    ap = argparse.ArgumentParser()

    group = ap.add_mutually_exclusive_group()
    group.add_argument("-a", "--all", action='store_const', dest='context', const='context')
    group.add_argument("-g", "--group", action='store_const', dest='context', const='group')
    group.add_argument("-p", "--project", action='store_const', dest='context', const='project')
    group.add_argument("-s", "--site", action='store_const', dest='context', const='site')

    ap.set_defaults(context='project')

    ap.add_argument('-l', '--leaf-path',action='store', nargs=1, help='space separated path to left to update')
    ap.add_argument('project', nargs=1, help='group/project')
    ap.add_argument('jsonfile', nargs='?', help='path to json file to upload to context, defaults to stdin')
    args = ap.parse_args()

    #print("project = '%s'" % (args.project))
    #print("jsonfile = '%s'" % (args.jsonfile))

    ApiKey = fwgearutils.getApiKey(args)

    try:
        fw = flywheel.Client()
    except (OSError, Exception) as e:
        try:
            fw = flywheel.Client(ApiKey,root=True)
        
        except (OSError, Exception) as e2:
            print("e2",e2)
            print("e",e)
            sys.exit(1)
 
    except (IOError) as e:
        print("pushFlywheelProjectContext", e.args, file=sys.stderr)
        sys.exit(1)


    if (args.project):
        try:
            container = fw.get(args.project[0])
            if ('gear_info' in container.keys()):
                ProjectID = container.parents.project
                project = fw.get(ProjectID)

        except flywheel.rest.ApiException as e:
            try:
                project = fw.lookup(args.project[0])

            except flywheel.rest.ApiException as e:
                print("%s : Cannot find project by '%s' : %s" % (CmdName, args.project[0], e.reason), file=sys.stderr)
                sys.exit(e.status)

    ProjectContextDict = fwgearutils.decodeKeys(project.info['context'])

    try:
        temp = tempfile.NamedTemporaryFile(mode='w+t', prefix=CmdName + '_', delete=False)
    except IOError as e:
        print("%s : Cannot open '%s' : %s" % (CmdName, temp, e.args[1]), file=sys.stderr)
        exit(e.args[0])

    try:
        temp.write(json.dumps(ProjectContextDict))
    finally:
        temp.close()

    print("%s : wrote original context to '%s'" % (CmdName, temp.name), file=sys.stderr)

    try:
        with open(args.jsonfile, 'r') if args.jsonfile else sys.stdin as jsonfile:
            Json = json.load(jsonfile)

    except IOError as e:
        print("%s : Cannot open '%s' : %s" % (CmdName, args.jsonfile, e.args[1]), file=sys.stderr)
        exit(e.args[0])
        
    keypath = []

    if (args.context == 'context'):
        pass
    else:
        keypath.append(args.context)

    if (args.leaf_path):
        keypath += args.leaf_path[0].split()
    
    updateNestedDict(ProjectContextDict,keypath, Json)

#    project.update_info({'context': fwgearutils.encodeKeys(ProjectContextDict)})

    print("%s : Updated context" % (CmdName), file=sys.stderr)
    print("  Run '%s -a %s %s' to restore the previous context" % (CmdName, args.project[0], temp.name), file=sys.stderr)
